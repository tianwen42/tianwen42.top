<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>吵闹的互联网</title>
      <link href="/posts/caeb.html"/>
      <url>/posts/caeb.html</url>
      
        <content type="html"><![CDATA[<h2 id="zhihuer"><a href="#zhihuer" class="headerlink" title="zhihuer"></a>zhihuer</h2><p>写在前面</p><blockquote><p>人是复杂而又立体的，很难想象众多特质竟然会在同一个人身上体现出来</p></blockquote><p>互联网真像一个大染缸，每天为了那么一点屁大点事也要吵得不可开交，还有点名某乎，某博，算是给他玩明白了，虽然我没用过微博，但应该也是十有八九，每几十分钟轮番刷新热榜，再添上热度，看着这么多人已经关注了，你会不会也想点进去看看？大抵是会的，毕竟在信息爆炸的时代，都生怕错过一点点东西，看热闹不嫌事大，人类的吃瓜本质，乌合之众罢了，其本质就是在贩卖焦虑，将这种情绪扩大，设置对立情绪，互联网本是一个很好的工具，跨越时间，跨越大海，直面另一端的人，但现在互联网的戾气越来越重，看过这些小作文，与网友们争吵过后，生活也并不会好转，不过是徒增烦恼。</p><p>某乎一众问题都是，</p><blockquote><p>关于xxxxxx，可能会有xxxxx影响？</p></blockquote><p>具体可以看下面随手截的一张图，这样的问题方式就很奇怪，千篇一律的推送系统风格，全都以问号❓结尾，画风诡异，像在打人工智能牌，信息茧房初现，每一个问题下全都是小故事，</p><p>再看一个具体问题：<strong>如何看待台州 4 女子寻刺激开保时捷去菜地偷菜一人当场被抓，目前均被行拘?</strong></p><blockquote><ol><li>寻刺激</li><li>开保时捷</li><li>偷菜被抓</li></ol></blockquote><p>这一个问题把人们<strong>吃瓜</strong>的天性，<strong>疫情</strong>当下的拘束，和经济不好的<strong>仇富</strong>情绪，就这么揉吧揉吧，丢了出来，怀疑推荐知乎系统会把这些舆情较高的话题自动生成问题，人工垃圾堆罢了</p><p><img src="https://qiniu.tianwen42.top/picgo/20220505093409.png" alt="image-20220505093409647"></p><p>想到这里，叮咚，今日的在知乎热榜推送果然又出现在通知栏中，遂卸载之。</p><h2 id="IP地域显示"><a href="#IP地域显示" class="headerlink" title="IP地域显示"></a>IP地域显示</h2><p>​        这个功能的确好，省的一些营销号放一些垃圾东西，还有一些外国ip无脑黑，国内确实不少头脑不清醒的人，特别容易被带节奏，看看抖音快手之流就明白了，但ip显示地域这招防的是这些人，没有能力分辨是非，就老老实实呆在局域网里面，就不要给国家添乱了，这也提醒了列位，在信息爆炸的时代，不要丢了心中那杆秤啊</p><h2 id="末了"><a href="#末了" class="headerlink" title="末了"></a>末了</h2><p>以一个知乎惯用风格的❓结束吧</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 吵闹 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法优化（以斐波那契数列为例）</title>
      <link href="/posts/bd6d.html"/>
      <url>/posts/bd6d.html</url>
      
        <content type="html"><![CDATA[<h2 id="题目-fb"><a href="#题目-fb" class="headerlink" title="题目.fb"></a>题目.fb</h2><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><blockquote><p>分别从几个方面优化，在写中。。。。</p></blockquote><h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><h3 id="最朴素的方法（非递归）"><a href="#最朴素的方法（非递归）" class="headerlink" title="最朴素的方法（非递归）"></a>最朴素的方法（非递归）</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int main() &#123;    int t1 &#x3D; 0, t2 &#x3D; 1, nextTerm &#x3D; 0, n;    cout &lt;&lt; &quot;Enter a positive number: &quot;;    cin &gt;&gt; n;    &#x2F;&#x2F; displays the first two terms which is always 0 and 1    cout &lt;&lt; &quot;Fibonacci Series: &quot; &lt;&lt; t1 &lt;&lt; &quot;, &quot; &lt;&lt; t2 &lt;&lt; &quot;, &quot;;    nextTerm &#x3D; t1 + t2;    while(nextTerm &lt;&#x3D; n) &#123;        cout &lt;&lt; nextTerm &lt;&lt; &quot;, &quot;;        t1 &#x3D; t2;        t2 &#x3D; nextTerm;        nextTerm &#x3D; t1 + t2;    &#125;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><blockquote><p>递归时间复杂度 &#x3D; 解决一个子问题时间*子问题个数，</p><p> fb（n）&#x3D;   fb（n-1）+fb（n-2）,是一个二叉树结构</p><p>递归的复杂度O(2^n)，你这样子就慢了:dog:</p></blockquote><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Solution &#123;public  int fb(int n) &#123;    if (n &#x3D;&#x3D; 1) &#123;      return 1;    &#125;    if (n &#x3D;&#x3D; 2) &#123;      return 2;    &#125;    return numWays(n - 1) + numWays(n - 2);  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="DP"><a href="#DP" class="headerlink" title="DP"></a>DP</h3><blockquote><p>用一个hashmap存储结果</p><p>第一步，算顶部的两项f（10）&#x3D; f(9) + f(8)</p><p>第二步，算顶部次级节点f(9) &#x3D; f（8）+ f（7），可以看到fb（8）重复</p><p>第三步，剪枝，跳过fb（8）节点</p><p>直到叶节点，递归树撸到底</p><p>DP是一种有记忆的算法</p></blockquote><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;unordered_map&gt;using namespace std;class Solution &#123;  unordered_map&lt;long long, long long&gt; map;public:  long long numWays(int n) &#123;    if (n &#x3D;&#x3D; 0) &#123;      return 1;    &#125;    if (n &lt;&#x3D; 2) &#123;      return n;    &#125;    if (map.count(n) !&#x3D; 0) &#123;      return map[n];    &#125; else &#123;      map[n] &#x3D; numWays(n - 1) + numWays(n - 2);      return numWays(n);    &#125;  &#125;&#125;;int main() &#123;  Solution tool &#x3D; Solution();  for (int i &#x3D; 1; i &lt; 50; i++) &#123;    cout &lt;&lt; i &lt;&lt; &quot;HASH  &quot; &lt;&lt; tool.numWays(i) &lt;&lt; endl;  &#125;  &#x2F;&#x2F; cout &lt;&lt; Solution().numWays(2);  cout &lt;&lt;LLONG_MAX;  return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>相似    <a href="https://leetcode-cn.com/problems/longest-increasing-subsequence">300. 最长递增子序列</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣2022-04-19</title>
      <link href="/posts/9c17.html"/>
      <url>/posts/9c17.html</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><ol start="342"><li>4的幂</li></ol><p>难度：简单</p><p>给定一个整数，写一个函数来判断它是否是 4 的幂次方。如果是，返回 true ；否则，返回 false 。</p><p>整数 n 是 4 的幂次方需满足：存在整数 x 使得 n &#x3D;&#x3D; 4<sup>x</sup></p><p><strong>示例 1：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：n &#x3D; 16输出：true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>示例 2：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：n &#x3D; 5输出：false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>示例 3：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：n &#x3D; 1输出：true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>提示：</strong></p><ul><li>-2<sup>31</sup> &lt;&#x3D; n &lt;&#x3D; 2<sup>31</sup> - 1</li></ul><p><strong>进阶：</strong>你能不使用循环或者递归来完成本题吗？</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/power-of-four/">https://leetcode-cn.com/problems/power-of-four/</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><blockquote><p>4的n次幂模4  和 4的 n-k次幂模4 都为0</p></blockquote><h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;* * @lc app&#x3D;leetcode.cn id&#x3D;342 lang&#x3D;cpp * * [342] 4的幂 *&#x2F;&#x2F;&#x2F; @lc code&#x3D;startclass Solution &#123;public:    bool isPowerOfFour(int num) &#123;        return num&gt;0 &amp;&amp; (num &#x3D;&#x3D; 1 ||(num%4&#x3D;&#x3D;0 &amp;&amp; isPowerOfFour(num&#x2F;4)));    &#125;&#125;;&#x2F;&#x2F; @lc code&#x3D;end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣2022-04-16</title>
      <link href="/posts/9857.html"/>
      <url>/posts/9857.html</url>
      
        <content type="html"><![CDATA[<h2 id="题目-剑指-Offer-II-079-所有子集"><a href="#题目-剑指-Offer-II-079-所有子集" class="headerlink" title="题目.剑指 Offer II 079. 所有子集"></a>题目.剑指 Offer II 079. 所有子集</h2><p>难度：中等</p><p>给定一个整数数组 nums ，数组中的元素 <strong>互不相同</strong> 。返回该数组所有可能的子集（幂集）。</p><p>解集 <strong>不能</strong> 包含重复的子集。你可以按 <strong>任意顺序</strong> 返回解集。</p><p><strong>示例 1：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：nums &#x3D; [1,2,3]输出：[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>示例 2：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：nums &#x3D; [0]输出：[[],[0]]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>提示：</strong></p><ul><li>1 &lt;&#x3D; nums.length &lt;&#x3D; 10</li><li>-10 &lt;&#x3D; nums[i] &lt;&#x3D; 10</li><li>nums 中的所有元素 <strong>互不相同</strong></li></ul><p>注意：本题与主站 78 题相同： <a href="https://leetcode-cn.com/problems/subsets/">https://leetcode-cn.com/problems/subsets/</a></p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/TVdhkn/">https://leetcode-cn.com/problems/TVdhkn/</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><blockquote><p>可以正常遍历，也可以用dfs</p></blockquote><h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Solution &#123;public:    vector&lt;vector&lt;int&gt;&gt; subsets(vector&lt;int&gt;&amp; nums) &#123;        vector&lt;vector&lt;int&gt;&gt; res&#123;vector&lt;int&gt;()&#125;;        int i, j, len;        for (i&#x3D;0; i&lt;nums.size(); i++) &#123;            len &#x3D; res.size();            for (j&#x3D;0; j&lt;len; j++) &#123;                auto tmp &#x3D; res[j];                tmp.push_back(nums[i]);                res.push_back(tmp);            &#125;        &#125;        return res;    &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
            <tag> 剑指 Offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣2022-04-14</title>
      <link href="/posts/59d6.html"/>
      <url>/posts/59d6.html</url>
      
        <content type="html"><![CDATA[<h2 id="题目22-括号生成"><a href="#题目22-括号生成" class="headerlink" title="题目22.括号生成"></a>题目22.括号生成</h2><p>难度：中等</p><p>数字 n 代表生成括号的对数，请你设计一个函数，用于能够生成所有可能的并且 **有效的 **括号组合。</p><p><strong>示例 1：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：n &#x3D; 3输出：[&quot;((()))&quot;,&quot;(()())&quot;,&quot;(())()&quot;,&quot;()(())&quot;,&quot;()()()&quot;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>示例 2：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：n &#x3D; 1输出：[&quot;()&quot;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>提示：</strong></p><ul><li>1 &lt;&#x3D; n &lt;&#x3D; 8</li></ul><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/generate-parentheses/">https://leetcode-cn.com/problems/generate-parentheses/</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><blockquote><p>dfs，左右子树为（），刚好对应二叉树结构</p></blockquote><h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Solution &#123;public:    vector&lt;string&gt; generateParenthesis(int n) &#123;        vector&lt;string&gt; res;        if (n &lt;&#x3D; 0) return res;        dfs(n, &quot;&quot;, res, 0, 0);        return res;    &#125;    void dfs(int n, string path, vector&lt;string&gt;&amp; res, int open, int close) &#123;        if (open &gt; n || close &gt; open) return;        if (path.length() &#x3D;&#x3D; 2 * n) &#123;            res.push_back(path);            return;        &#125;        dfs(n, path + &quot;(&quot;, res, open + 1, close);        dfs(n, path + &quot;)&quot;, res, open, close + 1);    &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣2022-04-13</title>
      <link href="/posts/9b97.html"/>
      <url>/posts/9b97.html</url>
      
        <content type="html"><![CDATA[<h2 id="题目35-搜索插入位置"><a href="#题目35-搜索插入位置" class="headerlink" title="题目35.搜索插入位置"></a>题目35.搜索插入位置</h2><p>难度：简单</p><p>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</p><p>请必须使用时间复杂度为 O(log n) 的算法。</p><p><strong>示例 1:</strong></p><pre class="line-numbers language-none"><code class="language-none">输入: nums &#x3D; [1,3,5,6], target &#x3D; 5输出: 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>示例 2:</strong></p><pre class="line-numbers language-none"><code class="language-none">输入: nums &#x3D; [1,3,5,6], target &#x3D; 2输出: 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>示例 3:</strong></p><pre class="line-numbers language-none"><code class="language-none">输入: nums &#x3D; [1,3,5,6], target &#x3D; 7输出: 4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>提示:</strong></p><ul><li>1 &lt;&#x3D; nums.length &lt;&#x3D; 10<sup>4</sup></li><li>-10<sup>4</sup> &lt;&#x3D; nums[i] &lt;&#x3D; 10<sup>4</sup></li><li>nums 为 **无重复元素 **的 **升序 **排列数组</li><li>-10<sup>4</sup> &lt;&#x3D; target &lt;&#x3D; 10<sup>4</sup></li></ul><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/search-insert-position/">https://leetcode-cn.com/problems/search-insert-position/</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><blockquote><p>简单二分，要求O(log n) ，尽量不要暴力搜索</p></blockquote><h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Solution &#123;public:    int searchInsert(vector&lt;int&gt;&amp; nums, int target) &#123;        int left&#x3D;0;        int right&#x3D;nums.size()-1;        int mid&#x3D;left+(right-left)&#x2F;2;        if(target&gt;nums[right])&#123;            return right+1;        &#125;        while(left&lt;right)&#123;            if(nums[mid]&#x3D;&#x3D;target)&#123;                return mid;            &#125;            if(nums[mid]&lt;target)&#123;                left&#x3D;mid+1;            &#125;else&#123;                right&#x3D;mid;            &#125;            mid&#x3D;left+(right-left)&#x2F;2;        &#125;        return mid;    &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
            <tag> 二分法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣2022-04-11</title>
      <link href="/posts/5a16.html"/>
      <url>/posts/5a16.html</url>
      
        <content type="html"><![CDATA[<h2 id="题目42-接雨水"><a href="#题目42-接雨水" class="headerlink" title="题目42.接雨水"></a>题目42.接雨水</h2><p>难度：困难</p><p>给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。</p><p><strong>示例 1：</strong></p><img style="height: 161px; width: 412px;" src="https://qiniu.tianwen42.top/picgo/rainwatertrap.png"><pre class="line-numbers language-none"><code class="language-none">输入：height &#x3D; [0,1,0,2,1,0,1,3,2,1,2,1]输出：6解释：上面是由数组 [0,1,0,2,1,0,1,3,2,1,2,1] 表示的高度图，在这种情况下，可以接 6 个单位的雨水（蓝色部分表示雨水）。 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>示例 2：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：height &#x3D; [4,2,0,3,2,5]输出：9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>提示：</strong></p><ul><li>n &#x3D;&#x3D; height.length</li><li>1 &lt;&#x3D; n &lt;&#x3D; 2 * 10<sup>4</sup></li><li>0 &lt;&#x3D; height[i] &lt;&#x3D; 10<sup>5</sup></li></ul><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/trapping-rain-water/">https://leetcode-cn.com/problems/trapping-rain-water/</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><blockquote><p>日常接雨水，暴力搜索，脑子不够</p></blockquote><h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><h3 id="暴力搜索"><a href="#暴力搜索" class="headerlink" title="暴力搜索"></a>暴力搜索</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Solution &#123;public:    int trap(vector&lt;int&gt;&amp; nums) &#123;        int maxHeight&#x3D;0;                int rain&#x3D;0;        for(int i&#x3D;0;i&lt;nums.size();i++)&#123;            maxHeight&#x3D;max(nums[i],maxHeight);        &#125;        for(int i&#x3D;0;i&lt;nums.size();i++)&#123;            int maxleft&#x3D;0,maxright&#x3D;0;            &#x2F;&#x2F;左侧最大高度            for(int j&#x3D;0;j&lt;&#x3D;i;j++)&#123;                maxleft&#x3D;max(maxleft,nums[j]);            &#125;            &#x2F;&#x2F; 右侧最大高度            for(int j&#x3D;i;j&lt;nums.size();j++)&#123;                maxright&#x3D;max(maxright,nums[j]);            &#125;            &#x2F;&#x2F;当前位置可接高度min(Maxleft,Maxright),取决于左右最大高度低值            rain+&#x3D;min(maxright, maxleft)-nums[i];;        &#125;        return rain;    &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>超时了！！！×&amp;%￥#@……。</p><p>果然日常接雨水啊！！！！！</p></blockquote><h3 id="DP法"><a href="#DP法" class="headerlink" title="DP法"></a>DP法</h3><blockquote><p>看看别人的，需要从两头重新遍历一遍求出左右两侧的最大高度，这里是有很多重复计算的，很明显最大高度是可以记忆化的，用两个数组分别存每个位置的左右最大高度，</p><p>int[][] dp &#x3D; new int [n] [2],其中，dp [i] [0] 表示下标i的柱子左边的最大值，dp[i] [1] 表示下标i的柱子右边的最大值。</p><p>类比这题</p><ul><li><a href="https://tianwen42.top/posts/ea37.html">807.城市天际线</a></li></ul></blockquote><p>左右高度数组如下图所示</p><p><img src="https://qiniu.tianwen42.top/picgo/rain0421.jpg" alt="img"></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Solution &#123;public:int trap(vector&lt;int&gt;&amp; height) &#123;int n &#x3D; height.size();&#x2F;&#x2F; left[i]表示i左边的最大值，right[i]表示i右边的最大值vector&lt;int&gt; left(n), right(n);for (int i &#x3D; 1; i &lt; n; i++) &#123;left[i] &#x3D; max(left[i - 1], height[i - 1]);&#125;for (int i &#x3D; n - 2; i &gt;&#x3D; 0; i--) &#123;right[i] &#x3D; max(right[i + 1], height[i + 1]);&#125;int water &#x3D; 0;for (int i &#x3D; 0; i &lt; n; i++) &#123;int level &#x3D; min(left[i], right[i]);water +&#x3D; max(0, level - height[i]);&#125;return water;&#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
            <tag> 接雨水 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣2022-04-10-2</title>
      <link href="/posts/7bb.html"/>
      <url>/posts/7bb.html</url>
      
        <content type="html"><![CDATA[<h2 id="题目852-山脉数组的峰顶索引"><a href="#题目852-山脉数组的峰顶索引" class="headerlink" title="题目852.山脉数组的峰顶索引"></a>题目852.山脉数组的峰顶索引</h2><p>难度：简单</p><p><strong>山脉数组</strong><code>arr</code></p><ul><li>arr.length &gt;&#x3D; 3</li><li>存在 i（0 &lt; i &lt; arr.length - 1）使得：  <ul>      <li>arr[0] < arr[1] < ... arr[i-1] < arr[i] </li>      <li>arr[i] > arr[i+1] > ... > arr[arr.length - 1]</li>  </ul></li></ul><p>给你由整数组成的山脉数组 arr ，返回任何满足 arr[0] &lt; arr[1] &lt; … arr[i - 1] &lt; arr[i] &gt; arr[i + 1] &gt; … &gt; arr[arr.length - 1] 的下标 i 。</p><p><strong>示例 1：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：arr &#x3D; [0,1,0]输出：1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>示例 2：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：arr &#x3D; [0,2,1,0]输出：1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>示例 3：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：arr &#x3D; [0,10,5,2]输出：1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>示例 4：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：arr &#x3D; [3,4,5,1]输出：2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>示例 5：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：arr &#x3D; [24,69,100,99,79,78,67,36,26,19]输出：2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>提示：</strong></p><ul><li>3 &lt;&#x3D; arr.length &lt;&#x3D; 10<sup>4</sup></li><li>0 &lt;&#x3D; arr[i] &lt;&#x3D; 10<sup>6</sup></li><li>题目数据保证 arr 是一个山脉数组</li></ul><p><strong>进阶：</strong>很容易想到时间复杂度 O(n) 的解决方案，你可以设计一个 O(log(n)) 的解决方案吗？</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/peak-index-in-a-mountain-array/">https://leetcode-cn.com/problems/peak-index-in-a-mountain-array/</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><blockquote><ol><li>直接暴力法arr[i]&gt;arr[i-1]&amp;&amp;arr[i]&gt;arr[i+1]</li><li>二分法</li></ol><p>支持暴力法和二分法，显然二分法更快</p></blockquote><h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;暴力法class Solution &#123;public:    int peakIndexInMountainArray(vector&lt;int&gt;&amp; arr) &#123;        if(arr[0]&gt;arr[1])&#123;            return 0;        &#125;        for(int i&#x3D;1;i&lt;arr.size()-1;i++)&#123;            if(arr[i]&gt;arr[i-1]&amp;&amp;arr[i]&gt;arr[i+1])&#123;                return i;            &#125;         &#125;        return arr.size()-1;    &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Solution &#123;public:    int peakIndexInMountainArray(vector&lt;int&gt;&amp; arr) &#123;        &#x2F;&#x2F; if(arr[0]&gt;arr[1])&#123;return 0;&#125;        int left&#x3D;0,right&#x3D;arr.size()-1,mid&#x3D;left+(right-left)&#x2F;2;        while(left!&#x3D;right)&#123;            if(arr[left]&lt;arr[mid])&#123;                right&#x3D;mid;            &#125;else&#123;                left&#x3D;mid+1;            &#125;            mid&#x3D;left+(right-left)&#x2F;2;        &#125;        return left;    &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣2022-04-10</title>
      <link href="/posts/b877.html"/>
      <url>/posts/b877.html</url>
      
        <content type="html"><![CDATA[<h2 id="题目374-猜数字大小"><a href="#题目374-猜数字大小" class="headerlink" title="题目374.猜数字大小"></a>题目374.猜数字大小</h2><p>难度：简单</p><p>猜数字游戏的规则如下：</p><ul><li>每轮游戏，我都会从 <strong>1</strong> 到 <em><strong>n</strong></em> 随机选择一个数字。 请你猜选出的是哪个数字。</li><li>如果你猜错了，我会告诉你，你猜测的数字比我选出的数字是大了还是小了。</li></ul><p>你可以通过调用一个预先定义好的接口 int guess(int num) 来获取猜测结果，返回值一共有 3 种可能的情况（-1，1 或 0）：</p><ul><li>-1：我选出的数字比你猜的数字小 pick &lt; num</li><li>1：我选出的数字比你猜的数字大 pick &gt; num</li><li>0：我选出的数字和你猜的数字一样。恭喜！你猜对了！pick &#x3D;&#x3D; num</li></ul><p>返回我选出的数字。</p><p><strong>示例 1：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：n &#x3D; 10, pick &#x3D; 6输出：6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>示例 2：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：n &#x3D; 1, pick &#x3D; 1输出：1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>示例 3：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：n &#x3D; 2, pick &#x3D; 1输出：1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>示例 4：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：n &#x3D; 2, pick &#x3D; 2输出：2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>提示：</strong></p><ul><li>1 &lt;&#x3D; n &lt;&#x3D; 2<sup>31</sup> - 1</li><li>1 &lt;&#x3D; pick &lt;&#x3D; n</li></ul><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/guess-number-higher-or-lower/">https://leetcode-cn.com/problems/guess-number-higher-or-lower/</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><blockquote><p><strong>二分核心</strong>，精髓，这样写防止越界，mid &#x3D; left + ((right - left) &#x2F; 2);</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">!=</span>r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> l <span class="token operator">+</span><span class="token punctuation">(</span>r <span class="token operator">-</span> l<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">guess</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> l <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> r <span class="token operator">=</span> mid<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token keyword">extends</span> <span class="token class-name">GuessGame</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">guessNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> r <span class="token operator">=</span> n<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">!=</span>r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> l <span class="token operator">+</span><span class="token punctuation">(</span>r <span class="token operator">-</span> l<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">guess</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> l <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> r <span class="token operator">=</span> mid<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> l<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
            <tag> 二分查找 </tag>
            
            <tag> 核心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣2022-04-07</title>
      <link href="/posts/ea37.html"/>
      <url>/posts/ea37.html</url>
      
        <content type="html"><![CDATA[<h2 id="题目2229-Check-if-an-Array-Is-Consecutive"><a href="#题目2229-Check-if-an-Array-Is-Consecutive" class="headerlink" title="题目2229.Check if an Array Is Consecutive"></a>题目2229.Check if an Array Is Consecutive</h2><p>难度：简单</p><p>Given an integer array nums, return true <em>if </em>nums<em> is <strong>consecutive</strong>, otherwise return </em>false<em>.</em></p><p>An array is **consecutive **if it contains every number in the range [x, x + n - 1] (<strong>inclusive</strong>), where x is the minimum number in the array and n is the length of the array.</p><p><strong>Example 1:</strong></p><pre class="line-numbers language-none"><code class="language-none">Input: nums &#x3D; [1,3,4,2]Output: trueExplanation:The minimum value is 1 and the length of nums is 4.All of the values in the range [x, x + n - 1] &#x3D; [1, 1 + 4 - 1] &#x3D; [1, 4] &#x3D; (1, 2, 3, 4) occur in nums.Therefore, nums is consecutive.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Example 2:</strong></p><pre class="line-numbers language-none"><code class="language-none">Input: nums &#x3D; [1,3]Output: falseExplanation:The minimum value is 1 and the length of nums is 2.The value 2 in the range [x, x + n - 1] &#x3D; [1, 1 + 2 - 1], &#x3D; [1, 2] &#x3D; (1, 2) does not occur in nums.Therefore, nums is not consecutive.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Example 3:</strong></p><pre class="line-numbers language-none"><code class="language-none">Input: nums &#x3D; [3,5,4]Output: trueExplanation:The minimum value is 3 and the length of nums is 3.All of the values in the range [x, x + n - 1] &#x3D; [3, 3 + 3 - 1] &#x3D; [3, 5] &#x3D; (3, 4, 5) occur in nums.Therefore, nums is consecutive.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Constraints:</strong></p><ul><li>1 &lt;&#x3D; nums.length &lt;&#x3D; 10<sup>5</sup></li><li>0 &lt;&#x3D; nums[i] &lt;&#x3D; 10<sup>5</sup></li></ul><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/check-if-an-array-is-consecutive/">https://leetcode-cn.com/problems/check-if-an-array-is-consecutive/</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><blockquote><p>排序，新建a，判断是否在nums中<br>扩展思考: a所有元素（可能重复&#x2F;不重复）是否在b中</p></blockquote><h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Solution&#123;public:    bool isConsecutive(vector&lt;int&gt; &amp;nums)    &#123;        &#x2F;&#x2F; if(nums &#x3D;&#x3D; nullptr) return;        int n &#x3D; nums.size();        &#x2F;&#x2F; size        sort(nums.begin(), nums.end());        int min &#x3D; nums[0];        &#x2F;&#x2F;最小值        vector&lt;int&gt; vec;        for (int i &#x3D; min; i &lt;&#x3D; n + min - 1; i++)        &#123;            vec.push_back(i);        &#125;        int i &#x3D; 0;        while (i &lt; vec.size())        &#123;            if (vec[i] &#x3D;&#x3D; nums[i])                i++;            else                return false;        &#125;        return true;    &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣2022-04-06</title>
      <link href="/posts/ea37.html"/>
      <url>/posts/ea37.html</url>
      
        <content type="html"><![CDATA[<h2 id="题目807-保持城市天际线"><a href="#题目807-保持城市天际线" class="headerlink" title="题目807.保持城市天际线"></a>题目807.保持城市天际线</h2><p>难度：中等</p><p>给你一座由 n x n 个街区组成的城市，每个街区都包含一座立方体建筑。给你一个下标从 <strong>0</strong> 开始的 n x n 整数矩阵 grid ，其中 grid[r][c] 表示坐落于 r 行 c 列的建筑物的 <strong>高度</strong> 。</p><p>城市的 <strong>天际线</strong> 是从远处观察城市时，所有建筑物形成的外部轮廓。从东、南、西、北四个主要方向观测到的 <strong>天际线</strong> 可能不同。</p><p>我们被允许为 <strong>任意数量的建筑物 <strong>的高度增加</strong> 任意增量（不同建筑物的增量可能不同）</strong> 。 高度为 0 的建筑物的高度也可以增加。然而，增加的建筑物高度 <strong>不能影响</strong> 从任何主要方向观察城市得到的 <strong>天际线</strong> 。</p><p>在 <strong>不改变</strong> 从任何主要方向观测到的城市 <strong>天际线</strong> 的前提下，返回建筑物可以增加的 <strong>最大高度增量总和</strong> 。</p><p><strong>示例 1：</strong></p><img style="width: 700px; height: 603px;" src="https://qiniu.tianwen42.top/picgo/807-ex1.png" alt=""><pre class="line-numbers language-none"><code class="language-none">输入：grid &#x3D; [[3,0,8,4],[2,4,5,7],[9,2,6,3],[0,3,1,0]]输出：35解释：建筑物的高度如上图中心所示。用红色绘制从不同方向观看得到的天际线。在不影响天际线的情况下，增加建筑物的高度：gridNew &#x3D; [ [8, 4, 8, 7],            [7, 4, 7, 7],            [9, 4, 8, 7],            [3, 3, 3, 3] ]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>示例 2：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：grid &#x3D; [[0,0,0],[0,0,0],[0,0,0]]输出：0解释：增加任何建筑物的高度都会导致天际线的变化。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>提示：</strong></p><ul><li>n &#x3D;&#x3D; grid.length</li><li>n &#x3D;&#x3D; grid[r].length</li><li>2 &lt;&#x3D; n &lt;&#x3D; 50</li><li>0 &lt;&#x3D; grid[r][c] &lt;&#x3D; 100</li></ul><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/max-increase-to-keep-city-skyline/">https://leetcode-cn.com/problems/max-increase-to-keep-city-skyline/</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><blockquote><p>正视（先列中最大）和侧视（先行中最大）的最大值，再求n*n根据两个组的最小数赋值给[i,j]，即为当前的楼最低点，算与真实的差值即为加高层数</p></blockquote><h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Solution &#123;public:    int maxIncreaseKeepingSkyline(vector&lt;vector&lt;int&gt;&gt;&amp; grid) &#123;        int n&#x3D;grid.size();        &#x2F;&#x2F;侧视图天际线最低        vector&lt;int&gt; row_max_min(n);        &#x2F;&#x2F;正视图天际线最低        vector&lt;int&gt; col_max_min(n);        for(int i&#x3D;0;i&lt;n;i++)&#123;            int tmp&#x3D;*max_element(grid[i].begin(),grid[i].end());            row_max_min[i]&#x3D;tmp;        &#125;        for(int i &#x3D; 0; i &lt; n; i++)        &#123;            for(int j &#x3D; 0; j &lt; n; j++)            &#123;                col_max_min[j] &#x3D; max(col_max_min[j], grid[i][j]);            &#125;        &#125;        int res &#x3D; 0;        for(int i &#x3D; 0; i &lt; n; i++)        &#123;            for(int j &#x3D; 0; j &lt; n; j++)            &#123;                res +&#x3D; min(col_max_min[j],row_max_min[i])-grid[i][j];            &#125;        &#125;        return res;    &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣2022-03-27</title>
      <link href="/posts/fe37.html"/>
      <url>/posts/fe37.html</url>
      
        <content type="html"><![CDATA[<h2 id="题目704-二分查找"><a href="#题目704-二分查找" class="headerlink" title="题目704.二分查找"></a>题目704.二分查找</h2><p>难度：简单</p><p>给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。</p><br>**示例 1:**<pre class="line-numbers language-none"><code class="language-none">输入: nums &#x3D; [-1,0,3,5,9,12], target &#x3D; 9输出: 4解释: 9 出现在 nums 中并且下标为 4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>示例 2:</strong></p><pre class="line-numbers language-none"><code class="language-none">输入: nums &#x3D; [-1,0,3,5,9,12], target &#x3D; 2输出: -1解释: 2 不存在 nums 中因此返回 -1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>提示：</strong></p><ol><li>你可以假设 nums 中的所有元素是不重复的。</li><li>n 将在 [1, 10000]之间。</li><li>nums 的每个元素都将在 [-9999, 9999]之间。</li></ol><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/binary-search/">https://leetcode-cn.com/problems/binary-search/</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><blockquote><p>两种方法，注意边界条件和更新条件</p></blockquote><h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Solution &#123;public:    &#x2F;&#x2F; 定义target在左闭右开的区间里，即：[left, right]    int search(vector&lt;int&gt; &amp;nums, int target) &#123;        int head &#x3D; 0;        int rear &#x3D; nums.size() - 1;        int mid;        while (head &lt;&#x3D; rear) &#123;            mid &#x3D; (head + rear) &#x2F; 2;            if (nums[mid] &#x3D;&#x3D; target)                return mid;            else if (nums[mid] &lt; target) &#123;                head &#x3D; mid + 1; &#x2F;&#x2F; 注意            &#125; else if (nums[mid] &gt; target) &#123;                rear &#x3D; mid - 1;            &#125;        &#125;        return 0;    &#125;    &#x2F;&#x2F; 定义target在左闭右开的区间里，即：[left, right)    int search2(vector&lt;int&gt;&amp; nums, int target) &#123;        int left &#x3D; 0;        int right &#x3D; nums.size(); &#x2F;&#x2F; 定义target在左闭右开的区间里，即：[left, right)        while (left &lt; right) &#123; &#x2F;&#x2F; 因为left &#x3D;&#x3D; right的时候，在[left, right)是无效的空间，所以使用 &lt;            int middle &#x3D; left + ((right - left) &gt;&gt; 1);            if (nums[middle] &gt; target) &#123;                right &#x3D; middle; &#x2F;&#x2F; target 在左区间，在[left, middle)中            &#125; else if (nums[middle] &lt; target) &#123;                left &#x3D; middle + 1; &#x2F;&#x2F; target 在右区间，在[middle + 1, right)中            &#125; else &#123; &#x2F;&#x2F; nums[middle] &#x3D;&#x3D; target                return middle; &#x2F;&#x2F; 数组中找到目标值，直接返回下标            &#125;        &#125;        &#x2F;&#x2F; 未找到目标值        return -1;    &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣2022-03-25</title>
      <link href="/posts/3fb6.html"/>
      <url>/posts/3fb6.html</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><ol start="217"><li>存在重复元素</li></ol><p>难度：简单</p><p><code>nums</code></p><p><strong>至少两次</strong></p><p><code>true</code></p><p><code>false</code></p><p><strong>示例 1：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：nums &#x3D; [1,2,3,1]输出：true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>示例 2：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：nums &#x3D; [1,2,3,4]输出：false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>示例 3：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：nums &#x3D; [1,1,1,3,3,4,3,2,4,2]输出：true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>提示：</strong></p><ul><li>1 &lt;&#x3D; nums.length &lt;&#x3D; 10<sup>5</sup></li><li>-10<sup>9</sup> &lt;&#x3D; nums[i] &lt;&#x3D; 10<sup>9</sup></li></ul><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/contains-duplicate/">https://leetcode-cn.com/problems/contains-duplicate/</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><blockquote><p>排序，有相同的肯定近邻</p></blockquote><h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Solution &#123;public:    bool containsDuplicate(vector&lt;int&gt;&amp; nums) &#123;        sort(nums.begin(), nums.end());        while(nums.size()&gt;1&amp;&amp;(nums[nums.size()-1]!&#x3D;nums[nums.size()-2]))&#123;            &#x2F;&#x2F; 判断栈顶和倒二是否相等，注意边界条件            nums.pop_back();        &#125;        &#x2F;&#x2F; for(int i&#x3D;0; i&lt;nums.size();i++)&#123;        &#x2F;&#x2F;     cout &lt;&lt; nums[i] &lt;&lt; &quot; &quot;;        &#x2F;&#x2F; &#125;        if(nums.size()&#x3D;&#x3D;1) return false;else return true;    &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021归档</title>
      <link href="/posts/b2d9.html"/>
      <url>/posts/b2d9.html</url>
      
        <content type="html"><![CDATA[<p><img src="http://qiniu.tianwen42.top/picgo/IMG_20201229_200725.jpg" alt="IMG_20201229_200725"></p><p><img src="http://qiniu.tianwen42.top/picgo/IMG_20210429_191925.jpg" alt="IMG_20210429_191925"></p><p><img src="http://qiniu.tianwen42.top/picgo/IMG_20211017_113126.jpg" alt="IMG_20211017_113126"></p><p><img src="http://qiniu.tianwen42.top/picgo/0009.jpg" alt="0009"><img src="http://qiniu.tianwen42.top/picgo/%5BThumb%5D640326600415-3ec0b87c-0587-317d-862b-68d4c1744c4f.jpg" alt="[Thumb]640326600415-3ec0b87c-0587-317d-862b-68d4c1744c4f"  /></p><img src="http://qiniu.tianwen42.top/picgo/mmexport1641051034837.jpg" alt="mmexport1641051034837" style="zoom:50%;" /><p><img src="http://qiniu.tianwen42.top/picgo/mmexport1642862346561.jpg" alt="mmexport1642862346561"><img src="http://qiniu.tianwen42.top/picgo/mmexport1640590404629.jpg" alt="mmexport1640590404629"><img src="http://qiniu.tianwen42.top/picgo/IMG_20220125_130126.jpg" alt="IMG_20220125_130126"></p><p>分割线，听首歌吧</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=530 height=86 src="//music.163.com/outchain/player?type=2&id=26494698&auto=0&height=66"></iframe>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 归档 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣2022-03-03</title>
      <link href="/posts/5d37.html"/>
      <url>/posts/5d37.html</url>
      
        <content type="html"><![CDATA[<h2 id="题目343-整数拆分"><a href="#题目343-整数拆分" class="headerlink" title="题目343. 整数拆分"></a>题目343. 整数拆分</h2><p>难度：中等</p><p>给定一个正整数 n ，将其拆分为 k 个 <strong>正整数</strong> 的和（ k &gt;&#x3D; 2 ），并使这些整数的乘积最大化。</p><p>返回 <em>你可以获得的最大乘积</em> 。</p><p><strong>示例 1:</strong></p><pre class="line-numbers language-none"><code class="language-none">输入: n &#x3D; 2输出: 1解释: 2 &#x3D; 1 + 1, 1 × 1 &#x3D; 1。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>示例 2:</strong></p><pre class="line-numbers language-none"><code class="language-none">输入: n &#x3D; 10输出: 36解释: 10 &#x3D; 3 + 3 + 4, 3 × 3 × 4 &#x3D; 36。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>提示:</strong></p><ul><li>2 &lt;&#x3D; n &lt;&#x3D; 58</li></ul><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/integer-break/">https://leetcode-cn.com/problems/integer-break/</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><blockquote><p>dp题目</p><p>dp[i] &#x3D; max(dp[i], max((i - j) * j, dp[i - j] * j));</p><p>dp[i] 是依靠 dp[i - j]的状态，所以遍历i一定是从前向后遍历，先有dp[i - j]再有dp[i]</p></blockquote><h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;动态规划class Solution &#123;public:    int integerBreak(int n) &#123;        if(n&#x3D;&#x3D;2)            return 1;        vector&lt;int&gt; dp(n+1,0);        dp[2] &#x3D; 1;        for(int i&#x3D;3;i&lt;&#x3D;n;++i)&#123;            for(int j&#x3D;1;j&lt;i;++j)                dp[i] &#x3D; max(dp[i],max(dp[i-j]*j,(i-j)*j));        &#125;        return dp[n];    &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;贪心算法&#x2F;&#x2F;时间复杂度O(n)&#x2F;&#x2F;空间复杂度O(1)class Solution &#123;public:    int integerBreak(int n) &#123;        if (n &#x3D;&#x3D; 2) return 1;        if (n &#x3D;&#x3D; 3) return 2;        if (n &#x3D;&#x3D; 4) return 4;        int result &#x3D; 1;        while (n &gt; 4) &#123;            result *&#x3D; 3;            n -&#x3D; 3;        &#125;        result *&#x3D; n;        return result;    &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
            <tag> dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣2022-02-28</title>
      <link href="/posts/676.html"/>
      <url>/posts/676.html</url>
      
        <content type="html"><![CDATA[<h2 id="题目7-整数反转"><a href="#题目7-整数反转" class="headerlink" title="题目7.整数反转"></a>题目7.整数反转</h2><p>难度：中等</p><p>给你一个 32 位的有符号整数 x ，返回将 x 中的数字部分反转后的结果。</p><p>如果反转后整数超过 32 位的有符号整数的范围 [−2<sup>31</sup>,  2<sup>31 </sup>− 1] ，就返回 0。</p><p><strong>假设环境不允许存储 64 位整数（有符号或无符号）。</strong></p><p><strong>示例 1：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：x &#x3D; 123输出：321<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>示例 2：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：x &#x3D; -123输出：-321<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>示例 3：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：x &#x3D; 120输出：21<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>示例 4：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：x &#x3D; 0输出：0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>提示：</strong></p><ul><li>-2<sup>31</sup> &lt;&#x3D; x &lt;&#x3D; 2<sup>31</sup> - 1</li></ul><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/reverse-integer/">https://leetcode-cn.com/problems/reverse-integer/</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><blockquote><p>整数翻转，123 –&gt; 3 * 10+2 –&gt; 32 * 10+1 –&gt;321</p><p>想到另一个整数拼接的思路 123 –&gt; 123 * 10+1 –&gt; 1231 * 10 +2 –&gt; 12312 * 10 +3 –&gt;123123</p><p>再一个就是整数对称的思路 123 –&gt; 123 * 10+3 –&gt; 1231 * 10 +2 –&gt; 12312 * 10 +1 –&gt;123321</p></blockquote><h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;123  321&#x2F;&#x2F;-123 -321&#x2F;&#x2F;0    0#include &lt;iostream&gt;class Solution &#123;public:    int reverse2(int x) &#123;        int ans &#x3D; 0;        while(x !&#x3D; 0)        &#123;            if(ans &gt; INT_MAX || ans &lt; INT_MIN)                return 0;            ans &#x3D; ans * 10 + x % 10;            x &#x2F;&#x3D; 10;        &#125;        return ans;    &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;数字对称&#x2F;&#x2F;123 123321&#x2F;&#x2F;-8 -88&#x2F;&#x2F;-10 -1001int symmetryReverse(int x) &#123;        using namespace std;        int ans &#x3D; x;        while(x !&#x3D; 0)        &#123;            if(ans &gt; INT_MAX || ans &lt; INT_MIN)                return 0;            ans &#x3D; ans * 10 + x % 10;            &#x2F;&#x2F;cout&lt;&lt;ans&lt;&lt;endl;            x &#x2F;&#x3D; 10;        &#125;        return ans;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;数字重复&#x2F;&#x2F;105 105105&#x2F;&#x2F;10  1010&#x2F;&#x2F;1   11int digitalRepeated(int x) &#123;        using namespace std;                int ans &#x3D; x;        int num &#x3D; 1 + log10(x);  &#x2F;&#x2F;位数        for (int i &#x3D; num - 1; i &gt;&#x3D; 0; i--) &#123;            if (ans &#x3D;&#x3D; 0 || ans &gt; INT_MAX || ans &lt; INT_MIN)      &#x2F;&#x2F;用for要注意0或者溢出                return 0;            int maxdigit &#x3D; (int) pow(10, i);            &#x2F;&#x2F; cout&lt;&lt;ans&lt;&lt;endl;            ans &#x3D; ans * 10 + (x &#x2F; maxdigit) % 10;            x %&#x3D; maxdigit;        &#125;        return ans;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>由这一题抽象出对数字的常规算法，详情见<a href="">数字切片</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
            <tag> 数字切片 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣2022-02-27</title>
      <link href="/posts/236.html"/>
      <url>/posts/236.html</url>
      
        <content type="html"><![CDATA[<h2 id="题目1221-分割平衡字符串"><a href="#题目1221-分割平衡字符串" class="headerlink" title="题目1221.分割平衡字符串"></a>题目1221.分割平衡字符串</h2><p>难度：简单</p><p>在一个 <strong>平衡字符串</strong> 中，’L’ 和 ‘R’ 字符的数量是相同的。</p><p>给你一个平衡字符串 s，请你将它分割成尽可能多的平衡字符串。</p><p><strong>注意：</strong>分割得到的每个字符串都必须是平衡字符串，且分割得到的平衡字符串是原平衡字符串的连续子串。</p><p>返回可以通过分割得到的平衡字符串的 <strong>最大数量</strong> <strong>。</strong></p><p><strong>示例 1：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：s &#x3D; &quot;RLRRLLRLRL&quot;输出：4解释：s 可以分割为 &quot;RL&quot;、&quot;RRLL&quot;、&quot;RL&quot;、&quot;RL&quot; ，每个子字符串中都包含相同数量的 &#39;L&#39; 和 &#39;R&#39; 。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>示例 2：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：s &#x3D; &quot;RLLLLRRRLR&quot;输出：3解释：s 可以分割为 &quot;RL&quot;、&quot;LLLRRR&quot;、&quot;LR&quot; ，每个子字符串中都包含相同数量的 &#39;L&#39; 和 &#39;R&#39; 。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>示例 3：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：s &#x3D; &quot;LLLLRRRR&quot;输出：1解释：s 只能保持原样 &quot;LLLLRRRR&quot;.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>示例 4：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：s &#x3D; &quot;RLRRRLLRLL&quot;输出：2解释：s 可以分割为 &quot;RL&quot;、&quot;RRRLLRLL&quot; ，每个子字符串中都包含相同数量的 &#39;L&#39; 和 &#39;R&#39; 。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>提示：</strong></p><ul><li>1 &lt;&#x3D; s.length &lt;&#x3D; 1000</li><li>s[i] &#x3D; ‘L’ 或 ‘R’</li><li>s 是一个 <strong>平衡</strong> 字符串</li></ul><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/split-a-string-in-balanced-strings/">https://leetcode-cn.com/problems/split-a-string-in-balanced-strings/</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><blockquote><p>上楼梯问题，L下一步R上一步，在平地上num+1</p><p>“括号匹配”问题,主要是栈操作,’R’进栈,’L’出栈,栈空则匹配成功,结果加一</p></blockquote><h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">balancedStringSplit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        s<span class="token operator">=</span><span class="token builtin">list</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>        stack<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        high<span class="token punctuation">,</span>num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span>        <span class="token keyword">while</span> s<span class="token punctuation">:</span>            <span class="token keyword">if</span> s<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token string">'R'</span><span class="token punctuation">:</span>                high<span class="token operator">-=</span><span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                high<span class="token operator">+=</span><span class="token number">1</span>            <span class="token keyword">if</span> high<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                num<span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">return</span> num<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> leetcode </tag>
            
            <tag> 字符串 </tag>
            
            <tag> 贪心算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣 2022-02-26</title>
      <link href="/posts/9ea3.html"/>
      <url>/posts/9ea3.html</url>
      
        <content type="html"><![CDATA[<h2 id="题目917-仅仅反转字母"><a href="#题目917-仅仅反转字母" class="headerlink" title="题目917.仅仅反转字母"></a>题目917.仅仅反转字母</h2><p>难度：简单</p><p>给你一个字符串 s ，根据下述规则反转字符串：</p><ul><li>所有非英文字母保留在原有位置。</li><li>所有英文字母（小写或大写）位置反转。</li></ul><p>返回反转后的 s<em> 。</em></p><p><strong>示例 1：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：s &#x3D; &quot;ab-cd&quot;输出：&quot;dc-ba&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>示例 2：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：s &#x3D; &quot;a-bC-dEf-ghIj&quot;输出：&quot;j-Ih-gfE-dCba&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>示例 3：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：s &#x3D; &quot;Test1ng-Leet&#x3D;code-Q!&quot;输出：&quot;Qedo1ct-eeLg&#x3D;ntse-T!&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>提示</strong></p><ul><li>1 &lt;&#x3D; s.length &lt;&#x3D; 100</li><li>s 仅由 ASCII 值在范围 [33, 122] 的字符组成</li><li>s 不含 ‘&quot;‘ 或 ‘\‘</li></ul><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/reverse-only-letters/">https://leetcode-cn.com/problems/reverse-only-letters/</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><blockquote><p>双指针法遍历</p></blockquote><h2 id=""><a href="#" class="headerlink" title=""></a></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">reverseOnlyLetters</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">str</span><span class="token punctuation">:</span>        s<span class="token operator">=</span><span class="token builtin">list</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>        head<span class="token punctuation">,</span>tail<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>head<span class="token operator">&lt;</span>tail<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> s<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">.</span>isalpha<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">and</span> s<span class="token punctuation">[</span>tail<span class="token punctuation">]</span><span class="token punctuation">.</span>isalpha<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                s<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">,</span>s<span class="token punctuation">[</span>tail<span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">[</span>tail<span class="token punctuation">]</span><span class="token punctuation">,</span>s<span class="token punctuation">[</span>head<span class="token punctuation">]</span>    <span class="token comment">#交换</span>                head<span class="token operator">+=</span><span class="token number">1</span>                tail<span class="token operator">-=</span><span class="token number">1</span>            <span class="token keyword">elif</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">.</span>isalpha<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>tail<span class="token punctuation">]</span><span class="token punctuation">.</span>isalpha<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                tail<span class="token operator">-=</span><span class="token number">1</span>            <span class="token keyword">elif</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">.</span>isalpha<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token boolean">False</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>tail<span class="token punctuation">]</span><span class="token punctuation">.</span>isalpha<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                head<span class="token operator">+=</span><span class="token number">1</span>            <span class="token keyword">elif</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">.</span>isalpha<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token boolean">False</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>tail<span class="token punctuation">]</span><span class="token punctuation">.</span>isalpha<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                head<span class="token operator">+=</span><span class="token number">1</span>                tail<span class="token operator">-=</span><span class="token number">1</span>                <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>力扣 2022-02-25</title>
      <link href="/posts/9fe3.html"/>
      <url>/posts/9fe3.html</url>
      
        <content type="html"><![CDATA[<h2 id="题目509-斐波那契数"><a href="#题目509-斐波那契数" class="headerlink" title="题目509.斐波那契数"></a>题目509.斐波那契数</h2><p>难度：简单</p><p><strong>斐波那契数</strong> （通常用 F(n) 表示）形成的序列称为 <strong>斐波那契数列</strong> 。该数列由 0 和 1 开始，后面的每一项数字都是前面两项数字的和。也就是：</p><pre class="line-numbers language-none"><code class="language-none">F(0) &#x3D; 0，F(1) &#x3D; 1F(n) &#x3D; F(n - 1) + F(n - 2)，其中 n &gt; 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>给定 n ，请计算 F(n) 。</p><p><strong>示例 1：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：n &#x3D; 2输出：1解释：F(2) &#x3D; F(1) + F(0) &#x3D; 1 + 0 &#x3D; 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>示例 2：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：n &#x3D; 3输出：2解释：F(3) &#x3D; F(2) + F(1) &#x3D; 1 + 1 &#x3D; 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>示例 3：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：n &#x3D; 4输出：3解释：F(4) &#x3D; F(3) + F(2) &#x3D; 2 + 1 &#x3D; 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>提示：</strong></p><ul><li>0 &lt;&#x3D; n &lt;&#x3D; 30</li></ul><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/fibonacci-number/">https://leetcode-cn.com/problems/fibonacci-number/</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#递归法</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">fib</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token number">0</span>        <span class="token keyword">elif</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span><span class="token keyword">return</span> self<span class="token punctuation">.</span>fib<span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>self<span class="token punctuation">.</span>fib<span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://cdn.tianwen42.top/picgo/image-20220225133243080.png" alt="image-20220225133243080"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#通项法</span><span class="token keyword">import</span> math<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">fib</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type N: int        :rtype: int        """</span>        sqrt5<span class="token operator">=</span>math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token builtin">round</span><span class="token punctuation">(</span><span class="token builtin">pow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span>sqrt5<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span>N<span class="token punctuation">)</span><span class="token operator">/</span>sqrt5<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 斐波那契数列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣 2022-02-24</title>
      <link href="/posts/a858.html"/>
      <url>/posts/a858.html</url>
      
        <content type="html"><![CDATA[<h2 id="题目13-罗马数字转整数"><a href="#题目13-罗马数字转整数" class="headerlink" title="题目13. 罗马数字转整数"></a>题目13. 罗马数字转整数</h2><p>难度：简单</p><p>罗马数字包含以下七种字符: I， V， X， L，C，D 和 M。</p><pre class="line-numbers language-none"><code class="language-none">字符          数值I             1V             5X             10L             50C             100D             500M             1000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例如， 罗马数字 2 写做 II ，即为两个并列的 1 。12 写做 XII ，即为 X + II 。 27 写做  XXVII, 即为 XX + V + II 。</p><p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：</p><ul><li>I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。</li><li>X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。 </li><li>C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。</li></ul><p>给定一个罗马数字，将其转换成整数。</p><p><strong>示例 1:</strong></p><pre class="line-numbers language-none"><code class="language-none">输入: s &#x3D; &quot;III&quot;输出: 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>示例 2:</strong></p><pre class="line-numbers language-none"><code class="language-none">输入: s &#x3D; &quot;IV&quot;输出: 4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>示例 3:</strong></p><pre class="line-numbers language-none"><code class="language-none">输入: s &#x3D; &quot;IX&quot;输出: 9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>示例 4:</strong></p><pre class="line-numbers language-none"><code class="language-none">输入: s &#x3D; &quot;LVIII&quot;输出: 58解释: L &#x3D; 50, V&#x3D; 5, III &#x3D; 3.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>示例 5:</strong></p><pre class="line-numbers language-none"><code class="language-none">输入: s &#x3D; &quot;MCMXCIV&quot;输出: 1994解释: M &#x3D; 1000, CM &#x3D; 900, XC &#x3D; 90, IV &#x3D; 4.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>提示：</strong></p><ul><li>1 &lt;&#x3D; s.length &lt;&#x3D; 15</li><li>s 仅含字符 (‘I’, ‘V’, ‘X’, ‘L’, ‘C’, ‘D’, ‘M’)</li><li>题目数据保证 s 是一个有效的罗马数字，且表示整数在范围 [1, 3999] 内</li><li>题目所给测试用例皆符合罗马数字书写规则，不会出现跨位等情况。</li><li>IL 和 IM 这样的例子并不符合题目要求，49 应该写作 XLIX，999 应该写作 CMXCIX 。</li><li>关于罗马数字的详尽书写规则，可以参考 <a href="https://b2b.partcommunity.com/community/knowledge/zh_CN/detail/10753/%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97#knowledge_article">罗马数字 - Mathematics </a>。</li></ul><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/roman-to-integer/">https://leetcode-cn.com/problems/roman-to-integer/</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><blockquote><p>替换双位罗马字符，再映射</p></blockquote><h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">romanToInt</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        s <span class="token operator">=</span> s<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'CM'</span><span class="token punctuation">,</span> <span class="token string">'Q'</span><span class="token punctuation">)</span>        s <span class="token operator">=</span> s<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'CD'</span><span class="token punctuation">,</span> <span class="token string">'W'</span><span class="token punctuation">)</span>        s <span class="token operator">=</span> s<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'XC'</span><span class="token punctuation">,</span> <span class="token string">'E'</span><span class="token punctuation">)</span>        s <span class="token operator">=</span> s<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'XL'</span><span class="token punctuation">,</span> <span class="token string">'R'</span><span class="token punctuation">)</span>        s <span class="token operator">=</span> s<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'IX'</span><span class="token punctuation">,</span> <span class="token string">'T'</span><span class="token punctuation">)</span>        s <span class="token operator">=</span> s<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'IV'</span><span class="token punctuation">,</span> <span class="token string">'Y'</span><span class="token punctuation">)</span>        keys <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">'Q'</span> <span class="token punctuation">:</span> <span class="token number">900</span><span class="token punctuation">,</span>            <span class="token string">'W'</span> <span class="token punctuation">:</span> <span class="token number">400</span><span class="token punctuation">,</span>            <span class="token string">'E'</span> <span class="token punctuation">:</span> <span class="token number">90</span><span class="token punctuation">,</span>            <span class="token string">'R'</span> <span class="token punctuation">:</span> <span class="token number">40</span><span class="token punctuation">,</span>            <span class="token string">'T'</span> <span class="token punctuation">:</span> <span class="token number">9</span><span class="token punctuation">,</span>            <span class="token string">'Y'</span> <span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span>            <span class="token string">'M'</span> <span class="token punctuation">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>            <span class="token string">'D'</span> <span class="token punctuation">:</span> <span class="token number">500</span><span class="token punctuation">,</span>            <span class="token string">'C'</span> <span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span>            <span class="token string">'L'</span> <span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span>            <span class="token string">'X'</span> <span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>            <span class="token string">'V'</span> <span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>            <span class="token string">'I'</span> <span class="token punctuation">:</span> <span class="token number">1</span>        <span class="token punctuation">&#125;</span>        ans <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> ch <span class="token keyword">in</span> s<span class="token punctuation">:</span>            ans <span class="token operator">+=</span> keys<span class="token punctuation">[</span>ch<span class="token punctuation">]</span>                <span class="token keyword">return</span> ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解C指针</title>
      <link href="/posts/e801.html"/>
      <url>/posts/e801.html</url>
      
        <content type="html"><![CDATA[<h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><blockquote><ol><li>普通指针</li><li><a href="####%E6%8C%87%E5%90%91const%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%8C%87%E9%92%88">指向 const 对象的指针</a></li><li><a href="####%E6%8C%87%E5%90%91%E9%9D%9Econst%E5%AF%B9%E8%B1%A1%E7%9A%84const%E6%8C%87%E9%92%88">指向 非const 对象的 const 指针</a></li><li><a href="####%E6%8C%87%E5%90%91const%E5%AF%B9%E8%B1%A1%E7%9A%84const%E6%8C%87%E9%92%88">指向 const 对象的 const 指针</a></li></ol></blockquote><p>首先区分引用变量与指针的区别</p><blockquote><p>当创建一个变量时，通过变量名修改和指针修改的安全性不同</p></blockquote><p><img src="http://qiniu.tianwen42.top/picgo/image-20220303143051994.png" alt="image-20220303143051994"></p><h3 id="内存泄漏"><a href="#内存泄漏" class="headerlink" title="内存泄漏"></a>内存泄漏</h3><p>tips</p><ul><li><p>创建内存后一定记得free, malloc,free成对出现</p></li><li><p>指针创建后记得要初始化</p></li></ul><p>初始化静态或全局变量不能调用函数，如</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">static int *pi&#x3D;malloc(sizeof(int));  &#x2F;&#x2F;编译错误<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>改为</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">static int *pi;pi &#x3D; malloc(sizeof(int));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>做题小Tips</title>
      <link href="/posts/c8f3.html"/>
      <url>/posts/c8f3.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>假定给定一串数字,基本的算法实现</p></blockquote><ul><li>int n&#x3D;105;</li></ul><h3 id="x2F-x2F-取位数"><a href="#x2F-x2F-取位数" class="headerlink" title="&#x2F;&#x2F;取位数"></a>&#x2F;&#x2F;取位数</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Solution &#123;public:    int counting1(int x) &#123;        &#x2F;&#x2F;计位数        using namespace std;        cout &lt;&lt; x &lt;&lt; endl;        int n &#x3D; 0;        while (x) &#123;            x &#x2F;&#x3D; 10;            n++;        &#125;        return n;    &#125;    int counting2(int x) &#123;        &#x2F;&#x2F;记位数        using namespace std;        cout &lt;&lt; x &lt;&lt; endl;        int n &#x3D; 0;        while (x) &#123;            if (x &lt; 10) &#123;                n++;            &#125; else &#123;                n +&#x3D; 2;            &#125;            x &#x2F;&#x3D; 100;        &#125;        return n;    &#125;    int counting3(int x) &#123;        &#x2F;&#x2F;记位数        using namespace std;        cout &lt;&lt; x &lt;&lt; endl;        int n &#x3D; 1 + (int)log10(x);;        return n;    &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="x2F-x2F-数字按逆序遍历"><a href="#x2F-x2F-数字按逆序遍历" class="headerlink" title="&#x2F;&#x2F;数字按逆序遍历"></a>&#x2F;&#x2F;数字按逆序遍历</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Solution &#123;public:    int digitalSection(int x) &#123;        &#x2F;&#x2F;数字按逆序遍历（栈）        using namespace std;        cout &lt;&lt; x &lt;&lt; endl;        while (x !&#x3D; 0) &#123;            cout &lt;&lt; &quot;x%10取最末位: &quot; &lt;&lt; x % 10 &lt;&lt; &quot;  &quot;;            cout &lt;&lt; &quot;x&#x2F;10去除末位: &quot; &lt;&lt; x &#x2F; 10 &lt;&lt; endl;            x &#x2F;&#x3D; 10;        &#125;        return 0;    &#125;&#125;;&#x2F;&#x2F; 105&#x2F;&#x2F; x%10取最末位: 5  x&#x2F;10去除末位: 10&#x2F;&#x2F; x%10取最末位: 0  x&#x2F;10去除末位: 1&#x2F;&#x2F; x%10取最末位: 1  x&#x2F;10去除末位: 0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="x2F-x2F-数字按顺序遍历"><a href="#x2F-x2F-数字按顺序遍历" class="headerlink" title="&#x2F;&#x2F;数字按顺序遍历"></a>&#x2F;&#x2F;数字按顺序遍历</h3><pre class="line-numbers language-none"><code class="language-none"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>matlab实战</title>
      <link href="/posts/6d4ea018.html"/>
      <url>/posts/6d4ea018.html</url>
      
        <content type="html"><![CDATA[<p align="center"><img src="https://cdn.tianwen42.top/img/picgo/matlab.jpg" alt="Meting" height="200"></p><p>matlab实战，工程，数值分析，建模</p><span id="more"></span><h1 id="核心类型"><a href="#核心类型" class="headerlink" title="核心类型"></a>核心类型</h1><h2 id="目标规划类"><a href="#目标规划类" class="headerlink" title="目标规划类"></a>目标规划类</h2><h3 id="线性规划"><a href="#线性规划" class="headerlink" title="线性规划"></a>线性规划</h3><p><img src="http://cdn.tianwen42.top/img/picgo/20210828105037.png" alt="image-20210828105036841"></p><p><img src="http://cdn.tianwen42.top/img/picgo/20210829150901.png" alt="image-20210829150901520"></p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">c<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">%系数</span>a<span class="token operator">=</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span> <span class="token number">5</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token number">1</span> <span class="token number">3</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">%不等式系数</span>b<span class="token operator">=</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">;</span>aeq<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">%等式系数</span>beq<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">;</span>x<span class="token operator">=</span><span class="token function">linprog</span><span class="token punctuation">(</span><span class="token operator">-</span>c<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>aeq<span class="token punctuation">,</span>beq<span class="token punctuation">,</span><span class="token function">zeros</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%zeros下限为零</span>value<span class="token operator">=</span>c<span class="token operator">'</span><span class="token operator">*</span>x<span class="token punctuation">;</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token string">'x1=%.4f,x2=%.4f,x3=%.4f\nz:%.4f\n'</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="整数规划"><a href="#整数规划" class="headerlink" title="整数规划"></a>整数规划</h4><h5 id="分值定界法"><a href="#分值定界法" class="headerlink" title="分值定界法"></a>分值定界法</h5><p>e03，分割可行解空间</p><p><img src="http://cdn.tianwen42.top/img/picgo/20210829152956.png" alt="image-20210829152956647"></p><h5 id="隐枚举法"><a href="#隐枚举法" class="headerlink" title="隐枚举法"></a>隐枚举法</h5><p>e04</p><p><img src="http://cdn.tianwen42.top/img/picgo/20210829154820.png" alt="image-20210829154820767"></p><p>观察，先取一个解，如果小于这个解，就舍弃，改进下边界。</p><p><img src="http://cdn.tianwen42.top/img/picgo/20210829154752.png" alt="image-20210829154752250"></p><h5 id="蒙特卡罗法"><a href="#蒙特卡罗法" class="headerlink" title="蒙特卡罗法"></a>蒙特卡罗法</h5><p>e05，丢点，不解释</p><h4 id="非线性规划"><a href="#非线性规划" class="headerlink" title="非线性规划"></a>非线性规划</h4><p>e06</p><p><img src="http://cdn.tianwen42.top/img/picgo/20210829160915.png" alt="image-20210829160915137"></p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">options<span class="token operator">=</span><span class="token function">optimset</span><span class="token punctuation">(</span><span class="token string">'largescale'</span><span class="token punctuation">,</span><span class="token string">'off'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">[</span>x<span class="token punctuation">,</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">fmincon</span><span class="token punctuation">(</span><span class="token string">'fun1'</span><span class="token punctuation">,</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token function">zeros</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'fun2'</span><span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token string">'x1=%.4f\nx2=%.4f\nx3=%.4f\ny=%.4f\n'</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="二次规划"><a href="#二次规划" class="headerlink" title="二次规划"></a>二次规划</h5><p>e07</p><p><strong>当目标函数为自变量x的二次函数，约束条件为全线性的</strong>，称为二次规划</p><p><img src="http://cdn.tianwen42.top/img/picgo/20210829161720.png" alt="image-20210829161720488"></p><table><thead><tr><th><img src="http://cdn.tianwen42.top/img/picgo/20210830095323.png" alt="image-20210830095323013"></th><th><img src="http://cdn.tianwen42.top/img/picgo/20210830100528.png" alt="image-20210830100528244" style="zoom: 33%;" /></th></tr></thead></table><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">h<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">;</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">%高次对角矩阵</span>f<span class="token operator">=</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">;</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">%一次矩阵</span>a<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">%ab线性约束</span>b<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">;</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">[</span>x<span class="token punctuation">,</span>value<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">quadprog</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span>f<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token function">zeros</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token string">'x1=%.4f\nx2=%.4f\nz=%.4f\n'</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>x1<span class="token operator">=</span><span class="token number">0</span><span class="token operator">:</span><span class="token number">0.01</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">;</span>x2<span class="token operator">=</span>x1<span class="token punctuation">;</span><span class="token punctuation">[</span>x1<span class="token punctuation">,</span>x2<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">meshgrid</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span>x2<span class="token punctuation">)</span><span class="token punctuation">;</span>f<span class="token operator">=</span><span class="token number">2</span><span class="token operator">*</span>x1<span class="token operator">.^</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">4</span><span class="token operator">*</span>x1<span class="token operator">.*</span>x2<span class="token operator">+</span><span class="token number">4</span><span class="token operator">*</span>x2<span class="token operator">.^</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">6</span><span class="token operator">*</span>x1<span class="token operator">-</span><span class="token number">3</span><span class="token operator">*</span>x2<span class="token punctuation">;</span><span class="token function">f</span><span class="token punctuation">(</span>x1<span class="token operator">+</span>x2<span class="token operator">&lt;=</span><span class="token number">3</span> <span class="token operator">&amp;</span> <span class="token number">4</span><span class="token operator">*</span>x1<span class="token operator">+</span>x2<span class="token operator">&lt;=</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">15</span><span class="token punctuation">;</span><span class="token function">mesh</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span>x2<span class="token punctuation">,</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="分析方法"><a href="#分析方法" class="headerlink" title="分析方法"></a>分析方法</h2><h3 id="方差分析法"><a href="#方差分析法" class="headerlink" title="方差分析法"></a>方差分析法</h3><h3 id="回归分析法"><a href="#回归分析法" class="headerlink" title="回归分析法"></a>回归分析法</h3><h3 id="层次分析法"><a href="#层次分析法" class="headerlink" title="层次分析法"></a>层次分析法</h3><h3 id="判别分析法"><a href="#判别分析法" class="headerlink" title="判别分析法"></a>判别分析法</h3><h2 id="优化类算法"><a href="#优化类算法" class="headerlink" title="优化类算法"></a>优化类算法</h2><h2 id="插值方法"><a href="#插值方法" class="headerlink" title="插值方法"></a>插值方法</h2><h3 id="拉格朗日多项式插值"><a href="#拉格朗日多项式插值" class="headerlink" title="拉格朗日多项式插值"></a>拉格朗日多项式插值</h3><p>拉格朗日插值法可以找到一个<a href="https://baike.baidu.com/item/%E5%A4%9A%E9%A1%B9%E5%BC%8F/10660961">多项式</a>，其恰好在各个观测的点取到观测到的值，<strong>给一些点，得出的一条过点的拟合曲线</strong>，方法如下</p><p>插值基函数</p><p><img src="http://cdn.tianwen42.top/img/picgo/20210830170745.png" alt="image-20210830170745016"></p><p>将每一个点的插值基函数相加，得到过所有点的函数</p><p><img src="http://cdn.tianwen42.top/img/picgo/20210830170236.png" alt="image-20210830170236543"></p><h3 id="牛顿插值"><a href="#牛顿插值" class="headerlink" title="牛顿插值"></a>牛顿插值</h3><p><img src="http://cdn.tianwen42.top/img/picgo/20210831115723.jpg" alt="newton"></p><p>由高次牛顿插值可以推得泰勒公式</p><p><img src="http://cdn.tianwen42.top/img/picgo/20210830181644.jpg" alt="Tyler"></p><p><img src="http://cdn.tianwen42.top/img/picgo/20210830180447.png" alt="image-20210830180447277"></p><p>因而便于递推运算，而且 Newton 插值的计算量小于 Lagrange 插值。</p><h3 id="分段线性插值"><a href="#分段线性插值" class="headerlink" title="分段线性插值"></a>分段线性插值</h3><p><img src="http://cdn.tianwen42.top/img/picgo/20210831104513.png" alt="image-20210831104513420"></p><p><img src="http://cdn.tianwen42.top/img/picgo/20210831105557.jpg" alt="linear"></p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">yl<span class="token operator">=</span><span class="token function">interp1</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token number">2.3</span><span class="token punctuation">,</span><span class="token string">'linear'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%'nearest' 最近项插值</span><span class="token comment">%'linear' 线性插值</span><span class="token comment">%'spline' 逐段 3 次样条插值</span><span class="token comment">%'cubic' 保凹凸性 3 次插值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="艾米尔特插值法"><a href="#艾米尔特插值法" class="headerlink" title="艾米尔特插值法"></a>艾米尔特插值法</h3><p>如果对插值函数，不仅要求它在节点处与函数同值，而且要求它与函数有相同的一阶、二阶甚至更高阶的导数值，这就是 Hermite 插值问题</p><h3 id="样条插值"><a href="#样条插值" class="headerlink" title="样条插值"></a>样条插值</h3><h2 id="方程建模"><a href="#方程建模" class="headerlink" title="方程建模"></a>方程建模</h2><h3 id="微分方程建模"><a href="#微分方程建模" class="headerlink" title="微分方程建模"></a>微分方程建模</h3><p>人口增长模型，Malthus模型。</p><p>模型假设：</p><ol><li>设x(t)表示t时刻的人口数，且x(t)连续可微。</li><li>人口的增长率r是常数（增长率&#x3D;出生率-死亡率）</li><li>人口的数量变化是封闭的</li></ol><p><img src="http://cdn.tianwen42.top/img/picgo/20210831113207.png" alt="image-20210831113207052"></p><p><img src="http://cdn.tianwen42.top/img/picgo/20210831113236.png" alt="image-20210831113236524"></p><p>改进模型，改进的模型假设：</p><ol><li>设r(x)为x的线性函数， r(x)&#x3D;r-sx</li><li>自然资源与环境条件所能容纳的最大人口数为xm，即当x&#x3D;xm时增长率r(xm)&#x3D;0</li></ol><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">xt<span class="token operator">=</span><span class="token function">dsolve</span><span class="token punctuation">(</span><span class="token string">'Dx=r*(1-x/xm)*x'</span><span class="token punctuation">,</span><span class="token string">'x(t0)=x0'</span><span class="token punctuation">,</span><span class="token string">'t'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">disp</span><span class="token punctuation">(</span>xt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">-</span>xm<span class="token operator">/</span><span class="token punctuation">(</span><span class="token function">exp</span><span class="token punctuation">(</span>xm<span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x0 <span class="token operator">-</span> xm<span class="token punctuation">)</span><span class="token operator">/</span>x0<span class="token punctuation">)</span> <span class="token operator">+</span> r<span class="token operator">*</span>t0<span class="token punctuation">)</span><span class="token operator">/</span>xm <span class="token operator">-</span> <span class="token punctuation">(</span>r<span class="token operator">*</span>t<span class="token punctuation">)</span><span class="token operator">/</span>xm<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="http://cdn.tianwen42.top/img/picgo/20210831115238.jpg" alt="推导"></p><h3 id="常微分方程解法"><a href="#常微分方程解法" class="headerlink" title="常微分方程解法"></a>常微分方程解法</h3><h3 id="偏微分方程数值解法"><a href="#偏微分方程数值解法" class="headerlink" title="偏微分方程数值解法"></a>偏微分方程数值解法</h3><h3 id="差分方程解法"><a href="#差分方程解法" class="headerlink" title="差分方程解法"></a>差分方程解法</h3><h2 id="图像类"><a href="#图像类" class="headerlink" title="图像类"></a>图像类</h2><h2 id="时间序列模型"><a href="#时间序列模型" class="headerlink" title="时间序列模型"></a>时间序列模型</h2><p>1.最小值优化</p><p>2.多目标最小值优化</p><p>3.方程求解器</p><p>4.最小二乘（曲线拟合）求解器</p>]]></content>
      
      
      <categories>
          
          <category> 地理与计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> matlab </tag>
            
            <tag> 工程 </tag>
            
            <tag> 分析方法 </tag>
            
            <tag> 数值分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>模拟退火算法</title>
      <link href="/posts/a0d601b7.html"/>
      <url>/posts/a0d601b7.html</url>
      
        <content type="html"><![CDATA[<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><h2 id="金属退火的原理"><a href="#金属退火的原理" class="headerlink" title="金属退火的原理"></a>金属退火的原理</h2><p>金属退火是将金属加热到一定温度，保持足够时间，然后以适宜速度冷却(通常是缓慢冷却，有时是控制冷却)的一种金属热处理工艺。模拟退火算法来源于固体退火原理，将固体加温至充分高，再让其徐徐冷却，加温时，固体内部粒子随温升变为无序状，内能增大，而徐徐冷却时粒子渐趋有序，在每个温度都达到平衡态，最后在常温时达到基态，内能减为最小。</p><h1 id="求一个给定函数的最值"><a href="#求一个给定函数的最值" class="headerlink" title="求一个给定函数的最值"></a>求一个给定函数的最值</h1><blockquote><p>蒙特卡洛模拟:生成多个解：[0.21,-31.13,314.2,……….]</p><p>穷举法    [0,0.001,0.002……..]</p></blockquote><p>上述两种方法对于多变量最值（可行解太多）很难求解</p><h2 id="一元-x2F-多元函数优化"><a href="#一元-x2F-多元函数优化" class="headerlink" title="一元&#x2F;多元函数优化"></a>一元&#x2F;多元函数优化</h2><p>一元函数：x &#x3D; [1,2]范围内 y &#x3D; sin(10<em>pi</em>x) &#x2F; x 的极值</p><p><img src="http://cdn.tianwen42.top/img/picgo/20210807150229.png" alt="img"></p><p>二元函数：在x,y都是[-5,5]范围内找z &#x3D; x.^2 + y.^2 - 10<em>cos(2</em>pi<em>x) - 10</em>cos(2<em>pi</em>y) + 20 的极值</p><p><img src="http://cdn.tianwen42.top/img/picgo/20210807150233.png" alt="img"></p><h2 id="爬山法（贪心）"><a href="#爬山法（贪心）" class="headerlink" title="爬山法（贪心）"></a>爬山法（贪心）</h2><blockquote><p>是一种启发式算法</p><p>思路：往最大值方向走，容易陷入局部最优值</p><p>模拟退火有概率接受更差的解，可以跳出局部最优解</p></blockquote><p><img src="http://cdn.tianwen42.top/img/picgo/20210808145048.png" alt="img"></p><h1 id="TSP（旅行商问题）"><a href="#TSP（旅行商问题）" class="headerlink" title="TSP（旅行商问题）"></a>TSP（旅行商问题）</h1>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> matlab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>仲夏</title>
      <link href="/posts/d9c69240.html"/>
      <url>/posts/d9c69240.html</url>
      
        <content type="html"><![CDATA[<p align="center"><img src="http://cdn.tianwen42.top/img/picgo/20210804165007.jpg" alt="Meting" height="500"></p><p>在信息超载的时代，不要停止了思考啊</p><span id="more"></span><h1 id="关于这个暑假"><a href="#关于这个暑假" class="headerlink" title="关于这个暑假"></a>关于这个暑假</h1><p>这暑假，大概有奥运会，暴雨，疫情这么些事。</p><p>时间总是过得非常快的，转眼就到了八月，几天前我还困在matlab建模的泥潭里挣扎着，当然了，现在也还是在泥里。</p><p>几天前路过我这个城市里卖书的一条街，我记得以前老是来这里买书，在那个网络购物还不发达的时代，以前所有的教材书籍都要来这买，每次开学都人挤人，想来已经有好多年没来了，这次来这儿，是陪我在上小学的妹妹，我说要送她几本书，让她随便挑书，最后她愣是没挑出来，倒是我买了两本书，我高中时候就会看这两本书，他们着实为我的高中生活增加了些颜色。想起来系统的看书是什么时候呢，我记得大一的时候借了很多书，虽然不一定看完，也都算认真的看了看，现在借书看一下子就耐不住性子了，是不是看多了视频之类的内容，而接受不来慢下来的内容了？我一时间竟感到的羞愧.</p><p><img src="http://cdn.tianwen42.top/img/picgo/20210804164932.jpg" alt="57b30981a3a47c6f67e8b380882843a"></p><p><img src="http://cdn.tianwen42.top/img/picgo/20210804165007.jpg" alt="4e3a216d4de8527aa8e0dc42751efbc"></p><p>我个人很喜欢一句话，<strong>用脚去丈量能够企及的大地</strong></p><h1 id="关于信息超载"><a href="#关于信息超载" class="headerlink" title="关于信息超载"></a>关于信息超载</h1><p><strong>＂我们被信息淹没，但却渴求知识.＂</strong>（奈斯比特）</p><p>为什么信息过载会产生焦虑？因为你接受的信息没办法给你的生活带来好的转变，但这些信息、挑选信息的过程，却在实实在在地消耗你的有限资源——<strong>时间。</strong></p><p>就我来说，最近的状态实在是不容乐观，国家讲究治理体系和治理能力，那我个人最近的治理效率可谓是低谷，投入与产出之比很低，每天投入的大概是靠着不背单词的几十个单词，知乎和bilibili实在是信息量爆炸，我个人还是很喜欢bilibili的，起初接触到，是因为上面有非常多的课程，但是使用着就会发现，关注越来越多，收藏也越来越多，弹幕本来是互动的好工具，现在我有点儿神经衰落了，什么内容的视频都推送，一股脑的给你，原先我是很讨厌抖音这种短视频内容的，后来发觉b站也愈发累赘了，趋于同化，我如果不能主导这些信息的话，我宁愿不接受这些，索性我卸载了知乎与bilibili，这与我不用QQ是同样的原因，我的b站本来有120+的关注，今天索性清理一下，只有20+了，</p><p>心灵的明亮与模糊，保持积极的向上的很很不容易，在信息超载的时代，不要停止了思考，<strong>多则惑，少则得</strong>，如是而已.</p><p><img src="http://cdn.tianwen42.top/img/picgo/20210806103651.png" alt="image-20210806103651055"></p><h1 id="关于道德"><a href="#关于道德" class="headerlink" title="关于道德"></a>关于道德</h1><blockquote><p>齐宣王问曰：“齐桓、晋文之事可得闻乎？”<br>孟子对曰：“仲尼之徒无道桓、文之事者，是以后世无传焉。臣未之闻也。无以，则王乎？”<br>曰：“德何如，则可以王矣？”<br>曰：“保民而王，莫之能御也。”<br>曰：“若寡人者，可以保民乎哉？”<br>曰：“可。”<br>曰：“何由知吾可也？”<br>曰：“臣闻之胡龁曰，王坐于堂上，有牵牛而过堂下者，王见之，曰：‘牛何之？对曰：‘将以衅钟。’王曰：‘舍之！吾不忍其觳觫，若无罪而就死地。’对曰：‘然则废衅钟与？’曰：‘何可废也？以羊易之！’不识有诸？”<br>曰：“有之。”<br>曰：“是心足以王矣。百姓皆以王为爱也，臣固知王之不忍也。”<br>王曰：“然。诚有百姓者。齐国虽褊小，吾何爱一牛？即不忍其觳觫，若无罪而就死地，故以羊易之也。”<br>曰：“王无异于百姓之以王为爱也。以小易大，彼恶知之？王若隐其无罪而就死地，则牛羊何择焉？” 王笑曰：“是诚何心哉？我非爱其财。而易之以羊也，宜乎百姓之谓我爱也。”<br>曰：“无伤也，是乃仁术也，见牛未见羊也。君子之于禽兽也，见其生，不忍见其死；闻其声，不忍食其肉。是以君子远庖厨也。”</p></blockquote><p>就事论事的话，“君子远庖厨”本身就是一种伪善。道德本就难以单一的界定，时至今日，这两种道德仍然可能发生矛盾，我们可能仍然会面临相似的问题</p><p><strong>城市上空我们这一排透着灯光的窗户，对于昏黄街道上漫步的行人来说，一定蕴藏着几许人生的秘密。我也看到了这样一位行人，正在抬头仰望，独自思索。我既在其中，又在其外，对人生的变幻无穷感到陶醉又厌恶</strong></p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反省 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习django</title>
      <link href="/posts/aa01240e.html"/>
      <url>/posts/aa01240e.html</url>
      
        <content type="html"><![CDATA[<p>暑假看django挺好的，有会一点python，记录一下</p><span id="more"></span><h2 id="创建django项目"><a href="#创建django项目" class="headerlink" title="创建django项目"></a>创建django项目</h2><blockquote><p>django -admin starproject site</p></blockquote><h2 id="启动django"><a href="#启动django" class="headerlink" title="启动django"></a>启动django</h2><blockquote><p>启动服务    python manage.py runserver 5000</p><p>启动应用    python manage.py startapp</p><p>数据库迁移    python manage.py migrate</p></blockquote><h2 id="结构树"><a href="#结构树" class="headerlink" title="结构树"></a>结构树</h2><p><img src="http://cdn.tianwen42.top/img/picgo/20210728114602.png" alt="image-20210728114602115"></p><blockquote><p>db.sqlite3    第一次启动创建的默认数据库，将来连接到mysql，redis</p><p>wsgi.py    网关配置文件</p><p>urls.py    主路由配置文件</p><p>settings.py    项目配置文件(共有配置，私有配置)</p><p>​    - BASE_DIR&#x3D;’xxxxxx’</p></blockquote><h2 id="settings-py"><a href="#settings-py" class="headerlink" title="settings.py"></a>settings.py</h2><p>引用配置</p><blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>conf <span class="token keyword">import</span> settings<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><h3 id="BASE-DIR"><a href="#BASE-DIR" class="headerlink" title="BASE_DIR"></a>BASE_DIR</h3><blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python">os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><h3 id="DEBUG"><a href="#DEBUG" class="headerlink" title="DEBUG"></a>DEBUG</h3><blockquote><p>True 调试模式（修改后立即重启django）</p><p>False 上线模式</p></blockquote><h3 id="ALLOWED-HOSTS"><a href="#ALLOWED-HOSTS" class="headerlink" title="ALLOWED_HOSTS"></a>ALLOWED_HOSTS</h3><blockquote><p>请求头host过滤</p></blockquote><h3 id="INSTALLED-APPS"><a href="#INSTALLED-APPS" class="headerlink" title="INSTALLED_APPS"></a>INSTALLED_APPS</h3><blockquote><p>应用配置</p></blockquote><h3 id="MIDDLEWARE"><a href="#MIDDLEWARE" class="headerlink" title="MIDDLEWARE"></a>MIDDLEWARE</h3><blockquote><p>中间件配置</p></blockquote><h3 id="ROOT-URLCONF"><a href="#ROOT-URLCONF" class="headerlink" title="ROOT_URLCONF"></a>ROOT_URLCONF</h3><blockquote><p>主路由位置</p></blockquote><h3 id="TEMPLATES"><a href="#TEMPLATES" class="headerlink" title="TEMPLATES"></a>TEMPLATES</h3><blockquote><p>模板配置</p></blockquote><h3 id="DATABASES"><a href="#DATABASES" class="headerlink" title="DATABASES"></a>DATABASES</h3><blockquote><p>数据库配置</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">DATABASES <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'default'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">'ENGINE'</span><span class="token punctuation">:</span> <span class="token string">'django.db.backends.sqlite3'</span><span class="token punctuation">,</span>        <span class="token string">'NAME'</span><span class="token punctuation">:</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>BASE_DIR<span class="token punctuation">,</span> <span class="token string">'db.sqlite3'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3 id="TIME-ZONE"><a href="#TIME-ZONE" class="headerlink" title="TIME_ZONE"></a>TIME_ZONE</h3><blockquote><p>时区配置</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">TIME_ZONE <span class="token operator">=</span> <span class="token string">'Asia/Shanghai'</span>   <span class="token comment">#UTC</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><h3 id="LANGUAGE-CODE"><a href="#LANGUAGE-CODE" class="headerlink" title="LANGUAGE_CODE"></a>LANGUAGE_CODE</h3><blockquote><p>语言配置</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">LANGUAGE_CODE <span class="token operator">=</span> <span class="token string">'zh-Hans'</span><span class="token comment">#en-us</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><h3 id="STATIC-URL"><a href="#STATIC-URL" class="headerlink" title="STATIC_URL"></a>STATIC_URL</h3><blockquote><p>静态页面配置</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">STATIC_URL <span class="token operator">=</span> <span class="token string">'/static/'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><h2 id="URL和视图函数"><a href="#URL和视图函数" class="headerlink" title="URL和视图函数"></a>URL和视图函数</h2><blockquote><p>web&#x3D;协议+主机名+端口(80&#x2F;443)+path</p><p><a href="https://www.bilibili.com/video/BV19z4y1o7ww">https://www.bilibili.com/video/BV19z4y1o7ww</a></p></blockquote><h3 id="query-查询"><a href="#query-查询" class="headerlink" title="query(查询)"></a>query(查询)</h3><p>？代表查询语句</p><blockquote><p>key&#x3D;value结构，&amp;连接</p><p><a href="https://www.bilibili.com/video/BV19y4y1B7fv/?spm_id_from=autoNext">https://www.bilibili.com/video/BV19y4y1B7fv/?spm_id_from=autoNext</a></p></blockquote><h3 id="fragment-信息片段"><a href="#fragment-信息片段" class="headerlink" title="fragment(信息片段)"></a>fragment(信息片段)</h3><p>#代表某个字符串</p><blockquote><p>#锚点</p><p><a href="https://baike.baidu.com/item/42/16630643?fr=aladdin#2">https://baike.baidu.com/item/42/16630643?fr=aladdin#2</a></p></blockquote><h3 id="视图函数（views-py）"><a href="#视图函数（views-py）" class="headerlink" title="视图函数（views.py）"></a>视图函数（views.py）</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> HttpResponse<span class="token keyword">def</span> <span class="token function">page_2021_views</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    html<span class="token operator">=</span><span class="token string">'&lt;h1>one&lt;/h1>'</span>    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span>html<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://cdn.tianwen42.top/img/picgo/20210729125518.png"></p><blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#path（route，views，name=None）</span>path<span class="token punctuation">(</span><span class="token string">'page/2021/'</span><span class="token punctuation">,</span>views<span class="token punctuation">.</span>page_2021_views<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote><h3 id="path转换器"><a href="#path转换器" class="headerlink" title="path转换器"></a>path转换器</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">path<span class="token punctuation">(</span><span class="token string">'page/&lt; int:page >'</span><span class="token punctuation">,</span>views<span class="token punctuation">.</span>xxxx<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="http://cdn.tianwen42.top/img/picgo/20210729155031.png" alt="image-20210729155031780"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">path<span class="token punctuation">(</span><span class="token string">'page/&lt;int:pg>'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>pagen_view<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">def</span> <span class="token function">pagen_view</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>pg<span class="token punctuation">)</span><span class="token punctuation">:</span>    html<span class="token operator">=</span><span class="token string">'&lt;h1>编号为&#123;&#125;的网页！&lt;/h1>'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>pg<span class="token punctuation">)</span>    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span>html<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#http://127.0.0.1:5000/100/nul/100</span>path<span class="token punctuation">(</span><span class="token string">'&lt;int:m>/&lt;str:op>/&lt;int:n>'</span><span class="token punctuation">,</span> views<span class="token punctuation">.</span>cal_view<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">cal_view</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> m<span class="token punctuation">,</span> op<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> op <span class="token keyword">not</span> <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">'add'</span><span class="token punctuation">,</span> <span class="token string">'sub'</span><span class="token punctuation">,</span> <span class="token string">'nul'</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">'Your op is not correct'</span><span class="token punctuation">)</span>    result <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">if</span> op <span class="token operator">==</span> <span class="token string">'add'</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> m <span class="token operator">+</span> n    <span class="token keyword">elif</span> op <span class="token operator">==</span> <span class="token string">'sub'</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> m <span class="token operator">-</span> n    <span class="token keyword">elif</span> op <span class="token operator">==</span> <span class="token string">'nul'</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> n <span class="token operator">*</span> m    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">'结果为&#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="repath-正则匹配"><a href="#repath-正则匹配" class="headerlink" title="repath,正则匹配"></a>repath,正则匹配</h3><h2 id="最后叭叭两句"><a href="#最后叭叭两句" class="headerlink" title="最后叭叭两句"></a>最后叭叭两句</h2>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>遥感原理</title>
      <link href="/posts/a461be52.html"/>
      <url>/posts/a461be52.html</url>
      
        <content type="html"><![CDATA[<p>遥感概论课程复习</p><span id="more"></span><h1 id="一-遥感的基本概念"><a href="#一-遥感的基本概念" class="headerlink" title="一. 遥感的基本概念"></a>一. 遥感的基本概念</h1><ol><li>遥感的基本知识<br>“遥感”一词来自英语Remote Sensing，从字面上理解就是“遥远的感知”之意。顾名思义，遥感就是不直接接触物体，从远处通过探测仪器接受来自目标物体的电磁波信息，经过对信息的处理，判别出目标物体的属性。<br> 实际工作中，重力、磁力、声波、机械波等的探测被划为物理探测（物探）的范畴，因此，只有电磁波探测属于遥感的范畴。<br> 根据遥感的定义，遥感系统包括：被测目标的信息特征、信息的获取、信息的传输与记录、信息的处理和信息的应用这五大部分。</li><li>目标物的电磁波特性<br>任何目标物体都具有发射、反射和吸收电磁波的性质，这是遥感探测的依据。</li><li>信息的获取<br> 接受、记录目标物体电磁波特征的仪器，称为“传感器”或者“遥感器”。如：雷达、扫描仪、摄影机、辐射计等。</li><li>信息的接收<br> 传感器接受目标地物的电磁波信息，记录在数字磁介质或者胶片上。胶片由人或回收舱送至地面回收，而数字介质上记录的信息则可通过卫星上的微波天线输送到地面的卫星接收站。</li><li>信息的处理<br>地面站接收到遥感卫星发送来的数字信息，记录在高密度的磁介质上，并进行一系列的处理，如信息恢复、辐射校正、卫星姿态校正、投影变换等，再转换为用户可以使用的通用数据格式，或者转换为模拟信号记录在胶片上，才能被用户使用。</li><li>信息的应用<br>遥感技术是一个综合性的系统，它涉及到航空、航天、光电、物理、计算机和信息科学以及诸多应用领域，它的发展与这些科学紧密相关。</li><li>遥感的分类<br>1） 按遥感平台分<br> 地面遥感：传感器设置在地面上，如：车载、手提、固定或活动高架平台。<br> 航空遥感：传感器设置在航空器上，如：飞机、气球等。<br> 航天遥感：传感器设置在航天器上，如：人造地球卫星、航天飞机等。<br>2） 按传感器的探测波段分<br> 紫外遥感：探测波段在0.05<del>0.38μm之间。<br> 可见光遥感：探测波段在0.38</del>0.76μm之间。<br> 红外遥感：探测波段在0.76<del>1000μm之间。<br> 微波遥感：探测波段在1mm</del>10m之间。<br>3） 按工作方式分<br> 主动遥感：有探测器主动发射一定电磁波能量并接受目标的后向散射信号。<br> 被动遥感：传感器仅接收目标物体的自身发射和对自然辐射源的反射能量。<br>4） 按遥感的应用领域分<br> 外层空间遥感、大气层遥感、陆地遥感、海洋遥感等。</li><li>遥感发展简史<br>最早使用“遥感”一词的是美国海军研究所的艾弗林<em>普鲁伊特。1961年，在美国国家科学院和国家研究理事会的支持下，在密歇根大学的威罗</em>兰实验室召开了“环境遥感国际讨论会”，此后，在世界范围内，遥感作为一门新兴学科飞速发展起来。<br>1）无记录的地面遥感阶段（1608—1838年）<br>1608年，汉斯*李波尔赛制造了世界第一架望远镜，1609年伽利略制作了放大倍数3倍的科学望远镜，从而为观测远距离目标开辟了先河。但望远镜观测不能吧观测到的事物用图像记录下来。<br>2）有记录的地面遥感阶段（1839—1857年）<br>对探测目标的记录与成像始于摄影技术的发展，并与望远镜相结合发展为远距离摄影。<br>3）空中摄影遥感阶段（1858—1956年）<br>1858年，G..F.陶纳乔用系留气球拍摄了法国巴黎的“鸟瞰”像片。<br>1860年，J.布莱克乘气球升空至630m，成功的拍摄了美国波士顿的照片。<br>1903年，J.钮布郎特设计了一种捆绑在飞鸽身上的微型相机。这些试验性的空间摄影，为后来的实用化航空摄影打下了基础。<br>在第一次世界大战期间，航空摄影成了军事侦探的重要手段，并形成了一定规模。与此同时，像片的判读水平也大大提高。一战以后，航空摄影人员从军事转向商务和科学研究。美国和加拿大成立了航测公司，并分别出版了《摄影测量工程》及类似性质的刊物，专门介绍有关技术方法。<br>1924年，彩色胶片出现，使得航空摄影记录的地面目标信息更为丰富。<br>二战中，微波雷达的出现及红外技术应用于军事侦查，使遥感探测的电磁波谱段得到了扩展。<br>4）航空遥感阶段（1957—）<br>1957年10月4日，苏联第一颗人造地球卫星的发射成功，标志着人的空间观测进入了新纪元。此后，美国发射了“先驱者2号”探测器拍摄了地球云图。真正从航天器上对地球进行长期探测是从1960年美国发射TIROS-1和NOAA-1太阳同步卫星开始。<br>此外，多宗探测技术的集成日趋成熟，如雷达、多光谱成像与激光测高、GPS的集成可以同时取得经纬度坐标和地面高程数据，由于实时测图。<br>总之，随着遥感应用向广度和深度发展，遥感探测更趋于实用化、商业化和国际化。</li><li>遥感应用的一个简单例子<br>大兴安岭森林火灾发生的时候，由于着火的树木温度比没有着火的树木温度高，它们在电磁波的热红外波段会辐射出比没有着火的树木更多的能量，这样，当消防指挥官面对着熊熊烈火担心不已的时候，如果这时候正好有一个载着热红外波段传感器的卫星经过大兴安岭上空，传感器拍摄到大兴安岭周围方圆上万平方公里的影像，因为着火的森林在热红外波段比没着火的森林辐射更多的电磁能量，在影像着火的森林就会显示出比没有着火的森林更亮的浅色调。当影像经过处理，交到消防指挥官手里时，指挥官一看，图像上发亮的范围这么大，而消防队员只是集中在一个很小的地点上，说明火情逼人，必须马上调遣更多的消防员到不同的地点参加灭火战斗。</li><li>中国遥感技术的发展<br>我国自1970年4月24日发射“东方红1号”人造卫星后，相继发射了数十颗不同类型的人造地球卫星，使得我国开展宇宙探测、通讯、科学实验、气象观测等研究有了自己的信息源。1999年10月14日中国—巴西地球资源卫星CBERS—1的成功发射，使我国拥有了自己的资源卫星。<br>在遥感图形处理方面，已开始从普遍采用国际先进的商品化软件向国产化迈进。在科技部、信息产业部的倡导下，国产图像处理软件从研制走向了商品化，并占有一定的市场份额，如photomapper等。<br>在遥感应用方面，国家将遥感列入重点攻关项目和“863”工程。<br>二. 电磁辐射与地球的光谱特征</li><li>电磁波谱与电磁辐射<br>（1）基本概念<br>1）波：振动的传播。如：水波、声波、地震波等。<br>2）机械波：振动的是弹性介质中的位移矢量。<br>3）电磁波：电磁振源产生的电磁振荡在空间中的传播。<br>4）电磁波的特点<br>①不需要传播介质<br>②电磁波是横波，在真空中以光速传播<br>③满足波粒二象性<br>④波长与频率成反比，且两者之积为光速：f×λ&#x3D;c。<br>⑤传播遇到气体、固体、液体介质时，会发生反射、投射、折射、吸收等现象。<br>5）电磁波谱：按照电磁波波长的长短，依次排列成的图表称为电磁波谱。<br>（2）电磁辐射的量度<br>1）辐射源：任何物体都是辐射源，既能吸收其它物体的辐射，也能向外辐射电磁波。<br>2）辐射能量：电磁辐射的能量，单位：J（焦耳）。<br>3）辐射通量：单位时间内通过某一面积的辐射能量，单位：W。<br>4）辐射通量密度：单位时间内通过表面单位面积上的辐射通量。<br>5）辐照度：被辐射的物体表面单位面积上的辐射通量。<br>6）辐射出射度：辐射源物体表面单位面积上的辐射通量。<br>7）辐射亮度：辐射源在某一方向，单位投影表面，单位立体角内的辐射通量。<br>8）黑体辐射定律<br>①普朗克公式：描述黑体辐射出射度与温度、波长等的关系<br>②斯蒂芬－玻尔兹曼定<br>③维恩位移定律<br>9）实际物体的辐射<br>物体的发射率是温度和波长的函数，且与种类、物理状况（如粗糙度、颜色等）等有关。<br>按照发射率和波长的关系，辐射源可分为：<br> ①黑体：ελ &#x3D; ε&#x3D;1<br> ②灰体：ελ &#x3D;ε&#x3D;常数&lt;1<br>③选择性辐射体：ελ &lt;1,且随波长而变</li><li>太阳辐射及大气对辐射的影响<br>1）太阳辐射源：太阳是太阳系唯一的恒星，它集中了太阳系99.865%的质量。太阳是一个炽热的气体星球，没有固体的星体或核心。太阳能量的99%是由中心的核反应区的热核反应产生的。太阳中心的密度和温度极高。太阳大气的主要成分是氢（质量约占71%）与氦（质量约占27%）。<br>2）大气成分组成：</li></ol><p>①永久气体：氮气、氧气、CO2、惰性气体、氢气、甲烷等。</p><p>②浓度可变的气体：水蒸气、臭氧、SO2、氨气等。<br>③固体和液体微粒。<br>3）大气垂直分层(大气结构)：电离层：距地面85km直到几百千米的范围均为热电离层，温度范围为500K到2000K<br>平流层：在平流层最下面直到20km的高度之内，温度几乎为常数<br>对流层：厚约为10km，温度随高度的增加而降低<br>4）大气辐射衰弱的原因：反射、吸收、散射。<br>   大气吸收17％， 散射22％，反射30％，其余31％太阳辐射到达地面。<br>5）散射：①瑞利（Rayleigh） 散射：当大气中粒子的直径比辐射波长小得多时发生的散射；散射强度与波长的四次方成反比。<br> ②米氏散射：当大气中粒子的直径与波长相当时发生的散射；散射强度与波长的二次方成反比。<br> ③非选择性散射：当大气中粒子的直径比波长大得多时发生的散射；散射强度与波长无关<br>6）吸收作用：大气吸收电磁辐射的主要物质是：水、二氧化碳和臭氧<br>7）反射作用：云量越多、云层越厚， 反射越强<br>8）折射作用：折射率与大气密度有关，密度越大折射率越大。<br>3. 地球的辐射与地物波谱特征<br>1）太阳辐射与地表的相互作用<br>①温度为300K的黑体，其电磁辐射的波长范围是：2.5~50μｍ(0.3-2.5um)。<br>②地球表面的发射辐射能量集中于近红外波段和热红外波段；在热红外波段，地球的发射辐<br>射能量远远大于太阳的电磁辐射能量，通常称地球的发射辐射为热辐射<br>③地球表面的热辐射（能量）与自身的发射率、波长、温度有关<br>2）地物波谱特征<br> 在可见光与近红外波段，地表物体自身的热辐射几乎等于零。所以地物发出的波谱主要以反射太阳辐射为主。<br>到达地面的太阳辐射能量&#x3D;反射能量+吸收能量+透射能量<br>①反射率：物体反射的辐射能量占总入射能量的百分比<br>②物体的反射：镜面反射、漫反射和实际物体的反射。<br>三. 遥感成像原理与遥感图像特征<br>遥感平台是搭载传感器的工具。在遥感平台中，航天遥感平台目前发展最快、应用最广。根据航天遥感平台的服务内容，可以将其分为气象卫星系列、陆地卫星系列和海洋卫星系列。</p><ol><li>气象卫星概述<br>第一代：20世纪60年代      TIROS、ESSA、Nimbus、ATS<br>第二代：1970-1977年        ITOS-1、SMS、GOES、GMS、Meteosat<br>第三代：1978年以后         NOAA系列<br>我国的气象卫星发展较晚。“风云一号”气象卫星（FY-1）是中国发射的第一颗环境遥感卫星。其主要任务是获取全球的昼夜云图资料及进行空间海洋水色遥感实验。</li><li>气象卫星特点<br>1）轨道<br>气象卫星的轨道分为两种：低轨和高轨。<br>高轨气象卫星：轨道高度：36000公里<br>信息采集时间周期：约20分钟<br>分辨率：1.25 ~ 5公里<br>主要应用领域：全球性大气环流；全球性天气过程<br>低轨气象卫星：轨道高度：36000公里<br>信息采集时间周期：约20分钟<br>分辨率：1.25 ~ 5公里<br>主要应用领域：全球性大气环流；全球性天气过程<br>2）短周期重复观测<br>3）成像面积大，有利于获得宏观同步信息，减少数据处理容量<br>4）资料来源连续、实时性强、成本低</li><li>陆地卫星系列<br>1）陆地卫星（Landsat）<br>轨道:太阳同步的近极地圆形轨道<br>重复覆盖周期:16 18天<br>图象覆盖范围：185 * 185 km（Landsat 7 185*170 km）。<br>Landsat上携带传感器空间分辨率不断提高，从80 m到 30 m到 15 m<br>2）法国SPOT卫星系列<br>地球观察卫星系统。由瑞典、比利时等国家参加，由法国国家空间研究中心（CNES）设计制造。1986年发射第一颗，到2002年已发射5颗。<br>特点：太阳同步圆形近极地轨道高度830 km<br>覆盖周期26天扫描宽度: 60 (×60 ) 公里<br>主要传感器:2台HRV<br>空间分辨率: 全色10m; 多光谱20m<br>能满足资源调查、环境管理与监测、农作物估产、地质与矿产勘探、土地利用、测制地图及地图更新等多方面需求<br>SPOT 卫星系列优势特征：卫星搭载的传感器具有倾斜（侧视）能力<br>信息获取的重复周期：一般地区3~5天；部分地区达到1天<br>3）中巴地球资源卫星CBERS： 1999.10.14，我国第一颗地球资源遥感卫星（又称资源一号卫星）在太原卫星发射中心成功发射<br>CBERS卫星特点：太阳同步近极地轨道，轨道高度778 km，卫星重访周期26天携带的传感器的最高空，间分辨率是19.5 m<br>4）高空间分辨率陆地卫星(IKONOS、QUICKBIRD等)</li><li>摄影成像<br>数字摄影是通过放置在焦平面的光敏元件，经过光电转换，以数字信号来记录物体的影像。依据探测波长的不同，可分为近紫外摄影、可见光摄影、红外摄影、多光谱摄影等。<br>1）摄影机分类<br>①分幅式：一次曝光得到目标物一幅像片；镜头:常角、宽角和特宽角<br>②全景式: 分为缝隙式和镜头转动式<br>对可见光遥感，摄影机外壳只需是不透光材料，对红外摄影，只能用金属材料。镜头则需根据摄取的波段选择材料。<br>③多光谱摄影机：多相机组合、多镜头组合、光束分离型<br> 可同时直接获取可见光和近红外范围内若干个分波段影像<br>2）摄影像片的几何特征<br>根据摄影机主光轴与地面的关系，可分为垂直摄影和倾斜摄影。<br>①垂直摄影像片的几何特征:</li></ol><p>1.像片的投影：中心投影<br>中心投影与垂直投影的区别<br>（1）投影距离的影响<br>（2）投影面倾斜的影响<br>（3）地形起伏的影响<br>②摄影胶片的物理特性<br>感光度：指胶片的感光速度。胶片感光度高，在光线较弱时也能方便摄影。<br>反差：指胶片的明亮部分与阴暗部分的密度差。<br>灰雾度：未经感光的胶片，显影后仍产生轻微的密度，呈浅灰色，故称灰雾。<br>宽容度：指胶片表达被摄物体亮度间距的能力。<br>解像力：通常称为感光胶片的分辨力。<br>③常用的遥感摄影胶片：</p><ol><li>黑白摄影胶片： —色盲片，— 正色片，— 分色片，— 全色片，— 红外黑白片</li><li>天然彩色胶片</li><li>红外彩色片</li><li>扫描成像<br> 扫描成像是依靠探测元件和扫描镜对目标物体以瞬时视场为单位进行的逐点、逐行取样，以得到目标地物电磁辐射特征信息，形成一定谱段的图像。其探测波段可包括紫外、红外、可见光和微波波段。<br> 1）光&#x2F;机扫描成像<br> 光机扫描的几何特征:取决于瞬时视场角、总视场角<br> 进行扫描成像时，总视场角不宜过大，否则图像边缘的畸变太大。通常在航空遥感中，总视场角取70～120<br> 光机扫描仪可分为单波段和多波段两种。多波段扫描仪的工作波段范围很宽，从近紫外、可见光至远红外都有。<br> 多波段扫描仪：地面物体的辐射波束—-扫描—反射—–聚焦—分光—再聚焦到感受不同波长的探测元件上。<br> 2）固体自扫描成像<br> 固体扫描是用固定的探测元件，通过遥感平台的运动对目标进行扫描的一种成像方式。<br> ——用固定的探测元件，通过遥感平台的运动对目标地物进行扫描的成像方式。<br> ——目前常用的探测元件是电荷耦合器件CCD<br> 3）高光谱成像扫描<br> 对遥感而言，在一定波长范围内，被分割的波段数愈多，即波谱取样点愈多，愈接近于连续波谱曲线，因此可以使得扫描仪在取得目标地物图像的同时也能获取该地物的光谱组成。这种既能成像又能获取目标光谱曲线的“谱像合一”的技术称为成像光谱技术。按该原理制成的扫描仪称为成像光谱仪。<br> 高光谱成像光谱仪：</li></ol><p>——图像由多达数百个波段的非常窄的连续的光谱波段组成</p><p>——光谱波段覆盖了可见光，近红外，中红外和热红外区域全部光谱带<br>—— 多采用扫描式或推帚式，可以收集200或200以上波段的数据。图像中的每一像元均<br>得到连续的反射率曲线</p><ol start="6"><li>微波遥感与成像<br>在电磁波谱中，波长在1mm～1m的波段范围称微波。<br>微波遥感是指通过微波传感器获取从目标地物发射或反射的微波辐射，经过判读处理来识别地物的技术。<br>1）微波遥感的特点<br>①全天候、全天时的信息获取能力<br>②对某些地物的特殊识别能力,如水和冰(微波波段发射率的差异)<br>③对冰、雪、森林、土壤（尤其对干燥、松散物质）有一定的穿透能力<br>④适宜对海面动态情况(海面风、海浪）进行监测<br>2）微波遥感方式和传感器<br>①主动微波遥感<br> 是指通过向目标地物发射微波并接受其后向散射信号来实现对地观测遥感方式。主要传感器是雷达。<br> 雷达意为无线电测距和定位。其工作波段大都唉微波范围。雷达是有发射机通过天线在很短时间内，向目标地物发射一簇很窄的大功率电磁波脉冲，然后用同一天线接受目标地物反射的回波信号而进行显示的一种传感器。不同物体，回波信号的振幅、相位不同，故接收处理后，可测出目标地物的方向、距离等数据。<br>②被动微波遥感<br> 是指通过传感器，接收来自目标地物发射的微波，而达到探测目地的遥感方式。<br>3）遥感图像的特征<br>目标地物——传感器——遥感图像——遥感图像处理<br>空间分辨率——几何特征——目标地物的大小、形状及空间分布<br>光谱分辨率（辐射分辨率）——物理特征——目标地物的属性特点<br>时间分辨率——时间特征——目标地物的变化动态特点<br>①空间分辨率&#x2F;地面分辨率<br>— 图像的空间分辨率指像素所代表的地面范围的大小<br>— 扫描成像—-像元：扫描仪瞬时视场所对应的地面实际大小<br>— 摄影成像—-线对&#x2F;米。( 线对:能分辨的地物的最小距离)<br>②波谱分辨率<br>— 指传感器在接收目标辐射的波谱时能分辨的最小波长间隔。<br>—传感器的波段选择须考虑目标的光谱特征值，才能取得好效果。<br>③辐射分辨率<br>— 指传感器接收波谱信号时，能分辨的最小辐射度差。在遥感图像上表现为每一像元的辐射量化级。<br>④时间分辨率<br>卫星的覆盖周期、重访周期。<br>重复获得同一地区的最短时间间隔。（注意和卫星运行周期的区别）<br>四. 遥感图像处理</li><li>光学原理与光学处理<br> 电磁波谱中0.38~0.76μm波段能够引起人的视觉。<br>1）颜色视觉<br>①视觉特征：<br>亮度对比（反差）：视场中对象与背景的亮度差与背景亮度之比。<br>颜色对比（色差）：视场中相邻区域的颜色差异。<br>②颜色性质的描述<br>明度(lightness)：人眼对光源或物体明亮程度的感觉。（与物体的反射率有关）<br>色调(hue)：指色彩的差异。（与视觉接收到的波长有关）<br>饱和度(saturation)：指色彩纯洁的程度。（与色光中是否混有白光以及白光占有的比例）<br>③颜色立体<br> 为了形象的描述颜色特性之间的关系，通常用颜色立体来表现一种理想化的示意关系。中间轴代表明度，从底端到顶端，由黑到灰再到白明度逐渐递增。<br>2）加色法与减色法<br>互补色：若两种颜色混合产生白色或者黑色，这两种颜色就称为互补色。<br>三原色：若三种颜色，其中任一种都不能由其余两种混合相加产生，这三种颜色按一定比例混合，可以形成各种色调的颜色，称之为三原色。红、绿、蓝为最优的三原色。</li><li>数字图像<br>数字图像是指能够被计算机存储、处理和使用的图像。遥感数据的表示既有光学图像也有数字图像。光学图像又称为模拟量，数字图像又称为数字量，它们之间的转换称为模&#x2F;数转换，记做A&#x2F;D转换。<br>1）数字图像的来源<br>①遥感卫星地面站（气象卫星接收站）提供计算机兼容的数字磁带，输入计算机图像处理系统，形成数字图像。<br>②记录在胶片上的影像（模拟图象）在专用设备上进行数字化<br>2）图像的数字化<br>� 把模拟图像分割成同样形状的小单元，进行空间离散化处理叫采样（sampling）。<br>� 以各个小单元的平均亮度值或中心部分的亮度值作为该单元的亮度值，为亮度值的离散化处理，即量化（quantization）。<br>3）遥感数字图像表示方式<br>数字图像（数字化）图像，是一种以二维数组（矩阵）形式表示的图像。或者称为相应区域内地物电磁辐射强度的二维分布。将地球表面一定区域范围内的目标地物记录在一个二维数组（或二维矩阵）中。<br>①像素（像元）是遥感数字图像最基本的单位，成像过程的采样点，计算机图像处理的最小单元。<br>②像素具有空间特征和属性特征。<br>空间特征：地理位置的信息<br> 属性特征：采用亮度值来表达<br>4）数字图像的优点<br>便于计算机处理与分析：<br>图像信息损失低：<br>抽象性强：<br>5）按照波段数量，遥感数字图象分类：</li><li>二值数字图象</li><li>单波段数字图象</li><li>彩色数字图象</li><li>多波段数字图象</li><li>数字图像校正——辐射校正<br> 进入传感器的辐射强度反映在图像上就是亮度值（灰度值）。辐射强度越大，亮度值越大。该值主要受两个物理量影响：一是太阳辐射照射到地面的辐射强度，二是地球的光谱反射率。当太阳辐射相同时，图像上像元亮度值的差异直接反映了地物目标光谱反射率的差异。但实际测量时，辐射强度值还受到其它因素的影响而发生改变。这一改变的部分就是需要校正的部分，故称为辐射畸变。<br> 1）引起辐射畸变有两个原因：<br> 传感器仪器本身产生的误差<br> 大气对辐射的影响<br> 2）传感器仪器本身产生的误差<br> 仪器引起的误差是由于多个检测器之间存在差异，以及仪器系统工作产生的误差，这导致了接收的图像不均匀，产生条纹和“噪声”。一般来说，这种畸变应该在数据生产过程中，有生产单位根据传感器参数进行校正，而不需要用户自己校正，所以用户应该考虑的是大气影响造成的畸变。<br> 3）大气对辐射的影响<br> ①大气影响的定量分析<br> 进入大气的太阳辐射会发生反射、折射、吸收、散射和透射。其中对传感器接收影响较大的是吸收和散射。<br> 传感器接收信号时，受仪器影响还有一个系统增益系数因子Sλ，这时进入传感器的亮度<br> l 校正方法<br> A. 直方图最小值去除法<br> 直方图以统计图的形式表示图像亮度值与像元数之间的关系。最小值去除法的基本思想在于一幅图像中总可以找到某种或某几种地物，其辐射亮度或发射率接近0。这时在图像中对应位置的像元亮度值应为0。实测表明,这些位置上的像元亮度不为0。这个值就应该是大气散射导致的程辐射度值。<br> 校正方法很简单，首先确定条件满足，即该图像上确有辐射亮度或反射亮度应为0的地区，则亮度最小值必定是这一地区受大气影响的呈辐射度增值。校正时，将每一波段中每个像元的亮度值都减去本波段的最小值，使图像亮度动态范围得到改善，对比度增强，从而提高图像质量。<br> B. 回归分析法<br> 假定某红外波段，存在程辐射为主的大气影响，且亮度增值最小，接近于0，设为波段a。现需要找到其他波段相应的最小值，这个值一定比a波段的最小值大一些，设为波段b，分别以a，b波段的像元亮度值为坐标，作二维光谱空间，两个波段中对应像元在坐标系内用一个点表示。由于波段之间的相关性，通过回归分析在众多点中一定能找到一条直线与波段b的亮度Lb相交，且：Lb&#x3D;βLα +α，    β为斜率</li></ol><p>式中：<br>，<br>分别为a，b波段亮度的平均值。</p><p>  a&#x3D;Lb-βLa ；式中a为波段a中的亮度为零处在波段b中所具有的亮度。可以认为<br>a就是波段b的程辐射度。<br>  校正方法是将波段b中每个像元的亮度值减去a，来改善图像，去掉程辐射。<br>4. 几何校正<br>    几何畸变: 当遥感图像在几何位置上发生了变化，产生诸如行列不均匀，像元大小与地面大小对应不准确，地物形状不规则变化等.遥感影像的总体变形（相对于地面真实形态而言）是平移、缩放、旋转、偏扭、弯曲及其他变形综合作用的结果。产生畸变的图像给定量分析及位置配准造成困难。<br>    遥感影像变形的原因：<br>    • 遥感器的内部畸变：由遥感器结构引起的畸变。<br>    • 遥感平台位置和运动状态变化的影响<br>    • 地形起伏的影响<br>    • 地球表面曲率的影响<br>    • 大气折射的影响<br>    • 地球自转的影响<br>    1）遥感平台位置和运动状态变化的影响<br>    航高：卫星运行的轨道本身就是椭圆的。航高始终发生变化，而传感器的扫描视场角不变，从而导致图像扫描行对应的地面长度发生变化。航高越向高处偏离，图像对应的地面越宽。<br>    航速：卫星的椭圆轨道本身就导致了卫星飞行速度的不均匀，其他因素也可导致遥感平台航速的变化。航速快时，扫描带超前，航速慢时，扫描带滞后，由此可导致图像在卫星前进方向上（图像上下方向）的位置错动。<br>   俯仰：遥感平台的俯仰变化能引起图像上下方向的变化，即星下点俯时后移，仰时前移，发生行间位置错动。<br>    翻滚：遥感平台姿态翻滚是指以前进方向为轴旋转了一个角度。可导致星下点在扫描线方向偏移，使整个图像的行翻滚角引起偏离的方向错动。<br>   偏航：指遥感平台在前进过程中，相对于原前进航向偏转了一个小角度，从而引起扫描行方向的变化，导致图像的倾斜畸变。<br>    地形起伏的影响当地形存在起伏时，会产生局部像点的位移，由于高差的原因，实际像点P距像幅中心的距离相对于理想像点P0距像幅中心的距离移动了△r。<br>    地表曲率的影响地球是椭球体，地球表面是曲面。这一曲面的影响主要表现在两个方面，一是像点位置的移动，当选择的地图投影平面是地球的切平面时，使地面点P0相对于投影平面点P有一高差△h。<br>    地表曲率的影响：全景畸变：当传感器扫描角度较大时，影响更加突出，造成边缘景物在图像显示时被压缩。<br>   大气折射的影响，折射后的辐射传播不再是直线而是一条曲线，从而导致传感器接收的像点发生位移。<br>    地球自转的影响，例如：卫星自北向南接收图像运动，这时地球自西向东自转。相对运动的结果，使卫星的星下位置逐渐产生偏离。<br>    2）遥感数字图像的几何校正<br>    ①几何校正方法：控制点校正法<br>    校正步骤：<br>    Ａ、原始图像与校正图像统一坐标系、投影<br>    Ｂ、确定GCP（Ground Control Point），即在原始畸变图像空间与标准空间寻找对应的控制点对<br>    C、选择畸变数学模型，并利用GCP数据求出畸变模型的未知参数，然后利用此畸变模型对原始畸变图像进行几何精校正<br>    D、再采样计算，得到校正后的新图像<br>    基本思路：校正的最终目的是确定校正后图像的行列数，然后找到新图像中每一像元的亮<br>    度值。<br>    ②具体步骤——1）象素坐标变换（空间上的重采样）<br>    找到一种数学关系，建立变换前图像坐标（x，y）与变换后图像坐标（u，v）的关系<br>    计算校正后图像中的每一点所对应原图中的位置（x，y）。计算时按行逐点计算，每行结<br>    束后进入下一行计算，直到全图结束。<br>   多项式的项数（即系数个数）N与其阶数n有着固定关系：N&#x3D;(n+1)(n+2)&#x2F;2<br>    多项式系数ai，bj（i,j＝０，１，２，…N-1）一般利用已知控制点的坐标值按最小二乘法求解。<br>    ③计算方法：内插计算（灰度值重采样）<br>   计算每一点的亮度值。纠正后的新图像的每一个像元，根据变换函数，可得到它在原始图像上的位置。如果求得的位置为整数，则该位置处的像元灰度就是新图像的灰度值。<br>    计算方法：如果位置不为整数，新点的亮度值介于邻点亮度值之间，常用内插法计算。<br>    有几种方法：<br>    l 最近邻法<br>    l 双线性内插法<br>    l 三次卷积内插法。<br>    最近邻法：距离实际位置最近的像元的灰度值作为输出图像像元的灰度值。<br>    双线性内插法：取（x，y）点周围4邻点，在y方向（或x方向）内插二次，再在x方向（或y方向）内插一次，得到（x，y）点的亮度值f(x，y），该方法称双线性内插法。<br>   三次卷积内插法：取与计算点（x，y）周围相邻的16个点，先在某一方向上内插，每4个值依次内插4次，求出f （ x ， j-1 ） ，f(x,j) ，f(x,j+1),f(x,j+2)，再根据这四个计算结果在另一方向上内插，得到f(x，y）。<br>    ④控制点的选取<br>    几何校正的第一步便是位置计算，对所选取的二元多项式求系数。<br>    控制点选取原则:1)特征变化大的地区应多选些。2)图像边缘部分要选取控制点，以避免外推。3) 表征空间位置的可靠性，道路交叉点，标志物，水域的边界，山顶，小岛中心，机场等。<br>    4）同名控制点要在图像上均匀分布；5）清楚辨认；<br>    6）数量应当超过多项式系数的个数（(n+1)*(n+2)&#x2F;2）。</p><h2 id="数字图像增强"><a href="#数字图像增强" class="headerlink" title="数字图像增强"></a>数字图像增强</h2><p>  当一副图像的目视效果不太好，或者有用的信息突出不够时，就需要作图像增强处理。例如，图像对比度不够，或者希望突出的某些边缘看不清，就可以用计算机图像处理技术改善图像质量。这样可以提高图像质量和突出所需信息，有利于分析判读或作进一步的处理。<br>  1）对比度变换<br>  通过改变图像像元的亮度值来改变图像像元的对比度，从而改善图像质量的处理方法。因为亮度值是辐射强度的反映，所以也称之为辐射增强。<br>  常用的方法是：对比度线性变换和非线性变换。<br>  假定像元亮度随机分布时，直方图应是正态分布的。<br>  l 峰值偏向亮度坐标轴左侧，图像偏暗。<br>  l 峰值偏向坐标轴右侧，图像偏亮，<br>  l 峰值提升过陡、过窄，图像的高密度值过于集中<br>  以上情况均是图像对比度较小，图像质量较差的反映。<br>  ①线性变换<br>  A. 线性变换变换函数是线性的或分段线性的，这种变换就是线性变换。线性变换是图像增强处理最常用的方法。<br>  B. 亮度值0～15图像拉伸为0～30，要设计一个线性变换函数，横坐标xa为变换前的亮度值，纵坐标xb为变换后的亮度值。当亮度值xa从0～15变换成xb从0～30，变换函数在图中是一条直线。：<br>  有时为了更好的调节图像的对比度，需要在一些亮度段拉伸，而在另一些亮度段压缩，这种变换称为分段线性变换。<br>  ②非线性变换<br>  当变换函数是非线性时，即为非线性变换。非线性变换的函数很多，常用的是指数变换和对数变换。<br>   指数变换：其意义是在亮度值较高的部分扩大亮度间隔–属于拉伸，在亮度值较低的部分缩小亮度间隔–属于压缩<br>  对数变换：与指数变换相反，意义是在亮度值较低的部分拉伸，而在亮度值较高的部分压缩<br>  2） 空间滤波<br>  对比度扩展的辐射增强：通过单个像元的运算从整体上改善图像的质量。<br>  空间滤波：以重点突出图像上的某些特征为目地的采用空间域中的邻域处理方法。属于几何增强处理，主要包括平滑和锐化。<br>  ①图像卷积运算<br>  空间滤波是图象卷乘积运算的一种特殊应用。在空间域上对图像作局部检测的运算，以实现平滑和锐化。<br>  具体作法：选定一卷积函数（又称“模板”，实际上是一个M×N图像），二维的卷积运算是在图像中使用模板来实现运算的。<br>  ②平滑<br>  图像中某些亮度变化过大的区域，或出现不该有的亮点（“噪声”），采用平滑的方法减小变化，使亮度平缓或去掉不必要的“噪声”点。具体方法有：<br>  均值平滑<br>  是将每个像元在以其为中心的区域内取平均值来代替该像元值，以达到去掉尖锐“噪声”和平滑图像的目地。<br>  中值滤波<br>  是将每个像元在以其为中心的邻域内取中间亮度值来代替该像元值，以达到去尖锐“噪声”和平滑图像目的的。<br>  锐化（边界增强）<br>  为了突出图像的边缘、线状目标或某些亮度变化率大的部分，可采用锐化方法。锐化后的图像已不再具有原遥感图像的特征而成为边缘图像。常用几种：<br>  l 罗伯特梯度<br>  l 索伯尔梯度<br>  l 拉普拉斯算法<br>  l 定向检测<br>  3） 彩色变换<br>  不同的彩色变换可大大增强图像的可读性，常用的三种彩色变换方法。<br>  单波段彩色变换<br>  多波段彩色变换<br>  HSI变换<br>  ①单波段彩色变换（密度分割）<br>  单波段黑白遥感图像按亮度分层，对每层赋予不同的色彩，使之成为一幅彩色图像。即按图像的密度进行分层，每一层所包含的亮度值范围可以不同。<br>  ②多波段彩色变换<br>  加色法彩色合成原理—选择遥感影像的某三个波段—分别赋予红、绿、蓝三种原色—合成彩色影像。<br>  真彩色合成<br>  假彩色合成<br>  多波段影像合成时，方案的选择决定彩色影像能否显示较丰富的地物信息,或突出某一方面的信息。<br>  ③HSI变换<br>  HSI代表色调、饱和度和明度（hue，saturation,intensity）。色彩模式可以用近似的颜色立体来定量化。颜色立体曲线锥形改成上下两个六面金字塔状。<br>  4） 图象运算<br>  两幅或多幅单波段影像，完成空间配准后，通过一系列运算，可以实现图像增强，提取某些信息或去掉某些不必要信息。<br>  l 差值运算<br>  l 比值运算<br>  ①差值运算<br>  即两幅同样行、列数的图像，对应像元的亮度值相减。两个波段相减,反射率差值大的被突出来。图像的差值运算有利于目标与背景反差较小的信息提取，如冰雪覆盖区，海岸带的潮汐线等。<br>    差值运算还常用于研究同一地区不同时相的动态变化。如监测森林火灾发生前后变化和计算过火面积；监测水灾发生前后的水域变化和计算受灾面积及损失；监测城市在不同年份的扩展情况及计算侵占农田的比例等。<br>  ②比值运算<br>  两幅同样行、列数的图像，对应像元的亮度值相除（除数不为0）<br>  植被指数，常用算法：近红外波段／红波段或（近红外-红）&#x2F;(近红外+红）<br>  5） 多光谱变换<br>  多光谱变换通过函数变换，达到保留主要信息，降低数据量；增强或提取有用信息的目的。其变换的本质：对遥感图像实行线性变换，使多光谱空间的坐标系按一定规律进行旋转。</p><ol start="5"><li><p>多源信息复合<br> 1）信息复合的概念：<br> l 定义：信息复合指同一区域内遥感信息之间或遥感信息与非遥感信息之间的匹配复合。<br> l 内容：包括空间配准和内容复合<br> l 目的：突出有用的专题信息，消除或抑制无关的信息，改善目标识别的图像环境。<br> l 多种遥感信息各具有一定的空间分辨率、波谱分辨率与时间分辨率<br> l 信息复合:非多种信息源简单叠加，而是可得到原来几种单个信息所不能提供的新信息<br> 2）信息复合的发展<br> l 同种遥感信息多波段、多时相的信息复合<br> l 不同类型遥感数据的复合<br> l 遥感与非遥感信息的复合<br> 3）遥感信息的复合<br> 遥感信息复合包括:不同传感器的遥感数据和不同时相的遥感数据<br> l 复合方式的确定：根据目标空间分布、光谱反射特性及时相规律方面的特征选择不同的遥感图像；在空间分辨率、光谱分辨率和时间分辨率方面相互补充<br> ①不同传感器的遥感数据复合<br> 复合步骤：<br>配准<br> 先完成配准,使两幅图像所对应的地物吻合，分辨率一致。<br>复合<br> 彩色合成方法的效果比较明显应尽可能生成三幅新图像，分别赋予红、绿、蓝色，进行彩色合成<br> ②不同时相的遥感数据复合<br> 步骤：<br> 配准：<br> 直方图调整：图像亮度值趋于协调，便于比较。<br>复合：用来研究时间变化所引起的各种动态变化。采用的复合方法主要有：<br> l  彩色合成方法<br> l  差值方法<br> l  比值方法<br> 五. 遥感图像目视解译原理</p></li><li><p>遥感图像目视解译原理<br> 遥感图像解译（Imagery Interpretation）:是从遥感图像上获取目标地物信息的过程：<br> 目视解译：<br> 计算机解译：即遥感图像理解（Remote Sensing Imagery Understanding）<br> 1）遥感图像目标地物的识别特征<br> 目标地物特征：<br> l 色：颜色，色调、颜色和阴影等；<br> l 形：形状，形状、纹理、大小、图型；<br> l 位：空间位置，目标地物分布的空间位置、相关布局等；<br> 目标地物识别特征<br> 色调（tone）：全色遥感图像中从白到黑的密度比例叫色调（也叫灰度）。如海滩的砂砾色调标志是识别目标地物的基本依据，依据色调标志，可以区分出目标地物。<br>颜色（colour）：是彩色遥感图像中目标地物识别的基本标志。日常生活中目标地物的颜色:遥感图像中目标地物的颜色:地物在不同波段中反射或发射电磁辐射能量差异的综合反映。彩色遥感图像上的颜色:真\假彩色<br> 真彩色图像上地物颜色能真实反映实际地物颜色特征，符合人的认知习惯。<br> 目视判读前, 需了解图像采用哪些波段合成，每个波段分别被赋予何种颜色。<br> 阴影（shadow）：遥感图像上光束被地物遮挡而产生的地物的影子<br> 根据阴影形状、大小可判读物体的性质或高度。不同遥感影像中阴影的解译是不同的<br> 形状（shape）：目标地物在遥感图像上呈现的外部轮廓。<br> 遥感图像上目标地物形状:顶视平面图<br> 解译时须考虑遥感图像的成像方式。<br> 纹理（texture）：内部结构，指遥感图像中目标地物内部色调有规则变化造成的影像结构。如航空像片上农田呈现的条带状纹理。纹理可以作为区别地物属性的重要依据。<br> 2）目视解译的认知过程<br> 遥感图像的认知过程包括：<br> l 自下向上的信息获取、特征提取与识别证据积累过程<br> l 自上向下的特征匹配、提出假设与目标辨识过程。<br> ①自下而上过程：<br> 图像信息获取 → 特征提取 →识别证据选取<br> ②自上而下过程：<br> 特征匹配：指人脑利用记忆存储中的地物类型模式与地物特征匹配的过程。<br> 地物类型模式与目标地物全局特征进行相似性测量，判别其相容性或不相容性。</p></li><li><p>遥感图像目视解译基础<br> 1）遥感摄影像片的判读<br> ①常见的遥感扫描影像类型：<br> l MSS影像：多光谱扫描仪；<br> l TM图像：为专题绘图仪获取的图像；<br> l SPOT图像：具有较高的地面分辨率；<br> l 资源一号卫星CBERS影像<br> ②摄影像片的特点<br> 遥感摄影像片绝大部分为大中比例尺像片<br> 遥感摄影像片绝大部分采用中心投影方式成像<br> 从航空像片上看到的是地物的顶部轮廓<br> ③摄影像片的解译标志<br> 解译标志（又称判读标志）:<br> 解译标志分为直接判读标志和间接解译标志。<br> l 直接判读标志<br> 指能够直接反映和表现目标地物信息的遥感图像的各种特征包括遥感摄影像片的色调、色彩、大小、形状、阴影、纹理、图型。<br> l 间接解译标志<br> 指能够间接反映和表现目标地物信息的遥感图像的各种特征，借助它可以推断与某地物属性相关的其他现象。<br> 遥感摄影像片上常用到的间接解译标志：<br> 目标地物与其相关指示特征：<br> 地物与环境的关系：<br> 目标地物与成像时间的关系：<br> 2） 遥感扫描影像的判读<br> ①遥感扫描影像特征<br> l 宏观综合概括性强：<br> l 信息量丰富：<br> l 动态观测：<br> 扫描影像的判读遵循原则：<br> l “先图外、后图内”<br> l “先整体，后局部”<br> l “勤对比，多分析”<br> ②遥感扫描影像的主要解译方法</p></li><li><p>目视解译方法:<br> 指根据遥感影像目视解译标志和解译经验，识别目标地物的办法与技巧。<br>(1)直接判读法<br> 根据遥感影像目视判读直接标志，直接确定目标地物属性与范围的一种方法。<br> (2)对比分析法<br> 包括同类地物对比分析法、空间对比分析法和时相动态对比法。<br> l 同类地物对比分析法:在同一景遥感影像上，由已知地物推出未知目标地物的方法。<br> l 空间对比分析法:由已知熟悉影像区域为依据判读未知区域影像的一种方法。<br> l 时相动态对比法:利用同一地区不同时间成像的遥感影像加以对比分析，了解同一目<br> 标地物动态变化。<br>(3)信息复合法<br> 利用透明专题图或地形图与遥感图像重合，根据专题图或地形图提供的多种辅助信息，识别遥感图像上目标地物的方法。<br> (4)综合推理法<br> 综合考虑遥感图像多种解译特征，结合生活常识，分析、推断某种目标地物的方法。<br>(5)地理相关分析法<br> 根据地理环境中各种地理要素之间的相互依存，相互制约的关系，借助专业知识，分析推断某种地理要素性质、类型、状况与分布的方法。<br> 3）目视解译步骤<br> l 目视解译准备工作阶段<br> 明确解译任务与要求；<br> 收集与分析有关资料；<br> 选择合适波段与恰当时相的遥感影像。<br> l 初步解译与判读区的野外考察<br> l 室内详细判读<br> l 野外验证与补判<br> l 目视解译成果的转绘与制图<br> 六. 遥感数字图像计算机解译</p></li><li><p>遥感数字图像的计算机（自动识别）分类<br> 遥感图像计算机解译的主要目地是将遥感图像的地学信息获取发展为计算机支持下的遥感图像智能化识别，其最终目地是实现遥感图像理解。其基础工作就是遥感数字图像的分类。<br> 遥感图像的计算机分类方法包括监督分类和非监督分类。<br> l 监督分类：事先有类别的先验知识，根据先验知识选择训练样本，由训练样本得到分类准则。<br> 监督分类中常用的具体分类方法包括：<br> ①最小距离分类法：classifier）：用特征空间中的距离表示像元数据和分类类别特征的相似程度，在距离最小时（相似度最大）的类别上对像元数据进行分类的方法。<br> ②多级切割分类法：根据设定在各轴上的值域,分割多维特征空间的分类方法。<br> ③特征曲线窗口法：特征曲线：地物光谱特征参数构成的曲线。以特征曲线为中心取一个条带，构造一个窗口，凡是落在此窗口范围内的地物即被认为是一类，反之则不属于该类。<br> ④最大似然比分类法：求出像元数据对于各类别的似然度（likelihood），把该像元分到似然度最大的类别中去的方法。<br> l 非监督分类：事先没有类别的先验知识，纯粹根据图像数据的统计特征和点群分布情况，根据相似性程度自动进行归类，最后再确定每一类的地理属性。<br> 非监督分类的常用方法：<br> ①分级集群法：分级集群法采用“距离”评价每个像元在空间分布的相似程度，把它们的分布分割或者合并成不同的集群。每个集群的地理意义需要根据地面调查或者与已知类型的数据比较后方可确定。<br> ②动态聚类法：在初始状态给出图像粗糙的分类，然后基于一定原则在类别间重新组合样本，直到分类比较合理为止，这种聚类方法就是动态聚类。</p></li><li><p>智能化识别分类的发展趋势<br>1)提取遥感图像多种特征并综合利用这些特征进行识别。提取稳定、有效的特征是提高遥感图像自动解译精度的关键。遥感图像特征:图像色调、颜色、形状、大小、纹理、图型、阴影、位置和相关布局。<br>2）利用GIS数据减少自动解译中的不确定性<br>GIS专题数据库可以在计算机自动解译中发挥以下重要作用：<br>l 对遥感图像进行辐射改正，消除或降低地形差异的影响<br>l 作为解译的直接证据，增加遥感图像的信息量<br>l 作为解译的辅助证据，减少自动解译中的不确定性<br>l 作为解译结果的检验数据，降低误判率<br>3）建立适用于遥感图像自动解译的专家系统，提高自动解译的灵活性<br>从目前状况看，建立适用于遥感图像自动解译的专家系统，需要从以下方面开展工作：<br>l 建立解译知识库和背景知识库。<br>l 根据遥感图像解译的特点来构造专家系统。<br>4）模式识别与专家系统相结合<br>专家系统和模式识别方法相结合，可以发挥图像解译专家知识的指导作用，在一定程度上为模式识别提供经验性的知识，又可以利用数字遥感图像本身提供的特征，有助于提高计算机解译的灵活性。<br>概括说来，遥感图像计算机解译具有探索性强，涉及的技术领域广，技术难度大等特点，需要采用模式识别、遥感图像处理、地理信息系统与人工智能（包括专家系统和人工神经网络）等多种技术综合研究。</p></li></ol><h1 id="七-遥感技术应用"><a href="#七-遥感技术应用" class="headerlink" title="七. 遥感技术应用"></a>七. 遥感技术应用</h1><ol><li>资源调查与管理<br>1）水体遥感<br>水体遥感主要任务:通过遥感影像分析,获得水体的分布、泥沙、有机质等状况和水深、水温等要素的信息，对一个地区的水资源和水环境等作出评价，为水利、交通、航运及资源环境等部门提供决策服务。<br>①水体光谱特性<br>遥感器所接收到的辐射:水面反射光、悬浮物反射光、水底反射光和天空散射光。<br>②水体界限确定<br>水体反射率总体较低（4%～5%），并随波长的增大逐渐降低，0.6um处约2%～3%，过了0.75um，水体几乎成为全吸收体。在近红外的遥感影像:清澈的水体呈黑色。区分水陆界线，应选择近红外波段的影像。<br>③水体悬浮物的确定–泥沙<br>l 浑浊水体的反射波谱曲线整体高于清水随着悬浮泥沙浓度的增加，差别加大；<br>l 波谱反射峰值向长波方向移动（“红移”）。清水0.75um反射率接近零，而含有泥沙的<br>浑浊水0.93um反射率才接近于零；<br>④水体悬浮物的确定—叶绿素<br>水体叶绿素浓度增加，蓝光波段的反射率下降，绿光波段的反射率增高；<br>水面叶绿素和浮游生物浓度高时，近红外波段仍存在一定的反射率，该波段影像<br>中水体不呈黑色，而呈灰色甚至浅灰色<br>2）植被遥感<br>在高分辨率遥感影像上，不仅可以利用植物的光谱来区分植被类型，而且可以直接看到植物顶部和部分侧面的形状、阴影、群落结构等，可比较直接地确定乔木、灌木、草地等类型，还可以分出次一级的类型。<br>健康的绿色植物具有典型的光谱特征。植物生长状况发生变化，波谱曲线形态也会改变。<br>3）土壤遥感<br>通过遥感影像的解译，识别和划分出土壤类型，制作土壤图，分析土壤的分布规律，为改良土壤、合理利用土壤服务。<br>在地面植被稀少情况下，土壤的反射曲线与其机械组成和颜色密切相关。颜色浅的土壤具有较高的反射率，颜色较深的土壤反射率较低。在干燥条件下同样物质组成的细颗粒的土<br>壤，表面平滑且具有较高反射率，而较粗的颗粒具有相对较低的反射率。<br>土壤水的含量增加，会使反射率曲线平移下降，并有两个明显的水分吸收谷。当土壤水超过最大毛管持水量时，土壤的反射光谱不再降低。</li></ol><h1 id="一-遥感影像波段"><a href="#一-遥感影像波段" class="headerlink" title="一.遥感影像波段"></a>一.遥感影像波段</h1><h2 id="1-原理"><a href="#1-原理" class="headerlink" title="1.原理"></a>1.原理</h2><p>波段又称为波谱段或波谱带，在遥感技术中，通常把电磁波谱划分为大大小小的段落，大的成为波段区，如可见区、红外区等；中等的如近红外、远红外等；小的称为波段。</p><p>影像数据根据波段的多少可以分为单波段影像和多波段影像两种，单波段影像一般用黑白色的灰度图来描述，多波段常用RGB 合成象素值的彩色图来描述，就是将三个波段的数据分别通过红、绿、蓝三个通道加载，从而渲染出。</p><p>将多波段影像数据添加到地图中之后，可使用多波段栅格数据集中的任意三个可用波段的组合来创建 RGB 合成图。与仅处理一个波段相比，通过将多个波段共同显示为RGB 合成图通常可从数据集收集到更多信息。<br><img src="http://cdn.tianwen42.top/img/picgo/20210617213623.png" alt="在这里插入图片描述"><br>在具有多个波段的情况下，每个波段分别表示有传感器采集到的电磁光谱的一部分。波段可以表示电磁光谱的任何部分，其中包括非可见光谱范围，如红外区或紫外区。<br><img src="http://cdn.tianwen42.top/img/picgo/20210617213617.png" alt="在这里插入图片描述"><br>例如，卫星影像通常包含表示不同波长的多个波段，即从电磁光谱的紫外区到可见光区和红外区。例如，美国陆地资源卫星（landasat）影像的数据采集自电磁光谱的七个不同波段。波段1–7（包括波段 6 在内）表示来自可见光区、近红外区和中红外区的数据。波段 6从热红外区采集数据。<br>另一个多波段图像的示例是真彩色正射影像，该影像包含分别表示红光、绿光和蓝光的三个波段。<br><img src="http://cdn.tianwen42.top/img/picgo/20210617213626.png" alt="在这里插入图片描述"></p><h2 id="2-举例说明"><a href="#2-举例说明" class="headerlink" title="2.举例说明"></a>2.举例说明</h2><p>不同的波段组合突出的地物特征不同，以 TM影像的7个波段数据为例，说明常用的波段组合：</p><p>321<br>波段：即真彩色合成，3、2、1波段分别赋予红、绿、蓝色，获得自然彩色合成图像，图像的色彩与源地区或景物的实际色彩一致。适宜于浅海探测作图，同时，适用于非遥感应用专业人员使用。</p><p>432<br>波段：即标准假彩色合成，4、3、2波段分别赋予红、绿、蓝色，标准假彩色图像中的植被显示为红色，可突出体现植被特征，常应用于提取植被信息。在植被、农作物、土地利用和湿地分析方面，是最常用的波段组合。</p><p>453<br>波段：信息量最丰富的组合，在TM数据的7个波段光谱图像中，一般第5个波段包含的地物信息最丰富.采用4、5、3波段分别赋予红、绿、蓝色合成的图像，色彩反差明显，层次丰富，且图上各类地物的色彩显示规律与常规合成片相似，常用于目视解译，同时也应用于确定陆地和水体的边界。</p><p>741<br>波段：该波段组合图像具有兼容中红外、近红外、及可见光波段信息的优势，图像色彩丰富，层次感好，具有极为丰富的地质信息和地表环境信息，且干扰信息少，地址可解译程度高，各种构造形迹（褶皱及断裂）显示清楚，不同类型的岩石区边界清晰。</p><h1 id="二-TM影像各波段简介"><a href="#二-TM影像各波段简介" class="headerlink" title="二.TM影像各波段简介"></a>二.TM影像各波段简介</h1><h2 id="1-TM影像概述"><a href="#1-TM影像概述" class="headerlink" title="1.TM影像概述"></a>1.TM影像概述</h2><p>指美国陆地卫星（landsat）专题制图仪（thematic mapper）所获取的多波段扫描影像。分为7个波段。主要特点为具较高空间分辨率、波谱分辨率、极为丰富的信息量和较高定位精度。</p><p>TM影像有7个波段，以下是他们的波谱范围：</p><p>TM-1为0.45～0.52微米，蓝光波段；<br>   TM-2为0.52～0.60微米，绿光波段；<br>   TM-3为0.63～0.69微米，红光波段，以上3段为可见光波段；<br>   TM-4为0.76～0.90微米，为近红外波段；<br>   TM-5为1.55～1.75微米，中红外波段；<br>   TM-6为10.40～12.50微米，为热红外波段；<br>   TM-7为2.08～2.35微米，为远红外波段。</p><p>影像空间分辨率除热红外波段为120米外，其余均为30米，像幅185×185平方公里。单波段像元数为38023666（其中TM-6为2376479个）。一景TM影像总信息量为230兆字节，约相当于MSS影像的7倍。</p><p>因TM影像具较高空间分辨率、波谱分辨率、极为丰富的信息量和较高定位精度，成为20世纪80年代中后期得到世界各国广泛应用的重要的地球资源与环境遥感数据源。能满足有关农、林、水、土、地质、地理、测绘、区域规划、环境监测等专题分析和编制1∶10万或更小比例尺专题图，修测中大比例尺地图的要求。</p><h2 id="2-各波段影像特征"><a href="#2-各波段影像特征" class="headerlink" title="2.各波段影像特征"></a>2.各波段影像特征</h2><p>TM1为0.45～0.52微米的蓝波段，该波段位于水体衰减系数最小的部位，对水体的穿透力最大，用于判别水深，研究浅海水下地形、水体浑浊度等，进行水系及浅海水域制图；</p><p>TM2为0.52～0.60微米的绿波段，该波段位于绿色植物的反射峰附近，对健康茂盛植物反射敏感，可以识别植物类别和评价植物生产力，对水体具有一定的穿透力，可反映水下地形、沙洲、沿岸沙坝等特征；</p><p>TM3为0.63～0.69微米的红波段，该波段位于叶绿素的主要吸收带，可用于区分植物类型、覆盖度、判断植物生长状况等，此外该波段对裸露地表、植被、岩性、地层、构造、地貌、水文等特征均可提供丰富的植物信息；</p><p>TM4为0.76～0.90微米的近红外波段，该波段位于植物的高反射区，反映了大量的植物信息，多用于植物的识别、分类，同时它也位于水体的强吸收区，用于勾绘水体边界，识别与水有关的地质构造、地貌等；</p><p>TM5为1.55～1.75微米的中红外波段，该波段位于两个水体吸收带之间，对植物和土壤水分含量敏感，从而提高了区分作物的能力，信息量大，应用率较高；</p><p>TM6为10.40～12.50微米的热红外波段，该波段对地物热量辐射敏感，可以根据辐射响应的差别区分农林覆盖长势，差别表层湿度，水体岩石，以及监测与人类活动有关的热特征,进行热制图；</p><p>TM7为2.08～2.35微米的为远红外波段，是专为地质调查追加的波段，处于水的强吸收带，水体呈黑色，可用于区分主要岩石类型,岩石的热蚀度，探测与交代岩石有关的粘土矿物。</p><h2 id="3-波段组合"><a href="#3-波段组合" class="headerlink" title="3.波段组合"></a>3.波段组合</h2><p>1、TM321（RGB）：均是可见光波段，合成结果接近自然色彩。对浅水透视效果好，可用于监测水体的浊度、含沙量、水体沉淀物质形成的絮状物、水底地形。一般而言：深水深兰色；浅水浅兰色；水体悬浮物是絮状影象；健康植被绿色；土壤棕色或褐色。可用于水库、河口及海岸带研究，但对水陆分界的划分不合适。这种RGB组合模拟出一副自然色的图象，有时用于海岸线的研究和烟柱的探测。</p><p>2、TM432（RGB）：标准假彩色合成，获得图像植被成红色，由于突出表现了植被的特征，应用十分的广泛，而被称为标准假彩色。<br>   举例：卫星遥感图像示蓝藻暴发情况<br>   我们先看一看蓝藻爆发时遥感监测机理。蓝藻暴发时绿色的藻类生物体拌随着白色的泡沫状污染物聚集于水体表面，蓝藻覆盖区的光谱特征与周围湖面有明显差异。由于所含高叶绿素A的作用，蓝藻区在LandsatTM2波段具有较高的反射率，在TM3波段反射率略降但仍比湖水高，在TM4波段反射率达到最大。因此，在TM4（红）、3（绿）、2（蓝）假彩色合成图像上，蓝藻区呈绯红色，与周围深蓝色、蓝黑色湖水有明显区别。此外，蓝藻暴发聚集受湖流、风向的影响，呈条带延伸，在TM图像上呈条带状结构和絮状纹理，与周围的湖水面也有明显不同。</p><p>3、TM451（RGB）：信息量最丰富的组合，TM图像的光波信息具有3～4维结构，其物理含义相当于亮度、绿度、热度和湿度。在TM7个波段光谱图像中，一般第5个波段包含的地物信息最丰富。3个可见光波段（即第1、2、3波段）之间，两个中红外波段（即第4、7波段）之间相关性很高，表明这些波段的信息中有相当大的重复性或者冗余性。第4、6波段较特殊，尤其是第4波段与其他波段的相关性得很低，表明这个波段信息有很大的独立性。计算各种组合的熵值的结果表明，由一个可见光波段、一个中红外波段及第4波段组合而成的彩色合成图像一般具有最丰富的地物信息，其中又常以4，5，3或4，5，1波段的组合为最佳。第7波段只是在探测森林火灾、岩矿蚀变带及土壤粘土矿物类型等方面有特殊的作用。最佳波段组合选出后，要想得到最佳彩色合成图像，还必须考虑赋色问题。人眼最敏感的颜色是绿色，其次是红色、蓝色。因此，应将绿色赋予方差最大的波段。按此原则，采取4、5、3波段分别赋红、绿、蓝色合成的图像，色彩反差明显，层次丰富，而且各类地物的色彩显示规律与常规合成片相似，符合过去常规片的目视判读习惯。例如把4、5两波段的赋色对调一下，即5、4、3 分别赋予红、绿、蓝色，则获得近似自然彩色合成图像，适合于非遥感应用专业人员使用。</p><p>4、TM741（RGB）：波段组合图像具有兼容中红外、近红外及可见光波段信息的优势，图面色彩丰富，层次感好，具有极为丰富的地质信息和地表环境信息；而且清晰度高，干扰信息少，地质可解译程度高，各种构造形迹（褶皱及断裂）显示清楚，不同类型的岩石区边界清晰，岩石地层单元的边界、特殊岩性的展布以及火山机构也显示清楚。</p><p>5、TM742（RGB）：1992年，完成了桂东南金银矿成矿区遥感地质综合解译，利用1：10万TM742假彩色合成片进行解译，共解译出线性构造1615条，环形影像481处, 并在总结了构造蚀变岩型、石英脉型、火山岩型典型矿床的遥感影像特征及成矿模式的基础上，对全区进厅成矿预测，圈定金银A类成矿远景区2处，B类 4处，C类5 处。为该区优选找矿靶区提供遥感依据。</p><p>6、TM743（RGB）：我国利用美国的陆地卫星专题制图仪图像成功地监测了大兴安岭林火及灾后变化。这是因为TM7波段（2.08-2.35微米）对温度变化敏感；TM4、TM3波段则分别属于红外光、红光区，能反映植被的最佳波段，并有减少烟雾影响的功能；同时TM7、TM4、TM3（分别赋予红、绿、蓝色）的彩色合成图的色调接近自然彩色，故可通过 TM743彩色合成图的分析来指挥林火蔓延与控制和灾后林木的恢复状况。</p><p>7、TM754（RGB）：对不同时期湖泊水位的变化，也可采用不同波段，如用陆地卫星MSS7，MSS5，MSS4合成的标准假彩色图像中的蓝色、深蓝色等不同层次的颜色得以区别。从而可用作分析湖泊水位变化的地理规律。</p><p>8、TM541（RGB）：XX开发区砂石矿遥感调查是通过对陆地卫星TM最佳波段组fefee7合的选择（TM5、TM4、 TM1）以及航空、航天多种遥感资料的解译分析进行的，在初步解译查明调查区第四系地貌。例如把4、5两波段的赋色对调一下，即5、4、3分别赋予红、绿、蓝色，则获得近似自然彩色合成图像，适合于非遥感应用专业人员使用。</p><p>9、TM543（RGB）：波段选取及主成份分析　我们的研究采用1995年8月2日的TM数据。对于屏幕显示和屏幕图象分析，选用信息量最为丰富的5、4、3波段组合配以红、绿、兰三种颜色生成假彩色合成图像，这个组合的合成图像不仅类似于自然色，较为符号人们的视觉习惯，而且由于信息量丰富，能充分显示各种地物影像特征的差别，便于训练场地的选取，可以保证训练场地的准确性；对于计算机自动识别分类，采用主成分分析（K-L变换）进行数据压缩，形成三个组分的图像数据，用于自动识别分类。该项工作是采用以遥感图像解译为主结合地质、物化探资料进行研究的综合方法。解译为目视解译，解译的遥感图像有：以1984年3月成像经处理放大为1：5万卫星TM假彩色片（5 、4、3波段合成）和1979年7月拍摄的1：1.6万黑白航片为主要工作片种；采用1986年11月的1：10万TM假彩色片（7、4、2波段合成）为参考片种。</p><p>10、TM453（RGB）：本研究遥感信息源是中国科学院卫星遥感地面接收站于1995年10月接收美国MSS卫星遥感TM波段4(红)、波段5(绿)、波段3(蓝)CCT磁带数据制作的1∶10万和1∶5 万假彩色合成卫星影像图。图上山地、丘陵、平原台地等喀斯特地貌景观及各类用地影像特征分异清晰。成像时期晚稻接近收获，且稻田中不存积水，因此耕地类型中的水田色调呈粉红色；旱地由于作物大多收获，且土壤水分少而呈灰白色；菜地则由于蔬菜长势好，色调鲜亮并呈猩红色。园地色调呈浅褐色，且地块规则整齐、轮廓清晰。林地中乔木林色调呈深褐色，而分布于喀斯特山地丘陵等地区的灌丛则呈黄到黄褐色。牧草地大多呈黄绿色调。建设用地中的城镇呈蓝色；公路呈线状，色调灰白；铁路呈线条状，色调为浅蓝；机场跑道为蓝色直线，背景草地呈蓝绿色；在建新机场建设场地为白色长方形；备用旧机场为白色色调，外形轮廓清晰、较规则。水库和河流则都呈深蓝色调。采取4、5、3波段分别赋红、绿、蓝色合成的图像，色彩反差明显，层次丰富，而且各类地物的色彩显示规律与常规合成片相似，符合过去常规片的目视判读习惯。472：在采用TM4、7、2波段假彩色合成和 1:4 计算机插值放大技术方面，在制作 1:5万TM影像图并成 1:5万工程地质图、塌岸发展速率的定量监测以及在单张航片上测算岩 (断) 层产状等方面，均有独到之处。</p><h2 id="4-类型提取"><a href="#4-类型提取" class="headerlink" title="4.类型提取"></a>4.类型提取</h2><p>1.城市与乡镇的提取:TM1+TM7+TM3+TM5+TM6+TM2-TM4<br>2.乡镇与村落:TM1+TM2+TM3+TM6+TM7-TM4-TM5<br>3.河流的提取:TM5+TM6+TM7-TM1-TM2-TM4<br>4.道路的提取：TM6-(TM1+TM2+TM3+TM4+TM5+TM7)</p><h2 id="5-光谱差异"><a href="#5-光谱差异" class="headerlink" title="5.光谱差异"></a>5.光谱差异</h2><p>TM1居民地与河流菜地不易分；<br>TM2居民地与河流菜地不易；<br>TM3乡村与菜地不易分；<br>TM4农田与道路不易分，乡镇、道路、河滩易混；<br>TM5县城与农田不易分；<br>TM6村庄与河流易混。</p><h1 id="三-遥感图像——多波段数据存储的方式"><a href="#三-遥感图像——多波段数据存储的方式" class="headerlink" title="三.遥感图像——多波段数据存储的方式"></a>三.遥感图像——多波段数据存储的方式</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python">转载自：https<span class="token punctuation">:</span><span class="token operator">//</span>blog<span class="token punctuation">.</span>csdn<span class="token punctuation">.</span>net<span class="token operator">/</span>chaolei3<span class="token operator">/</span>article<span class="token operator">/</span>details<span class="token operator">/</span><span class="token number">79589438</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>首先，我们贴上一幅遥感3通道（3个波段）的图像，来看其在计算机中是如何表示的。然后再介绍一下多波段数据的几种存储方式。<br><img src="http://cdn.tianwen42.top/img/picgo/20210617213636.png" alt="在这里插入图片描述"><br>用matlab的筒子一定很清楚这种表示方法，也就是一个波段对应一个矩阵。</p><p>多波段数据的存储方式主要有3种：</p><ol><li>逐波段存储BSQ</li><li>逐行存储BIL</li><li>逐像元存储BIP</li></ol><h2 id="1-逐波段存储BSQ"><a href="#1-逐波段存储BSQ" class="headerlink" title="1.逐波段存储BSQ"></a>1.逐波段存储BSQ</h2><p>逐波段存储就是将一个波段的数据存储在一起，这样的话对于要一次性读取一个波段的操作较好，可是要是每次操作都涉及到几个波段的数据，这样的存储方法就对内存的占用比较大。也就是说逐波段存储对处理空间信息有利。示例图如下：<br><img src="http://cdn.tianwen42.top/img/picgo/20210617213640.png" alt="在这里插入图片描述"></p><h2 id="2-逐像元存储BIP"><a href="#2-逐像元存储BIP" class="headerlink" title="2.逐像元存储BIP"></a>2.逐像元存储BIP</h2><p>逐像元存储将一个像元的数据先存储起来，然后再存储其他像元的数据，也就是说同一个像元的光谱信息被存在了一个连续的地址，这样对于操作像元光谱信息频繁的操作来说十分方便快捷。<br><img src="http://cdn.tianwen42.top/img/picgo/20210617213644.png" alt="在这里插入图片描述"></p><h2 id="3-逐行存储BIL"><a href="#3-逐行存储BIL" class="headerlink" title="3.逐行存储BIL"></a>3.逐行存储BIL</h2><p>逐行存储是一种介于逐波段存储和逐像元存储的方法，它将各通道的每一行存储在一起，具体来说，就是存好了1通道的第1行，接着2通道的第1行，然后3通道的第1行，……，当第1行都存储完毕就去存储第2行的数据。<br><img src="http://cdn.tianwen42.top/img/picgo/20210617213647.png" alt="在这里插入图片描述"></p><h2 id="4-总结方法的优劣"><a href="#4-总结方法的优劣" class="headerlink" title="4.总结方法的优劣"></a>4.总结方法的优劣</h2><p>对于上面的方法做一个总结：<br>逐波段存储（BSQ）有<em><strong>利于图像空间分布信息的显示与处理。</strong></em><br>逐像元存储（BIP）有<em><strong>利于图像元光谱信息的显示与处理。</strong></em><br>逐行存储（BIL）<em><strong>兼顾了图像空间分布信息与像元光谱信息的显示与处理。</strong></em></p><h1 id="四-USGS官网"><a href="#四-USGS官网" class="headerlink" title="四.USGS官网"></a>四.USGS官网</h1><h2 id="What-are-the-band-designations-for-the-Landsat-satellites？"><a href="#What-are-the-band-designations-for-the-Landsat-satellites？" class="headerlink" title="What are the band designations for the Landsat satellites？"></a>What are the band designations for the Landsat satellites？</h2><h1 id="五-问题"><a href="#五-问题" class="headerlink" title="五.问题"></a>五.问题</h1><h3 id="1-摄影成像和扫描成像的区别"><a href="#1-摄影成像和扫描成像的区别" class="headerlink" title="1.摄影成像和扫描成像的区别"></a>1.摄影成像和扫描成像的区别</h3><p>微波，扫描仪灯头射出来的光和射入镜头的光都可以理解为电磁波，所以从本质上区别他们，需要从载体来看。</p><p>微波成像可以理解为电磁波的回返打到荧光屏上（原理类似声纳）由浅到深形成阵列，那么一个实体性的“荧屏”是它的载体。扫描原理是通过光线照射将被扫描物体颜色，对比度以数字形式发送到处理器，这是线性的，在处理器中通过计算重新组合，那么“处理器”就是它的载体。</p><p>摄影则与二者不同。摄影是被动的接受入射光线投射到CMOS上</p><h4 id="扫描成像"><a href="#扫描成像" class="headerlink" title="扫描成像"></a>扫描成像</h4><blockquote><p>（1）电子扫描成像：</p><p>电视接收机天线接收到调制过的视频信号，经变频、中放、检波、视放，由显像管的电子枪发射出随视频信号而变化的电子束，电子束轰击荧光屏，就会把高速电子的动能转变为光能，在屏幕上出现亮点，而受高速电子轰击打出的二次电子被栅极捕获。电子束在荧光屏上迅速扫描，由于荧光屏的余晖和人视觉暂留，因此可以看到整幅画面，还可将画面用照相机翻拍下来，成为照片。</p></blockquote><blockquote><p>（2）光学机械扫描：</p><p>机械扫描成像使用的扫描系统多为抛物面聚焦系统—卡塞格伦光学系统，它将地物的电磁辐射聚焦到探测器。</p><p>光学扫描系统的<a href="https://baike.baidu.com/item/%E7%9E%AC%E6%97%B6%E8%A7%86%E5%9C%BA%E8%A7%92/5289935">瞬时视场角</a>很小，扫描镜只收集点的辐射能量，利用本身的旋转或摆动形成一维线性扫描，加上平台移动，实现对地物平面扫描，达到收集区域地物电磁辐射的目的。</p></blockquote><blockquote><p>（3）固体扫描成像 ：通过遥感平台的运动对目标地物进行扫描的一种成像方式。 常用的探测元件是电子藕合器件CCD是一种用电荷量表示信号大小，用耦合方式传输信号的探测元件。具有感受波谱范围宽、畸变小、体积小、重量轻、系统噪声低、灵敏度高、动耗小、寿命长、可靠性高等一系列优点</p></blockquote><p><em><strong>微波成像即微波遥感方式，摄影、扫描成像即可见光遥感</strong></em><br><em><strong>可见光遥感属于光学遥感，可见光遥感使用光学技术，微波遥感则是采用无线电技术。</strong></em><br><em><strong>1.探测波段：可见光遥感探测波段范围0.38-0.76um；微波遥感探测波段范围通常大于1mm，但其中的激光雷达波段范围在可见光与红外波段。</strong></em><br><em><strong>2.可见光遥感只能够采集地表信息，而微波却具有穿透性，能够探测地表以下一定深度范围内的信息。</strong></em><br><em><strong>3.可见光遥感对大气状况有要求，天气因素影响大；微波遥感则能够实现全天时、全天候探测，具有穿透云雾的能力。</strong></em></p>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 遥感 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的大学</title>
      <link href="/posts/3bdf9979.html"/>
      <url>/posts/3bdf9979.html</url>
      
        <content type="html"><![CDATA[<h2 id="不断发问"><a href="#不断发问" class="headerlink" title="不断发问"></a>不断发问</h2><p>走进大学，时不时问一问自己</p><blockquote><p>诸位在校，有两个问题应该自己问问，第一，到浙大来做什么？第二，将来毕业后要做什么样的人？</p><p>科学的方法，公正的态度，果断的决心</p></blockquote><p>我们的心中一定另有答案，或清楚或模糊。</p><p>每个人都应该想一想才不会虚度自己在大学中的时光。</p><h2 id="关于学习"><a href="#关于学习" class="headerlink" title="关于学习"></a>关于学习</h2><blockquote><p>骐骥一跃，不能十步。驽马十驾，功在不舍。</p></blockquote><p>我肯定不是骐骥了，自认不是一个聪明的人，所以我花的时间多，当我一进入大学的时候，所有的老师都告诉我要好好学习，不要逃课，不要挂科，我也的的确确这样做了，但是这样的学习方式真的正确嘛？打一个问号。而且大学里的考试也就那样，说到底，还是看个人的要求。</p><p>喜欢去图书馆借各种各样的书，有时候自己的卡借满了，还拿同学的卡去借书，文学，历史，摄影，传记，计算机，专业书，总之就是什么都借书，虽然有些来不及看就超期了，但仍然热衷于借书，很多人不愿意去图书馆，但换一个角度想想，不能白交学费了不是，白嫖不香嘛?</p><p>我越发体会到术业有专攻的意义所在，人是没有精力抓住所有东西的，我深知人与人之间的差距，因为我老是犯错误，所有问题多的不得了，但似乎也让我遇事总是多问一句为什么，除了面子上挂不住，其他的好像也不坏。  </p><p>我尝试参加数学建模比赛，说实话，好难，太综合了，就像是到了新的领域一样，我才明白综合运用各种能力的重要性，不可能所有的能力都精通，我想读研的意义也于此，建模对学习综合性的知识意义很大，论文，编程，数学，这都是极为重要的，虽然这次做的不咋样，我想下次我还是会去挑战，如果你现在还不知道自己要干什么，如果你有一个兴趣爱好，坚持去做。</p><p>要敢于向权威挑战，不懂就问，有什么啊，干就完了！</p><h2 id="关于专业"><a href="#关于专业" class="headerlink" title="关于专业"></a>关于专业</h2><p>我试着去理解和体会这个专业，要我说，地理信息科学这个专业像<strong>仓库管理员</strong>，为各个领域的提供地理相关的数据，你就处理好给人家便是了，人家也不需要管这些细节，说穿了，就是数据外包，服务外包。</p><p>我觉得我所在的专业说穿就这几类工作，建模(写报告论文)，开发，处理数据(80%的人从事工作)。长路漫漫，其修远兮。</p><p>任何专业的学习都是选一方面去深入理解。</p><p>在百无聊赖的某一天，昏昏沉沉地走在路上，我想着关于意义云云的事，看着路旁慵懒的小猫咪，我突然有了灵感，计算机世界的意义，在于助力实体。仿佛一切都拨云见日，找到了答案。</p><h2 id="关于生活"><a href="#关于生活" class="headerlink" title="关于生活"></a>关于生活</h2><p>时不时会出去学校玩一玩的，吃一吃美食，和同学逛一逛南京，看话剧，五一去了秦淮河吃烧烤，在秦淮河边看来往的游船，还吃了烤鸭(虽然不太好吃，肉有点干，柴了，没有南京大牌档的烤鸭好吃😋)，去了江苏大剧院听音乐会，去了鱼嘴看日落(虽然到的时候都是晚上了)，还去了玄武湖的相亲角(长见识了)，这个还是比较happy的。</p><img src="https://yanglin42.oss-cn-hangzhou.aliyuncs.com/img/picgo/image-20210505225222142.png" alt="image-20210505225222142" style="zoom:12%;" /><img src="https://yanglin42.oss-cn-hangzhou.aliyuncs.com/img/picgo/image-20210505225102055.png" alt="image-20210505225102055" style="zoom: 25%;" /><img src="https://yanglin42.oss-cn-hangzhou.aliyuncs.com/img/picgo/image-20210505225254141.png" alt="image-20210505225254141" style="zoom:12%;" /><p>想一想，时间过得也非常快，可能是经历的疫情的原因，大学四年，疫情占3年。<br>我是个热衷于记录的人，记录一切，从初中开始记日记，到现在已经很久了，为此我还专门建了一个网站，买了一个十年期限的域名用来记录自己走过的路程，<a href="https://www.foreverblog.cn/">十年之约 </a>到时候也可以安排上，这也算是提前学了web设计这门课程了，从服务器购买到搭建网站，也算触类旁通了一丢丢计算机知识，话说我的计算机考试还没有考，之前忘记报名了，今年6月份的又忘记报名了，气死人了😤，给你机会你不中用啊，我觉得这些是有意义的，虽然现在也不知道这些是否值得，但是，这完全是出于兴趣啊！ </p><h2 id="关于爱情"><a href="#关于爱情" class="headerlink" title="关于爱情"></a>关于爱情</h2><p>对了，很重要的一点，大学得找个女朋友，谈一场恋爱，我妈都催我找女朋友了，在我跟前旁敲侧击或者给我推送微信，但我偏不加，我有啥办法呀，不知道咋回事，在这个女生这么多的学校找个女朋友咋就这么难呢？不知道为什么，问我问题的女生还挺多的，但就是找不到女朋友，有女生追过，但感觉不合适，最后拒了，可能木木是真的木，会不到人家的意，再不抓紧谈恋爱都要毕业了，也曾努力过，也曾追求过，但人有喜欢的人了啊，怎敢奢求太多呢，但爱情是两个人的游戏，双向的奔赴才有意义，急不得急不得，真是没救了！我仍对爱情保持热烈的向往，等待一个人！如果你遇到了一个纯粹的人，请抓住她。</p><h2 id="关于未来"><a href="#关于未来" class="headerlink" title="关于未来"></a>关于未来</h2><p>时间过得非常快啊，我感觉大学的时间不多了，今日见一东南大学的老师在群里，算是网友，还挺有意思的，估计是个工科教授，说话带有工科特有的严谨与务实，我觉得有些话说的很好啊，他说大学之学习掌握学习方法，遇到问题，知道怎么找入口，才是关键，他大呼现在的论文灌水，更应该重教学重教材，我欣赏他的想法，转眼间就快大三了，想来明年12月就到我考研了，我想我是会考研的，我现在就知道数学的重要性，所以我现在的事就是搞定考研要考的三大数学，高数，线代，统计，虽然很多人只是把这些当一门课程来学，但我的目标不一样，要求自然高一些，<del>暂且定一个目标，我觉得南师大不错，地理信息系统专业很强，深圳大学也不错，我逢人就推荐考深圳大学-智慧城市，活脱脱的像个商人推销商品，但是深大考的是综合测量学，不考编程，偏向城市规划这块，下属建筑学院，而且听说初试刚过线，但复试非常高，不比南师大容易，</del>我挺喜欢武汉这座城市的，想着考个武汉的学校，对南京就一般，也想过跨专业考研，总之先走一步看一步吧，考数1+英1+408，开卷！</p><p>大学不是象牙塔，列位请搞清楚这一点，这是一个大学生，一个成年人应该有的觉悟，我看着这眼前的一切，我在里面，也在外面，不要滥用你的善良，即使这个世界需要善良，这并非劝各位不心存善念，成为一个好人固然很容易，但我想说的是，请小心使用你的善良，刚入大学时，听乐经良老师的话还不是很明白，一语成谶，好的坏的都会进入校园，看清这个世界，然后接受它。</p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>请保持一颗赤子之心，这是很重要的事情</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ Primer笔记</title>
      <link href="/posts/e0ce.html"/>
      <url>/posts/e0ce.html</url>
      
        <content type="html"><![CDATA[<h2 id="基础篇"><a href="#基础篇" class="headerlink" title="基础篇"></a>基础篇</h2><h3 id="namespce"><a href="#namespce" class="headerlink" title="namespce"></a>namespce</h3><p>定义和使用</p><p>同一命名空间不可重名，可以是分散的</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;using namespace std;namespace A&#123;    int i&#x3D;1,j&#x3D;2;&#125;namespace A&#123;    int k&#x3D;3;&#125;namespace B&#123;    int i&#x3D;4,j&#x3D;5,k&#x3D;6;&#125;int foo()&#123;    std::cout&lt;&lt;&quot;namespace A:&quot;&lt;&lt;A::i&lt;&lt;A::j&lt;&lt;A::k&lt;&lt;std::endl;    std::cout&lt;&lt;&quot;namespace B:&quot;&lt;&lt;B::i&lt;&lt;B::j&lt;&lt;B::k&lt;&lt;std::endl;    return A::i;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="命名空间别名"><a href="#命名空间别名" class="headerlink" title="命名空间别名"></a>命名空间别名</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">namespace my_namepace_test_practice&#123;&#125;namespace MNTP&#x3D;my_namepace_test_practice;namespace NSPD&#x3D;nspath::nsdir;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h4><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">using namespace std;using std::cout;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>接收类类型形参的函数，以及与类本身定义在同一命名空间的函数，在用类类型对象作为实参的时候是可见的。</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">using namespace std;std::string sgetline(std::cin,s)   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="字符"><a href="#字符" class="headerlink" title="字符"></a>字符</h3><blockquote><p>strcpy(str1,str2)        strncpy(str1,str2,n)    &#x2F;&#x2F;复制</p><p>strcat(str1,str2)        strncat(str1,str2,4)    &#x2F;&#x2F;连接</p><p>strcmp(str1,str2)    &#x2F;&#x2F;比较</p><p>strlen(str)    &#x2F;&#x2F;长度</p><p>atof(str)    &#x2F;&#x2F;转浮点数</p><p>atoi(str)    &#x2F;&#x2F;转整形</p></blockquote><p>字符对象</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">string str1(&quot;Yang&quot;);std::cout&lt;&lt;str1.length();std::cout&lt;&lt;str1.atoi();std::cout&lt;&lt;str1.c_str();&#x2F;&#x2F;转换为c风格，返回指针std::cout&lt;&lt;str1.empty();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>指针和字符</p><blockquote><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">char s[100]&#x3D;&quot;C Language&quot;;char*p2;p2&#x3D;s;char *p1&#x3D;&quot;C Language&quot;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这是等价的</p></blockquote><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">char *p&#x3D;&quot;C Language&quot;;std::cout&lt;&lt;p&lt;&lt;std::endl;            &#x2F;&#x2F;C Languagestd::cout&lt;&lt;p+2&lt;&lt;std::endl;          &#x2F;&#x2F;Languagestd::cout&lt;&lt;p[7]&lt;&lt;std::endl;        &#x2F;&#x2F;astd::cout&lt;&lt;&amp;p[7]&lt;&lt;std::endl;        &#x2F;&#x2F;age<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>遍历字符串</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">while (*p!&#x3D;&#39;\0&#39;) cout&lt;&lt;*p++;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="友元"><a href="#友元" class="headerlink" title="友元"></a>友元</h3><h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h3><h2 id="进阶篇"><a href="#进阶篇" class="headerlink" title="进阶篇"></a>进阶篇</h2><h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><blockquote><ol><li>普通指针</li><li><a href="####%E6%8C%87%E5%90%91const%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%8C%87%E9%92%88">指向 const 对象的指针</a></li><li><a href="####%E6%8C%87%E5%90%91%E9%9D%9Econst%E5%AF%B9%E8%B1%A1%E7%9A%84const%E6%8C%87%E9%92%88">指向 非const 对象的 const 指针</a></li><li><a href="####%E6%8C%87%E5%90%91const%E5%AF%B9%E8%B1%A1%E7%9A%84const%E6%8C%87%E9%92%88">指向 const 对象的 const 指针</a></li></ol></blockquote><p>首先区分引用变量与指针的区别</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int * ptr;    &#x2F;&#x2F; 声明指针变量ptrptr &#x3D; &amp;var;   &#x2F;&#x2F; 先使用 &amp; 运算符获取变量var的地址，再把该地址赋值给指针变量ptrint ** pptr;  &#x2F;&#x2F; 声明二级指针变量pptrpptr &#x3D; &amp;ptr;  &#x2F;&#x2F; 先使用 &amp; 运算符获取变量ptr的地址，再把该地址赋值给二级指针变量pptrint &amp; ref1 &#x3D; var;   &#x2F;&#x2F; 声明引用变量ref1, ref1是变量var的别名(引用必须在创建时被初始化)int &amp; ref2 &#x3D; *ptr<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://cdn.tianwen42.top/img/picgo/image-20211104115112626.png" alt="image-20211104115112626"></p><blockquote><p>&amp;*<em>p    &#x2F;&#x2F;指针的地址&amp;</em> *p&#x3D;p&#x3D;&amp;a</p><p>*&amp;var    &#x2F;&#x2F;var的数值 *&amp;var&#x3D;var&#x3D; *p</p></blockquote><p><img src="http://cdn.tianwen42.top/img/picgo/image-20211104153537630.png" alt="image-20211104153537630"></p><h4 id="指向const对象的指针"><a href="#指向const对象的指针" class="headerlink" title="指向const对象的指针"></a>指向const对象的指针</h4><blockquote><p>无法改变指向对象的值，但可以改变指向</p></blockquote><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">const int num&#x3D;1;const int *p1;        &#x2F;&#x2F;不允许通过指针来改变对象-&gt;*p是只读的p1&#x3D;&amp;num;*p1&#x3D;2;                  &#x2F;&#x2F;错误int *p2&#x3D;&amp;num;           &#x2F;&#x2F;错误,p2只能指向的是非const对象const int *p3&#x3D;&amp;num;     &#x2F;&#x2F;正确<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>作用</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int foo(const int *p)&#123;    &#x2F;&#x2F;process    return 0;&#125;int main()&#123;    int a&#x3D;0;    foo(&amp;a);    &#x2F;&#x2F;无法改变a值    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="指向非const对象的const指针"><a href="#指向非const对象的const指针" class="headerlink" title="指向非const对象的const指针"></a>指向非const对象的const指针</h4><blockquote><p>无法改变指向，只能指向唯一对象，但可以间接引用改变对象值</p></blockquote><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int main()&#123;    int a&#x3D;1,b&#x3D;2;    int * const pc&#x3D;&amp;a;    pc &#x3D; &amp;b;    &#x2F;&#x2F;错误,pc只读,不能赋值    pc&#x3D;pc;      &#x2F;&#x2F;错误,pc只读    pc++;       &#x2F;&#x2F;错误,pc只读,不能运算    *pc&#x3D;100;    &#x2F;&#x2F;正确    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="指向const对象的const指针"><a href="#指向const对象的const指针" class="headerlink" title="指向const对象的const指针"></a>指向const对象的const指针</h4><blockquote><p>无法改变指向，也无法改变值</p></blockquote><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">const int a&#x3D;1,b&#x3D;2;const int * const pc&#x3D;&amp;a;*pc&#x3D;100;&#x2F;&#x2F;错误，指向const对象的const指针无法修改值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h3><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><h3 id="IO"><a href="#IO" class="headerlink" title="IO"></a>IO</h3><h2 id="高级篇"><a href="#高级篇" class="headerlink" title="高级篇"></a>高级篇</h2><h3 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h3><h2 id="面向对象概述"><a href="#面向对象概述" class="headerlink" title="面向对象概述"></a>面向对象概述</h2><h3 id="三大特性"><a href="#三大特性" class="headerlink" title="三大特性"></a>三大特性</h3><h4 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h4><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h4><h3 id="类的构造与析构"><a href="#类的构造与析构" class="headerlink" title="类的构造与析构"></a>类的构造与析构</h3><h2 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h2>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构笔记</title>
      <link href="/posts/928debf2.html"/>
      <url>/posts/928debf2.html</url>
      
        <content type="html"><![CDATA[<p>数据结构课程复习</p><h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><h2 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">int</span> zhengshu<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">int</span> <span class="token operator">*</span>zhengshuzhizhen<span class="token punctuation">;</span><span class="token keyword">int</span> x<span class="token punctuation">;</span>zhengshu x<span class="token punctuation">;</span><span class="token comment">//等价</span><span class="token keyword">int</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>zhengshuzhizhen p<span class="token punctuation">;</span><span class="token comment">//等价</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">LNode</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">LNode</span> <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>LNode<span class="token punctuation">,</span><span class="token operator">*</span>LinkList<span class="token punctuation">;</span><span class="token comment">//等价</span><span class="token keyword">struct</span> <span class="token class-name">LNode</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> data<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">LNode</span> <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">LNode</span> LNode<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">LNode</span> <span class="token operator">*</span>LinkList<span class="token punctuation">;</span><span class="token comment">//等价</span>LNode <span class="token operator">*</span>L<span class="token punctuation">;</span>LinkList L<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="双链表"><a href="#双链表" class="headerlink" title="双链表"></a>双链表</h2><h1 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h1><h1 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h1><h1 id="堆heap"><a href="#堆heap" class="headerlink" title="堆heap"></a>堆heap</h1><h1 id="树tree"><a href="#树tree" class="headerlink" title="树tree"></a>树tree</h1><h2 id="平衡二叉树（AVL）哈曼夫树"><a href="#平衡二叉树（AVL）哈曼夫树" class="headerlink" title="平衡二叉树（AVL）哈曼夫树"></a>平衡二叉树（AVL）哈曼夫树</h2><h4 id="AVL定义"><a href="#AVL定义" class="headerlink" title="AVL定义"></a>AVL定义</h4><p><strong>这种左右子树的高度相差不超过 1 的树为平衡二叉树。</strong></p><p><img src="http://cdn.tianwen42.top/img/picgo/20210615190020.jpeg" alt="img"></p><p><strong>不是平衡二叉树，因为结点 60 的左子树不是平衡二叉树</strong></p><p><img src="http://cdn.tianwen42.top/img/picgo/20210615190129.jpeg" alt="img"></p><p><img src="http://cdn.tianwen42.top/img/picgo/20210615190227.jpeg" alt="img"></p><h4 id="二叉树的旋转"><a href="#二叉树的旋转" class="headerlink" title="二叉树的旋转"></a>二叉树的旋转</h4><p><img src="http://cdn.tianwen42.top/img/picgo/20210615192442.png" alt="img"></p><p><img src="http://cdn.tianwen42.top/img/picgo/20210615192945.png" alt="image-20210615192945207"></p><h5 id="当x位于A的右子树的右子树上时，执行RR旋转。"><a href="#当x位于A的右子树的右子树上时，执行RR旋转。" class="headerlink" title="当x位于A的右子树的右子树上时，执行RR旋转。"></a><strong>当x位于A的右子树的右子树上时，执行RR旋转。</strong></h5><p><img src="http://cdn.tianwen42.top/img/picgo/20210615194245.png" alt="img"></p><h5 id="当x位于A的左子树的左子树上时，执行LL旋转"><a href="#当x位于A的左子树的左子树上时，执行LL旋转" class="headerlink" title="当x位于A的左子树的左子树上时，执行LL旋转"></a><strong>当x位于A的左子树的左子树上时，执行LL旋转</strong></h5><p><img src="http://cdn.tianwen42.top/img/picgo/20210615194338.png" alt="img"></p><h5 id="当x位于A的右子树的左子树上时，执行RL旋转。"><a href="#当x位于A的右子树的左子树上时，执行RL旋转。" class="headerlink" title="当x位于A的右子树的左子树上时，执行RL旋转。"></a><strong>当x位于A的右子树的左子树上时，执行RL旋转</strong>。</h5><p><img src="http://cdn.tianwen42.top/img/picgo/20210615194200.png" alt="img"></p><h5 id="当x位于A的左子树的右子树上时，执行LR旋转"><a href="#当x位于A的左子树的右子树上时，执行LR旋转" class="headerlink" title="当x位于A的左子树的右子树上时，执行LR旋转"></a><strong>当x位于A的左子树的右子树上时，执行LR旋转</strong></h5><p><img src="http://cdn.tianwen42.top/img/picgo/20210615194259.png" alt="img"></p><h4 id="关于节点删除"><a href="#关于节点删除" class="headerlink" title="关于节点删除"></a>关于节点删除</h4><p><img src="https://img-blog.csdn.net/20130915104642343?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ29vZGx1Y2t3aGg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="img"><img src="https://img-blog.csdn.net/20130915104642343?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZ29vZGx1Y2t3aGg=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="img"></p><p><img src="http://cdn.tianwen42.top/img/picgo/20210629203853.png" alt="img"></p><h5 id="1-叶节点，直接删除，再重构"><a href="#1-叶节点，直接删除，再重构" class="headerlink" title="1.叶节点，直接删除，再重构"></a>1.叶节点，直接删除，再重构</h5><h5 id="2-根节点，有一子树（左-x2F-右），删掉跟节点，将子节点提上去"><a href="#2-根节点，有一子树（左-x2F-右），删掉跟节点，将子节点提上去" class="headerlink" title="2.根节点，有一子树（左&#x2F;右），删掉跟节点，将子节点提上去"></a>2.根节点，有一子树（左&#x2F;右），删掉跟节点，将子节点提上去</h5><p><img src="http://cdn.tianwen42.top/img/picgo/20210629204457.png" alt="image-20210629204454419"></p><h5 id="3-根节点，有两子树（左和右），删除根节点，"><a href="#3-根节点，有两子树（左和右），删除根节点，" class="headerlink" title="3.根节点，有两子树（左和右），删除根节点，"></a>3.根节点，有两子树（左和右），删除根节点，</h5><p>有两种，一种是将左子树最右提上去，一种是右子树最左提上去</p><p><img src="http://cdn.tianwen42.top/img/picgo/20210629204441.png" alt="image-20210629204439626"></p><h4 id="BFS（深度遍历）"><a href="#BFS（深度遍历）" class="headerlink" title="BFS（深度遍历）"></a>BFS（深度遍历）</h4><p>类似于前序遍历</p><p><img src="http://cdn.tianwen42.top/img/picgo/20210630114620.png" alt="image-20210630114620128"></p><h4 id="DFS（层遍历）"><a href="#DFS（层遍历）" class="headerlink" title="DFS（层遍历）"></a>DFS（层遍历）</h4><p><img src="http://cdn.tianwen42.top/img/picgo/20210630114731.png" alt="image-20210630114731727"></p><h3 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h3><p><em>核心：从头至尾的遍历，单独节点单独遍历。</em></p><h3 id="构造最小生成树"><a href="#构造最小生成树" class="headerlink" title="构造最小生成树"></a>构造最小生成树</h3><p><em>核心：将边从小到大依次取出连线，<strong>不能成环</strong></em></p><h2 id="二叉树的通解方法"><a href="#二叉树的通解方法" class="headerlink" title="二叉树的通解方法"></a>二叉树的通解方法</h2><p>二叉遍历分为递归算法与非递归算法</p><p>stack保存根节点，node为null则访问完左子树，stack为null则访问完节点，</p><h3 id="前序"><a href="#前序" class="headerlink" title="前序"></a>前序</h3><blockquote><ul><li>无脑进栈</li><li>如果遇到null则访问栈顶元素</li><li>取栈顶元素的Rchild</li></ul></blockquote><h3 id="中序"><a href="#中序" class="headerlink" title="中序"></a>中序</h3><blockquote></blockquote><h3 id="后序"><a href="#后序" class="headerlink" title="后序"></a>后序</h3><blockquote></blockquote><h3 id="实现代码-递归"><a href="#实现代码-递归" class="headerlink" title="实现代码(递归)"></a>实现代码(递归)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""二叉树结点"""</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>elem <span class="token operator">=</span> item        self<span class="token punctuation">.</span>lchild <span class="token operator">=</span> <span class="token boolean">None</span>        self<span class="token punctuation">.</span>rchild <span class="token operator">=</span> <span class="token boolean">None</span><span class="token keyword">class</span> <span class="token class-name">Tree</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""二叉树"""</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>root <span class="token operator">=</span> <span class="token boolean">None</span>    <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 将要添加的数据封装成一个node结点</span>        node <span class="token operator">=</span> Node<span class="token punctuation">(</span>item<span class="token punctuation">)</span>        <span class="token comment"># 判断是不是一个空树</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>root <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>root <span class="token operator">=</span> node            <span class="token keyword">return</span>        <span class="token comment"># 将根节点添加到队列中</span>        queue <span class="token operator">=</span> <span class="token punctuation">[</span>self<span class="token punctuation">.</span>root<span class="token punctuation">]</span>        <span class="token comment"># 如果队列不为空就一直遍历下去</span>        <span class="token keyword">while</span> queue<span class="token punctuation">:</span>            <span class="token comment"># 取出队列里的第一个元素也就是根节点</span>            cur_node <span class="token operator">=</span> queue<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token comment"># 判断左结点</span>            <span class="token keyword">if</span> cur_node<span class="token punctuation">.</span>lchild <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>                cur_node<span class="token punctuation">.</span>lchild <span class="token operator">=</span> node                <span class="token keyword">return</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span>cur_node<span class="token punctuation">.</span>lchild<span class="token punctuation">)</span>            <span class="token comment"># 判断右结点</span>            <span class="token keyword">if</span> cur_node<span class="token punctuation">.</span>rchild <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>                cur_node<span class="token punctuation">.</span>rchild <span class="token operator">=</span> node                <span class="token keyword">return</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span>cur_node<span class="token punctuation">.</span>rchild<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">breadth_travel</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""广度遍历"""</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>root <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            <span class="token keyword">return</span>        queue <span class="token operator">=</span> <span class="token punctuation">[</span>self<span class="token punctuation">.</span>root<span class="token punctuation">]</span>        <span class="token keyword">while</span> queue<span class="token punctuation">:</span>            cur_node <span class="token operator">=</span> queue<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>cur_node<span class="token punctuation">.</span>elem<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">" "</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> cur_node<span class="token punctuation">.</span>lchild <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>                queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span>cur_node<span class="token punctuation">.</span>lchild<span class="token punctuation">)</span>            <span class="token keyword">if</span> cur_node<span class="token punctuation">.</span>rchild <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>                queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span>cur_node<span class="token punctuation">.</span>rchild<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">preorder</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""先序遍历"""</span>        <span class="token keyword">if</span> node <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            <span class="token keyword">return</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>elem<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">" "</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>preorder<span class="token punctuation">(</span>node<span class="token punctuation">.</span>lchild<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>preorder<span class="token punctuation">(</span>node<span class="token punctuation">.</span>rchild<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">inorder</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""中序遍历"""</span>        <span class="token keyword">if</span> node <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            <span class="token keyword">return</span>        self<span class="token punctuation">.</span>inorder<span class="token punctuation">(</span>node<span class="token punctuation">.</span>lchild<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>elem<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">" "</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>inorder<span class="token punctuation">(</span>node<span class="token punctuation">.</span>rchild<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">postorder</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""后序遍历"""</span>        <span class="token keyword">if</span> node <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            <span class="token keyword">return</span>        self<span class="token punctuation">.</span>postorder<span class="token punctuation">(</span>node<span class="token punctuation">.</span>lchild<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>postorder<span class="token punctuation">(</span>node<span class="token punctuation">.</span>rchild<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>elem<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    tree <span class="token operator">=</span> Tree<span class="token punctuation">(</span><span class="token punctuation">)</span>    tree<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    tree<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    tree<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    tree<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    tree<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>    tree<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    tree<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>    tree<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>    tree<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>    tree<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"广度遍历:"</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token comment">#按二叉树的节点号遍历</span>    tree<span class="token punctuation">.</span>breadth_travel<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"先序遍历："</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>    tree<span class="token punctuation">.</span>preorder<span class="token punctuation">(</span>tree<span class="token punctuation">.</span>root<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"中序遍历："</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>    tree<span class="token punctuation">.</span>inorder<span class="token punctuation">(</span>tree<span class="token punctuation">.</span>root<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"后序遍历："</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>    tree<span class="token punctuation">.</span>postorder<span class="token punctuation">(</span>tree<span class="token punctuation">.</span>root<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实现代码-非递归"><a href="#实现代码-非递归" class="headerlink" title="实现代码(非递归)"></a>实现代码(非递归)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""二叉树结点"""</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>elem <span class="token operator">=</span> item        self<span class="token punctuation">.</span>lchild <span class="token operator">=</span> <span class="token boolean">None</span>        self<span class="token punctuation">.</span>rchild <span class="token operator">=</span> <span class="token boolean">None</span><span class="token keyword">class</span> <span class="token class-name">Tree</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""二叉树"""</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>root <span class="token operator">=</span> <span class="token boolean">None</span>    <span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 将要添加的数据封装成一个node结点</span>        node <span class="token operator">=</span> Node<span class="token punctuation">(</span>item<span class="token punctuation">)</span>        <span class="token comment"># 判断是不是一个空树</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>root <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>root <span class="token operator">=</span> node            <span class="token keyword">return</span>        <span class="token comment"># 将根节点添加到队列中</span>        queue <span class="token operator">=</span> <span class="token punctuation">[</span>self<span class="token punctuation">.</span>root<span class="token punctuation">]</span>        <span class="token comment"># 如果队列不为空就一直遍历下去</span>        <span class="token keyword">while</span> queue<span class="token punctuation">:</span>            <span class="token comment"># 取出队列里的第一个元素也就是根节点</span>            cur_node <span class="token operator">=</span> queue<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>            <span class="token comment"># 判断左结点</span>            <span class="token keyword">if</span> cur_node<span class="token punctuation">.</span>lchild <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>                cur_node<span class="token punctuation">.</span>lchild <span class="token operator">=</span> node                <span class="token keyword">return</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span>cur_node<span class="token punctuation">.</span>lchild<span class="token punctuation">)</span>            <span class="token comment"># 判断右结点</span>            <span class="token keyword">if</span> cur_node<span class="token punctuation">.</span>rchild <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>                cur_node<span class="token punctuation">.</span>rchild <span class="token operator">=</span> node                <span class="token keyword">return</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span>cur_node<span class="token punctuation">.</span>rchild<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">preorder</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>node<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>node <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span>        stack<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment">#非递归必须创建</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>node <span class="token keyword">or</span> stack<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>elem<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">)</span>                stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">)</span>                node<span class="token operator">=</span>node<span class="token punctuation">.</span>lchild            <span class="token keyword">else</span><span class="token punctuation">:</span>                node <span class="token operator">=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>                node <span class="token operator">=</span> node<span class="token punctuation">.</span>rchild    <span class="token keyword">def</span> <span class="token function">preorder2</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#将指针指空时打印n作为标识</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span>        stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment"># 非递归必须创建一个栈</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>node <span class="token keyword">or</span> stack<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 节点和栈非空</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>elem<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">)</span>                stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">)</span>                node <span class="token operator">=</span> node<span class="token punctuation">.</span>lchild            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"n"</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">)</span>                node <span class="token operator">=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>                node <span class="token operator">=</span> node<span class="token punctuation">.</span>rchild        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">not</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"n"</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">inorder</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span>        stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment"># 非递归必须创建一个栈</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>node <span class="token keyword">or</span> stack<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 节点和栈非空</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">:</span>                stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>node<span class="token punctuation">)</span>                node <span class="token operator">=</span> node<span class="token punctuation">.</span>lchild            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"n"</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">)</span>                node <span class="token operator">=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>elem<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">)</span>                node <span class="token operator">=</span> node<span class="token punctuation">.</span>rchild        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">not</span> node<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#增加最后的null</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"n"</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    tree <span class="token operator">=</span> Tree<span class="token punctuation">(</span><span class="token punctuation">)</span>    tree<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    tree<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    tree<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    tree<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    tree<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"先序遍历："</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>    tree<span class="token punctuation">.</span>preorder2<span class="token punctuation">(</span>tree<span class="token punctuation">.</span>root<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"中序遍历："</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>    tree<span class="token punctuation">.</span>inorder<span class="token punctuation">(</span>tree<span class="token punctuation">.</span>root<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="AOE网"><a href="#AOE网" class="headerlink" title="AOE网"></a>AOE网</h1><p><strong>注意：关键路径不一定只有一条</strong></p><p><img src="http://cdn.tianwen42.top/img/picgo/20210630140945.png" alt="image-20210630140944579"></p><p>ve<strong>最早发生时间：</strong>从前往后，前驱结点到当前结点所需时间，取最大值。</p><p>vl<strong>最迟发生时间</strong>：从后往前，后继结点的最迟发生时间-边权值，取最小值。</p><p><strong>关键路径</strong>：最早发生时间和最迟发生时间相同的结点即为关键路径上的节点</p><p><strong>L路径最早开始时间</strong>：等于当前边指向结点的<strong>最早发生时间。</strong></p><p><strong>E路径最晚开始时间</strong>：等于vl-当前边的权值。</p><p><img src="http://cdn.tianwen42.top/img/picgo/20210630142954.jpg" alt="1"></p><h1 id="哈希表hashmap"><a href="#哈希表hashmap" class="headerlink" title="哈希表hashmap"></a>哈希表hashmap</h1><p><img src="https://pic1.zhimg.com/v2-041225f7f26307bfd5b705f561697d16_1440w.jpg?source=172ae18b" alt="互联网公司面试经——你不得不知道的哈希表"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//散列函数 伪代码 </span><span class="token keyword">int</span> <span class="token class-name">Hash</span><span class="token punctuation">(</span>string key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 获取后四位字符</span>  string hashValue <span class="token operator">=</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">key<span class="token punctuation">.</span></span>Substring</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">key<span class="token punctuation">.</span></span>Length</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 将后两位字符转换为整数</span>  <span class="token keyword">return</span> hashValue<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="散列冲突"><a href="#散列冲突" class="headerlink" title="散列冲突"></a>散列冲突</h2><p><img src="https://pic1.zhimg.com/80/v2-e1516d5ab76004a0e166e8bef3399204_720w.jpg" alt="img"></p><h3 id="哈希冲突的解决办法"><a href="#哈希冲突的解决办法" class="headerlink" title="哈希冲突的解决办法"></a>哈希冲突的解决办法</h3><h4 id="1-开放寻址法"><a href="#1-开放寻址法" class="headerlink" title="1.开放寻址法"></a>1.开放寻址法</h4><p><em>哈希冲突则遍历到尾部找空闲空间，如果没有找到，则从头开始找</em></p><p><img src="https://pic4.zhimg.com/80/v2-7ed00efd4a2e417639f32c0152a497eb_720w.jpg" alt="img"></p><h4 id="2-链表法"><a href="#2-链表法" class="headerlink" title="2.链表法"></a>2.链表法</h4><p>数组一个位置可以储存冲突值的地址，一串链表，这样就映射了多个数据.</p><p><img src="https://pic2.zhimg.com/80/v2-a7f9de70b35ecc361c2474c6c22d0a61_720w.jpg" alt="img"></p><h4 id="3-负载因子与rehash"><a href="#3-负载因子与rehash" class="headerlink" title="3.负载因子与rehash"></a>3.负载因子与rehash</h4><p><em><strong>散列表的负载因子 &#x3D; 填入表中的元素个数&#x2F;散列表的长度</strong></em></p><p>散列表负载因子越大，代表空闲位置越少，冲突也就越多，散列表的性能会下降。</p><p>对于散列表来说，负载因子过大或过小都不好，负载因子过大，散列表的性能会下降。而负载因子过小，则会造成内存不能合理利用，从而形成内存浪费。因此我们为了保证负载因子维持在一个合理的范围内，要对散列表的大小进行收缩或扩展，即rehash。散列表的rehash过程类似于数组的收缩与扩容（<strong>动态规划</strong>）</p><h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p>两重循环，找最小数与当前位置交换</p><blockquote><ol><li>第一轮从下标为 1 到下标为 n-1 的元素中选取最小值，若小于第一个数，则交换</li><li>第二轮从下标为 2 到下标为 n-1 的元素中选取最小值，若小于第二个数，则交换</li><li>依次类推下去……</li></ol></blockquote><blockquote><p>平均时间复杂度：O(N^2)<br>最佳时间复杂度：O(N^2)<br>最差时间复杂度：O(N^2)<br>空间复杂度：O(1)<br>排序方式：In-place<br>稳定性：不稳定</p></blockquote><p><img src="http://cdn.tianwen42.top/img/picgo/20210618155528.gif" alt="img"></p><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><p>归并排序是用分治思想，分治模式在每一层递归上有三个步骤：</p><ul><li><strong>分解（Divide）</strong>：将n个元素分成个含n&#x2F;2个元素的子序列。</li><li><strong>解决（Conquer）</strong>：用合并排序法对两个子序列递归的排序。</li><li><strong>合并（Combine）</strong>：合并两个已排序的子序列已得到排序结果。</li></ul><blockquote><p>平均时间复杂度：O(nlogn)<br>最佳时间复杂度：O(n)<br>最差时间复杂度：O(nlogn)<br>空间复杂度：O(n)<br>排序方式：In-place<br>稳定性：稳定</p></blockquote><p><img src="http://cdn.tianwen42.top/img/picgo/20210618155202.jpeg" alt="img"></p><h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><p>一种增量逐渐减小的排序方法</p><p><img src="https://cdn.tianwen42.top/img/picgo/20210604154219.png" alt="img"></p><p>round1：d&#x3D;5</p><p><img src="https://cdn.tianwen42.top/img/picgo/20210604154414.png" alt="img"></p><p>round2：d&#x3D;3</p><p><img src="https://cdn.tianwen42.top/img/picgo/20210604154531.png" alt="img"></p><p>round3：d&#x3D;1</p><p><img src="https://cdn.tianwen42.top/img/picgo/20210604155730.png" alt="img"></p><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最短路径算法</title>
      <link href="/posts/9df73d67.html"/>
      <url>/posts/9df73d67.html</url>
      
        <content type="html"><![CDATA[<p>最短路径算法</p><span id="more"></span><h1 id="1-dijistra"><a href="#1-dijistra" class="headerlink" title="1.dijistra"></a>1.dijistra</h1><p><img src="https://cdn.tianwen42.top/img/picgo/20210604151428.png" alt="这里写图片描述"></p><p>邻接矩阵</p><p><img src="https://cdn.tianwen42.top/img/picgo/20210604151620.png" alt="img"></p><p>从v1开始找最小权重，如果权重和小于当前值，则置换，初始为<br>$$<br>dis\left[ \begin{matrix}<br>    \infty&amp;        \infty&amp;        \infty&amp;        \infty&amp;        \infty&amp;        \infty\<br>\end{matrix} \right]<br>$$<br>第一次：v1<br>$$<br>dis\left[ \begin{matrix}<br>    0&amp;        \infty&amp;        10&amp;        \infty&amp;        30&amp;        100\<br>\end{matrix} \right]<br>$$<br>第二次：v1-v3，距离v4最近（10+50）<br>$$<br>dis\left[ \begin{matrix}<br>    0&amp;        \infty&amp;        10&amp;        60&amp;        30&amp;        100\<br>\end{matrix} \right]<br>$$<br>第三次v1-v3-v4-,距离v6最近（10+50+10）<br>$$<br>dis\left[ \begin{matrix}<br>    0&amp;        \infty&amp;        10&amp;        60&amp;        30&amp;        70\<br>\end{matrix} \right]<br>$$<br>第四次：v1-v5，距离v4最近（30+20）<br>$$<br>dis\left[ \begin{matrix}<br>    0&amp;        \infty&amp;        10&amp;        50&amp;        30&amp;        70\<br>\end{matrix} \right]<br>$$<br>第五次：v1-v5-v4，距离v6最近（30+20+10）<br>$$<br>dis\left[ \begin{matrix}<br>    0&amp;        \infty&amp;        10&amp;        50&amp;        30&amp;        60\<br>\end{matrix} \right]<br>$$</p><p><img src="https://cdn.tianwen42.top/img/picgo/20210604151629.png" alt="这里写图片描述"></p><h1 id="2-prim算法"><a href="#2-prim算法" class="headerlink" title="2.prim算法"></a>2.prim算法</h1><p>按权重从小到大分布散列，取小至大权路径</p><p><img src="https://cdn.tianwen42.top/img/picgo/20210604151637.png" alt="这里写图片描述"></p><h1 id="3-Kruskal算法"><a href="#3-Kruskal算法" class="headerlink" title="3.Kruskal算法"></a>3.Kruskal算法</h1><p>按最小权重取探索，如果访问过的节点则回退走另一条路径，直至连通所有节点</p><p><img src="https://cdn.tianwen42.top/img/picgo/20210604151641.png" alt="这里写图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 最短路径 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>交换两个变量</title>
      <link href="/posts/4f77f51c.html"/>
      <url>/posts/4f77f51c.html</url>
      
        <content type="html"><![CDATA[<p>交换两个变量的值</p><h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token comment">//第一种不讲了，太简单了，大部分都会想到，看着很LoW，所以接着往下看</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">SWAP1</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>    </span><span class="token punctuation">\</span><span class="token expression"><span class="token punctuation">&#123;</span>                      </span><span class="token punctuation">\</span>    <span class="token expression"><span class="token keyword">int</span> t <span class="token operator">=</span> a<span class="token punctuation">;</span>         </span><span class="token punctuation">\</span>    <span class="token expression">a <span class="token operator">=</span> b<span class="token punctuation">;</span>             </span><span class="token punctuation">\</span>    <span class="token expression">b <span class="token operator">=</span> t<span class="token punctuation">;</span>             </span><span class="token punctuation">\</span><span class="token expression"><span class="token punctuation">&#125;</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//第二种实际编译不能通过的，因为宏定义不允许参数带&amp;，所以这种方法只能写成函数形式,所以这里也说明了宏定义和函数是有区别的，宏定义是在预编译阶段执行简单替代，没有内存占用，而函数是在编译阶段是占用内存的</span><span class="token comment">//#define SWAP2(&amp;a, &amp;b)  \//&#123;                      \//    int t = *a;        \//    *a = *b;           \//    *b = t;            \//&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3"><a href="#3" class="headerlink" title="3"></a>3</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//这种方法实际是通过传变量地址的方式更改变量值，学指针时一般都会写这个，实在不懂就百度吧</span><span class="token keyword">void</span> <span class="token function">SWAP2</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token operator">*</span>a<span class="token punctuation">;</span>            <span class="token operator">*</span>a <span class="token operator">=</span> <span class="token operator">*</span>b<span class="token punctuation">;</span>               <span class="token operator">*</span>b <span class="token operator">=</span> t<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4"><a href="#4" class="headerlink" title="4"></a>4</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//第二种方法看着稍微逼格一点了，再往下面看吧</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">SWAP3</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>    </span><span class="token punctuation">\</span><span class="token expression"><span class="token punctuation">&#123;</span>                      </span><span class="token punctuation">\</span>    <span class="token expression">a <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>         </span><span class="token punctuation">\</span>    <span class="token expression">b <span class="token operator">=</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>         </span><span class="token punctuation">\</span>    <span class="token expression">a <span class="token operator">=</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>         </span><span class="token punctuation">\</span><span class="token expression"><span class="token punctuation">&#125;</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5"><a href="#5" class="headerlink" title="5"></a>5</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//第三种方法也是可以交换的，优点省去中间变量，缺点会溢出</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">SWAP4</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>    </span><span class="token punctuation">\</span><span class="token expression"><span class="token punctuation">&#123;</span>                      </span><span class="token punctuation">\</span>    <span class="token expression">a <span class="token operator">=</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span>         </span><span class="token punctuation">\</span>    <span class="token expression">b <span class="token operator">=</span> a <span class="token operator">/</span> b<span class="token punctuation">;</span>         </span><span class="token punctuation">\</span>    <span class="token expression">a <span class="token operator">=</span> a <span class="token operator">/</span> b<span class="token punctuation">;</span>         </span><span class="token punctuation">\</span><span class="token expression"><span class="token punctuation">&#125;</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6"><a href="#6" class="headerlink" title="6"></a>6</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//第四种方法也是可以交换的，优点省去中间变量，缺点会溢出</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">SWAP5</span><span class="token expression"><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>    </span><span class="token punctuation">\</span><span class="token expression"><span class="token punctuation">&#123;</span>                      </span><span class="token punctuation">\</span>    <span class="token expression">a <span class="token operator">=</span> a <span class="token operator">^</span> b<span class="token punctuation">;</span>         </span><span class="token punctuation">\</span>    <span class="token expression">b <span class="token operator">=</span> a <span class="token operator">^</span> b<span class="token punctuation">;</span>         </span><span class="token punctuation">\</span>    <span class="token expression">a <span class="token operator">=</span> a <span class="token operator">^</span> b<span class="token punctuation">;</span>         </span><span class="token punctuation">\</span><span class="token expression"><span class="token punctuation">&#125;</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>cass7.0使用</title>
      <link href="/posts/3ad5cb2d.html"/>
      <url>/posts/3ad5cb2d.html</url>
      
        <content type="html"><![CDATA[<p>空间数据采集课程，用到了cass7.0</p><span id="more"></span><h2 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h2><h3 id="测绘数据类型"><a href="#测绘数据类型" class="headerlink" title="测绘数据类型"></a>测绘数据类型</h3><blockquote><p>  .shp(矢量文件)</p><p>  .hdr</p></blockquote><blockquote><p>  .tif（栅格）</p><p>  .img</p></blockquote><blockquote><p>  .csv（文本）</p></blockquote><blockquote><p>  .dwg（cass数据）</p><p>  .cad（cad数据）</p><p>  .dat(元数据)</p></blockquote><p>cass主要应用于地形图测绘，</p><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><p>配置文件</p><blockquote><p>  D:\Program Files (x86)\Cass\SYSTEM\Acad.pgp</p></blockquote><p>EX, *EXTEND</p><img src="https://cdn.tianwen42.top/img/picgo/image-20210422151023060.png" alt="image-20210422151023060" style="zoom:33%;" /><h3 id="配置文件介绍"><a href="#配置文件介绍" class="headerlink" title="配置文件介绍"></a>配置文件介绍</h3><h3 id="编辑功能"><a href="#编辑功能" class="headerlink" title="编辑功能"></a>编辑功能</h3><blockquote><p>  F8正交开关</p><p>  F3对象追踪</p></blockquote><h4 id="高程点"><a href="#高程点" class="headerlink" title="高程点"></a>高程点</h4><p><img src="https://cdn.tianwen42.top/img/picgo/image-20210422160143884.png" alt="image-20210422160143884"></p>]]></content>
      
      
      <categories>
          
          <category> 地理与计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cass </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pix4d使用</title>
      <link href="/posts/cc4cf105.html"/>
      <url>/posts/cc4cf105.html</url>
      
        <content type="html"><![CDATA[<p>数字摄影测量学和空间数据采集用到了pix4d,</p><blockquote><p><strong>Pix4Dmapper —— 专业的无人机测绘和摄影测量软件</strong></p><p>转换从无人机，手持设备或飞机拍摄的影像，生成高精度、带地理坐标的的二维地图和三维模型。</p><p>快速生成各种可自定义成果，并与众多软件兼容。</p><p>专业的工作流程，从<strong>图像采集</strong>到<strong>项目处理</strong>再到<strong>数据分析</strong></p></blockquote><span id="more"></span><h2 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h2><h3 id="建项目导入图片"><a href="#建项目导入图片" class="headerlink" title="建项目导入图片"></a>建项目导入图片</h3><p>打开 pix4d，选项目 -新项目（或者直接在界面上选择-新项目），导入照片，路径中不要包含中文，避免因中文产生的编码错误，一般采用utf-8编码，生成的文件都会产生在项目子路径下。</p><ol><li>..\3_dsm_ortho\1_dsm\tiles：分块的二值栅格图像</li><li>..\3_dsm_ortho\1_dsm ：整体的二值化栅格图像</li><li>..\3_dsm_ortho\2_mosaic：整体的正射图像</li><li>..\3_dsm_ortho\2_mosaic\tiles：分块的正射图像</li></ol><h3 id="参数设置"><a href="#参数设置" class="headerlink" title="参数设置"></a>参数设置</h3><ol><li>选择输出坐标系，默认是 WGS84（经纬度）坐标，</li><li>导入照片的位置信息POS 数据，如果position没有自动识别，则要手动导入position参数文件，选择pos文件的格式，在position文件中文件名可能要手动添加后缀</li><li>设置相机镜头，镜头校正从EXIF中估计，设置精度，</li><li>选择产生的产品DEM（数字高程模型），DTM（数字地面模型），DSM（数字地表模型），正射影像，</li></ol><p><img src="https://cdn.tianwen42.top/img/picgo/image-20210415160601815.png" alt="image-20210415160601815"></p><p><img src="https://cdn.tianwen42.top/img/picgo/image-20210415160816300.png" alt="image-20210415160816300"></p><h3 id="初始化处理"><a href="#初始化处理" class="headerlink" title="初始化处理"></a>初始化处理</h3><blockquote><p>  空中三角测量</p></blockquote><h3 id="生成点云和纹理"><a href="#生成点云和纹理" class="headerlink" title="生成点云和纹理"></a>生成点云和纹理</h3><blockquote><p>  点云处理—–&gt;对像控点的加密，第2步建议勾选，能提高成果质量</p></blockquote><p><img src="https://cdn.tianwen42.top/img/picgo/7e3f73ed493c53676621406005dd939f.png" alt="7e3f73ed493c53676621406005dd939f.png"></p><p>在左下角处理选项中，设置要求的精度和类型，一般选择全面高精度检测，如果照片很多，建议选择快速检测。</p><h3 id="查看生产质量报告"><a href="#查看生产质量报告" class="headerlink" title="查看生产质量报告"></a>查看生产质量报告</h3><blockquote><p>  可以先完成初始化先检查质量报告，看整体效果是否正确，再决定是否下一步</p></blockquote><p><img src="https://cdn.tianwen42.top/img/picgo/image-20210415162327539.png" alt="image-20210415162327539"></p><blockquote><p>  因为图像重叠度较大，在查看点时投影平面很多。</p></blockquote><p><img src="https://cdn.tianwen42.top/img/picgo/image-20210418201122087.png" alt="image-20210418201122087"></p><h3 id="关于成果"><a href="#关于成果" class="headerlink" title="关于成果"></a>关于成果</h3><p>好的正射影像经过处理之后应该看不见物体的侧面，是从正上方俯视产生的结果。如果部分处理效果不好，可以重新处理，再用其他软件对细节进行处理。</p><p><img src="https://cdn.tianwen42.top/img/picgo/image-20210418201240160.png" alt="image-20210418201240160"></p>]]></content>
      
      
      <categories>
          
          <category> 地理与计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pix4d </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用bat脚本</title>
      <link href="/posts/538de12b.html"/>
      <url>/posts/538de12b.html</url>
      
        <content type="html"><![CDATA[<p>bat脚本是个好东西，拿来就能用</p><span id="more"></span><h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><h3 id="hexo配置"><a href="#hexo配置" class="headerlink" title="hexo配置"></a>hexo配置</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">hexo clean <span class="token operator">&amp;&amp;</span> hexo g -d<span class="token builtin class-name">cd</span>@echo off<span class="token keyword">for</span> /f <span class="token string">"tokens=2 delims=="</span> %%a <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token string">'wmic path win32_operatingsystem get LocalDateTime /value'</span><span class="token punctuation">)</span> <span class="token keyword">do</span> <span class="token punctuation">(</span>  <span class="token builtin class-name">set</span> <span class="token assign-left variable">t</span><span class="token operator">=</span>%%a<span class="token punctuation">)</span><span class="token builtin class-name">set</span> <span class="token assign-left variable">Today</span><span class="token operator">=</span>%t:~0,4%-%t:~4,2%-%t:~6,2%echo,%Today%<span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span> <span class="token operator">&amp;&amp;</span> <span class="token function">git</span> commit -m %Today% <span class="token operator">&amp;&amp;</span> <span class="token function">git</span> push origin hexogpause<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">@echo off　　　　　　　　　　　<span class="token comment">#不显示后续命令行及当前命令行</span><span class="token function">dir</span> c:<span class="token punctuation">\</span>*.* <span class="token operator">></span>a.txt　　　　　　<span class="token comment">#将c盘文件列表写入a.txt</span>call c:<span class="token punctuation">\</span>ucdos<span class="token punctuation">\</span>ucdos.bat　　　 <span class="token comment">#调用ucdos</span><span class="token builtin class-name">echo</span> 你好 　　　　　　　　　　  <span class="token comment">#显示"你好"</span>pause 　　　　　　　　　　　　  <span class="token comment">#暂停,等待按键继续</span>rem 准备运行wps 　　　　　　　  <span class="token comment">#注释：准备运行wps</span><span class="token builtin class-name">cd</span> ucdos　　　　　　　　　　　  <span class="token comment">#进入ucdos目录</span>wps 　　　　　　　　　　　　　  <span class="token comment">#运行wps</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">@echo off     <span class="token comment">#显示</span>@Rem Here is the description    <span class="token comment">#注释</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><h3 id="python脚本"><a href="#python脚本" class="headerlink" title="python脚本"></a>python脚本</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#！/usr/bin/bash</span><span class="token builtin class-name">cd</span> /root/脚本/birth/root/anaconda3/bin/python main.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> bat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#基础</title>
      <link href="/posts/d139.html"/>
      <url>/posts/d139.html</url>
      
        <content type="html"><![CDATA[<h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><h3 id="值类型"><a href="#值类型" class="headerlink" title="值类型"></a>值类型</h3><p><img src="http://cdn.tianwen42.top/img/picgo/20210619104542.png" alt="img"></p><h5 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h5><p><img src="http://cdn.tianwen42.top/img/picgo/20210619104359.png" alt="img"></p><h5 id="枚举类型"><a href="#枚举类型" class="headerlink" title="枚举类型"></a>枚举类型</h5><blockquote><ul><li>枚举类型在超出枚举值时会变成数字</li></ul></blockquote><h5 id="bool类型"><a href="#bool类型" class="headerlink" title="bool类型"></a>bool类型</h5><blockquote><p>C#中的bool类型和整数之间不存在对应关系，需要类型转换，显式</p></blockquote><h5 id="实数类型"><a href="#实数类型" class="headerlink" title="实数类型"></a>实数类型</h5><p><img src="http://cdn.tianwen42.top/img/picgo/20210619104439.jpeg" alt="img"></p><h5 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h5><blockquote><p>c#中结构体先定义，后赋值，无法初始化</p></blockquote><h5 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h5><blockquote><p>char     2bits</p></blockquote><h3 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h3><h5 id="数组（静态）"><a href="#数组（静态）" class="headerlink" title="数组（静态）"></a>数组（静态）</h5><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">&#x2F;&#x2F;定义数组int[] arr &#x3D; new int[3]int[] arr &#x3D; &#123;2,0,4&#125;&#x2F;&#x2F;多维数组int[,] arr &#x3D; new<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>foreach循环</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">string[] myArray &#x3D; &#123;&quot;alily&quot;, &quot;swen&quot;, &quot;ben&quot;, &quot;cat&quot;&#125;;foreach (var value in myArray) &#123;  Console.Write(value); &#x2F;&#x2F; alily, swen, ben, cat&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Clone()方法和Copy()</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">&#x2F;&#x2F; 当数组元素是值类型时，Clone()复制所有值int[] intArray &#x3D; &#123;1, 2, 3&#125;;int[] intArrayClone &#x3D; (int[]) intArray.Clone(); &#x2F;&#x2F; intArrayClone &#x3D; &#123;1, 2, 3&#125;&#x2F;&#x2F; 当数组元素包含引用类型，则只复制引用Person[] girl &#x3D; &#123;new Person&#123;FirstName &#x3D; &quot;Sam&quot;, LastName &#x3D; &quot;Lennon&quot;&#125;, new Person&#123;FirstName &#x3D; &quot;Ben&quot;, LastName &#x3D; &quot;Cartney&quot;&#125;&#125;;Person[] girlClone &#x3D; (Person[]) girl.Clone(); &#x2F;&#x2F; girl和girlClone引用的Person对象是相同的，当修改girlClone中一个引用类型元素的属性时，也会改变girl中对应对象<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Array.Sort(num);</p><p>compareTo</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">string a &#x3D; &quot;world&quot;;string b &#x3D; &quot;hello&quot;;int result &#x3D; a.CompareTo(b); &#x2F;&#x2F; 返回一个负数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="ArrayList（动态）"><a href="#ArrayList（动态）" class="headerlink" title="ArrayList（动态）"></a>ArrayList（动态）</h5><p>可包含多种数据类型，链表连接</p><h5 id="类"><a href="#类" class="headerlink" title="类"></a>类</h5><h5 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h5><p>interface</p><h5 id="委托"><a href="#委托" class="headerlink" title="委托"></a>委托</h5><h3 id="关于类型转换"><a href="#关于类型转换" class="headerlink" title="关于类型转换"></a>关于类型转换</h3><p><strong>as</strong>                一种安全的强制转换方式</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">Object obj1 &#x3D; 11；int nValue &#x3D; obj1 as int;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>is</strong>                判断类型</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">Object obj1 &#x3D; 11；if（objTest is int ）&#123;int nValue &#x3D; （int）obj1；&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="拆箱and装箱"><a href="#拆箱and装箱" class="headerlink" title="拆箱and装箱"></a>拆箱and装箱</h4><h5 id="值——-gt-引用（隐式）"><a href="#值——-gt-引用（隐式）" class="headerlink" title="值——&gt;引用（隐式）"></a>值——&gt;引用（隐式）</h5><h5 id="引用——-gt-值（显式）"><a href="#引用——-gt-值（显式）" class="headerlink" title="引用——&gt;值（显式）"></a>引用——&gt;值（显式）</h5><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><h4 id="值传递"><a href="#值传递" class="headerlink" title="值传递"></a>值传递</h4><h4 id="引用参数ref（传址）"><a href="#引用参数ref（传址）" class="headerlink" title="引用参数ref（传址）"></a>引用参数ref（传址）</h4><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">public static int Get(ref int a,ref int b)&#123;    a &#x3D; a-b;    b &#x3D; a+b;    a &#x3D; b-a;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="输出参数out（定义之后必须赋值）"><a href="#输出参数out（定义之后必须赋值）" class="headerlink" title="输出参数out（定义之后必须赋值）"></a>输出参数out（定义之后必须赋值）</h4><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">public static int Get(out int a,out int b)&#123;    int a,b&#x3D;1,0;&#125;    &#x2F;&#x2F;将局部变量改变<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">public static int Get(out int a,out int b)&#123;    int a,b&#x3D;1,0;    return a,b;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Prams可变参数"><a href="#Prams可变参数" class="headerlink" title="Prams可变参数"></a>Prams可变参数</h4><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">test(&quot;name&quot;,1,1,21,3,4,5,5);public static int test(string name,params int[] grade)&#123;&#125;     &#x2F;&#x2F;数组参数可变<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h3><ol><li>参数个数相同，参数类型不能相同</li><li>参数类型相同，参数个数就不能相同</li><li>方法重载和返回类型无关</li></ol><h2 id="字段"><a href="#字段" class="headerlink" title="字段"></a>字段</h2><p>常数字段const（静态的）<strong>编译时确定</strong>    </p><p>只读字段readonly（实例的）<strong>运行时确定</strong></p>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 吐槽 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git初探</title>
      <link href="/posts/b10a2463.html"/>
      <url>/posts/b10a2463.html</url>
      
        <content type="html"><![CDATA[<h3 id="命令Command"><a href="#命令Command" class="headerlink" title="命令Command"></a>命令Command</h3><ul><li>git intit [^建仓库]</li><li>git add [^添加暂存区]</li><li>git commit -m “log” [^提交]</li><li>git diff <u>filename</u>[^工作区和仓库比较]</li></ul><h3 id="报错Error"><a href="#报错Error" class="headerlink" title="报错Error"></a>报错Error</h3><h5 id="git中报unable-to-auto-detect-email-address-错误的解决拌办法"><a href="#git中报unable-to-auto-detect-email-address-错误的解决拌办法" class="headerlink" title="git中报unable to auto-detect email address 错误的解决拌办法"></a><a href="https://www.cnblogs.com/fuyuteng/p/11413968.html">git中报unable to auto-detect email address 错误的解决拌办法</a></h5><blockquote><p>git config –global user.name “yanglin”<br>git config –global user.email “<a href="mailto:&#x32;&#x32;&#x37;&#52;&#57;&#x34;&#49;&#52;&#x30;&#x39;&#x40;&#113;&#113;&#46;&#x63;&#x6f;&#x6d;">&#x32;&#x32;&#x37;&#52;&#57;&#x34;&#49;&#52;&#x30;&#x39;&#x40;&#113;&#113;&#46;&#x63;&#x6f;&#x6d;</a>“  </p></blockquote><h2 id="hexo搭建"><a href="#hexo搭建" class="headerlink" title="hexo搭建"></a>hexo搭建</h2><h3 id="git连接本地"><a href="#git连接本地" class="headerlink" title="git连接本地"></a>git连接本地</h3><pre><code>创建证书登录，把自己电脑的公钥，也就是 ~/.ssh/id_rsa.pub 文件里的内容添加到服务器的 /home/git/.ssh/authorized_keys 文件中，添加公钥之后可以防止每次 push 都输入密码。</code></pre><h2 id="bat快速push"><a href="#bat快速push" class="headerlink" title="bat快速push"></a>bat快速push</h2><pre class="line-numbers language-bat" data-language="bat"><code class="language-bat">@echo off@echo &#x2F;&#x2F; +----------------------------------------------------------------------@echo &#x2F;&#x2F; ^| 一键Git Push代码@echo &#x2F;&#x2F; +----------------------------------------------------------------------@echo &#x2F;&#x2F; rem 获取时间set filename&#x3D;%date:~0,4%%date:~5,2%%date:~8,2%%time:~0,2%%time:~3,2%%time:~6,2%set &quot;filename&#x3D;%filename: &#x3D;0%&quot;set &quot;content&#x3D;%filename%&quot;set &#x2F;p &quot;content&#x3D;请输入提交说明：&quot;set &quot;file&#x3D;.&quot;set &#x2F;p &quot;file&#x3D;请输入需要提交的文件或目录，直接回车则为当前目录下所有内容：&quot;rem 调用git命令，如果没有找到git命令，说明环境变量未配置rem 将git改成git安装目录下的git.exe也可以实现git add %file%git commit -m %content%git pushpause<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo改造</title>
      <link href="/posts/493e.html"/>
      <url>/posts/493e.html</url>
      
        <content type="html"><![CDATA[<h3 id="开启字数统计"><a href="#开启字数统计" class="headerlink" title="开启字数统计"></a>开启字数统计</h3><p>npm i hexo-wordcount –save</p><h3 id="添加徽章"><a href="#添加徽章" class="headerlink" title="添加徽章"></a>添加徽章</h3><p><img src="https://cdn.tianwen42.top/picgo/image-20220217121712624.png" alt="image-20220217121712624"></p><h3 id="nodejs-版本工具"><a href="#nodejs-版本工具" class="headerlink" title="nodejs 版本工具"></a>nodejs 版本工具</h3><p><a href="https://github.com/tj/n">https://github.com/tj/n</a></p><h3 id="rozbo-x2F-hexo-abbrlink"><a href="#rozbo-x2F-hexo-abbrlink" class="headerlink" title="rozbo&#x2F;hexo-abbrlink"></a>rozbo&#x2F;hexo-abbrlink</h3><blockquote><p>文章单独链接加密</p></blockquote><p>npm install hexo-abbrlink –save</p><h3 id="hexo-enhancer"><a href="#hexo-enhancer" class="headerlink" title="hexo-enhancer"></a>hexo-enhancer</h3><ul><li>自动生成<code>title</code>：根据文件名自动生成标题。</li><li>自动生成<code>date</code>：根据文件名自动生成日期，具体策略类似<code>Jekyll</code>。</li><li>自动生成<code>abbrlink</code>：根据标题进行<code>base32</code>和<code>crc32</code>生成短链接。</li><li>自动生成<code>categories</code>：根据文件的路径解析文章所属分类。</li><li>自动生成<code>tags</code>：根据配置在<code>_config.yml</code>中的可用<code>tags</code>和<code>keywords</code>自动扫描文章中出现的标签。</li></ul><p>npm install hexo-enhancer –save</p><h3 id="静态文件cdn"><a href="#静态文件cdn" class="headerlink" title="静态文件cdn"></a>静态文件cdn</h3><blockquote><p>网站速度方面有比较好的效果</p></blockquote><p><img src="https://cdn.tianwen42.top/img/picgo/image-20220227104844421.png" alt="image-20220227104844421"></p><h3 id="评论系统"><a href="#评论系统" class="headerlink" title="评论系统"></a>评论系统</h3><p><img src="https://qiniu.tianwen42.top/picgo/1648215887113.png" alt="1648215887113"></p><h3 id="旋转小人"><a href="#旋转小人" class="headerlink" title="旋转小人"></a>旋转小人</h3><p><img src="https://qiniu.tianwen42.top/picgo/1648215929255.png" alt="1648215929255"></p><h3 id="修复图片点击不显示"><a href="#修复图片点击不显示" class="headerlink" title="修复图片点击不显示"></a>修复图片点击不显示</h3><p><img src="https://qiniu.tianwen42.top/picgo/1648215973789.png" alt="1648215973789"></p><h3 id="添加百度统计"><a href="#添加百度统计" class="headerlink" title="添加百度统计"></a>添加百度统计</h3><p><img src="https://qiniu.tianwen42.top/picgo/1648216164156.png" alt="1648216164156"></p>]]></content>
      
      
      <categories>
          
          <category> 折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 魔改记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信条</title>
      <link href="/posts/9306d2a9.html"/>
      <url>/posts/9306d2a9.html</url>
      
        <content type="html"><![CDATA[<p>信条</p><span id="more"></span><h1 id="不要浪费时间"><a href="#不要浪费时间" class="headerlink" title="不要浪费时间"></a>不要浪费时间</h1><p>我最近时常感觉到术业有专攻这句话是对的，人的精力有限，不可能什么领域都触及，即使我深人与人之间的差距，也许有些人拼搏一生达到的高度是别人的一出生就拥有的，但那又怎么样呢？选中一个领域深深的扎下去就好，卓越并非一日之功，要耐住寂寞，保持一颗学徒的心！我来此地为的不是体验生活，一往无前，便是我的信条！</p><h1 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h1><p>我是十分赞同某手册里的这句话，因为这实在是个大坑，至少在现在这么卷的时代是的。</p><blockquote><p>我手上一本1300页的数学手册，上面记录了人类文明从远古直到二十世纪后半叶的主要数学成果。而我校高等数学教材（上下册）所涵盖的内容，不超过其中的130页。一个真正有志于建造科学大厦的人，是不应抱着一块儿砖头精雕细琢的。</p><p>学习最需要的，不是悲壮的毅力，而是对无限未知的渴求。</p><p>最终来说，学习知识的目的是为后继的知识铺垫，以及培养创造性的思维。所谓有效率的学习，应当是以最高的效率获取知识，服务这两个目标。从现状来看，我们想要把什么都搞扎实的学习习惯，其效率是极端低下的，而在我们通过大量习题，最终扎实掌握的信息里，有效的“知识”却又是如此的少。</p></blockquote><p> 我想起乐老师说的，学数学，更多是一种思考的方法，要常思考，不然时间过去了，有些人的眼睛里有些小模糊，小浑浊，不如刚上大学时那么的明亮了，现在仔细揣度一下，确实如此。</p><h1 id="阿克琉斯之踵"><a href="#阿克琉斯之踵" class="headerlink" title="阿克琉斯之踵"></a>阿克琉斯之踵</h1><p>阿喀琉斯之踵（Achilles’ Heel），原指阿喀琉斯的脚后跟，因是其身体唯一一处没有浸泡到冥河水的地方，成为他唯一的弱点。阿喀琉斯后来在特洛伊战争中被毒箭射中脚踝而丧命。现引申为致命的弱点，要害。 阿喀琉斯，是凡人英雄珀琉斯和海洋女神忒提斯的爱子。忒提斯为了让儿子炼成“金钟罩”，在他刚出生时就将其倒提着浸进冥河。遗憾的是，阿喀琉斯被母亲捏住的脚后跟却不慎露在水外，在全身留下了唯一一处“死穴”。后来，阿喀琉斯被帕里斯一箭射中脚踝而死去。后人常以“阿喀琉斯之踵”譬喻这样一个道理：即使是再强大的英雄，也有致命的死穴或软肋。</p><h1 id="银河帝国"><a href="#银河帝国" class="headerlink" title="银河帝国"></a>银河帝国</h1><p>突然想到了起很久之前看的银河帝国系列，</p><ol><li><a href="https://baike.baidu.com/item/%E5%9F%BA%E5%9C%B0/1691622">基地</a>(Foundation)</li><li><a href="https://baike.baidu.com/item/%E5%9F%BA%E5%9C%B0%E4%B8%8E%E5%B8%9D%E5%9B%BD">基地与帝国</a> (Foundation and Empire)</li><li><a href="https://baike.baidu.com/item/%E7%AC%AC%E4%BA%8C%E5%9F%BA%E5%9C%B0">第二基地</a> (Second Foudation)</li><li><a href="https://baike.baidu.com/item/%E5%9F%BA%E5%9C%B0%E5%89%8D%E5%A5%8F">基地前奏</a> (Prelude to Foundation)</li><li><a href="https://baike.baidu.com/item/%E8%BF%88%E5%90%91%E5%9F%BA%E5%9C%B0">迈向基地</a> (Forward the Foundation)</li><li><a href="https://baike.baidu.com/item/%E5%9F%BA%E5%9C%B0%E8%BE%B9%E7%BC%98">基地边缘</a> (Foundation’s Edge)</li><li><a href="https://baike.baidu.com/item/%E5%9F%BA%E5%9C%B0%E4%B8%8E%E5%9C%B0%E7%90%83">基地与地球</a> (Foundation and Earth)</li><li><a href="https://baike.baidu.com/item/%E6%88%91%EF%BC%8C%E6%9C%BA%E5%99%A8%E4%BA%BA/15993891">我，机器人</a> (I, Robot)</li><li><a href="https://baike.baidu.com/item/%E9%92%A2%E7%A9%B4">钢穴</a> (The Caves of Steel)</li><li><a href="https://baike.baidu.com/item/%E8%A3%B8%E9%98%B3">裸阳</a> (The Naked Sun)</li><li><a href="https://baike.baidu.com/item/%E6%9B%99%E5%85%89%E4%B8%AD%E7%9A%84%E6%9C%BA%E5%99%A8%E4%BA%BA">曙光中的机器人</a> (The Robots of Dawn)</li><li><a href="https://baike.baidu.com/item/%E6%9C%BA%E5%99%A8%E4%BA%BA%E4%B8%8E%E5%B8%9D%E5%9B%BD">机器人与帝国</a> (Robots and Empire)</li><li><a href="https://baike.baidu.com/item/%E7%B9%81%E6%98%9F%E8%8B%A5%E5%B0%98">繁星若尘</a> (The Stars, Like Dust)</li><li><a href="https://baike.baidu.com/item/%E6%98%9F%E7%A9%BA%E6%9A%97%E6%B5%81">星空暗流</a>(The Currents of Space)</li><li><a href="https://baike.baidu.com/item/%E8%8B%8D%E7%A9%B9%E4%B8%80%E7%B2%9F">苍穹一粟</a> (Pebblein the Sky)</li></ol><p><img src="http://cdn.tianwen42.top/img/picgo/20210623095935.jpeg" alt="img"></p><p>我觉得很适合在这个词了，一个统治超过2500万个住人行星、疆域横跨十万光年、总计数兆亿人口的庞大帝国崛起——银河帝国，虽然毫无征兆，但已存在一万两千年之久的银河帝国突然灭亡，整个银河进入黑暗时期，即使再过于强大也有着致命的弱点，那么从自己出发也同样适用，如今的国家博弈也适用，这就是我们常说的黑天鹅与灰犀牛事件。</p><p>强如银河帝国也有倾覆的一天，川陀，我还记得这个全宇宙的中心，想起来仍有些怀念.</p><h1 id="当时只道是寻常"><a href="#当时只道是寻常" class="headerlink" title="当时只道是寻常"></a>当时只道是寻常</h1><p>如果你对一个人有什么话要说的，就去说吧，果断一点。</p><blockquote><p>不乱于心 不困于情<br>不滞于物 不怠于身<br>不溺于思 不迷于境<br>不念过往 不畏将来</p></blockquote><h1 id="我对一个人最高的赞誉"><a href="#我对一个人最高的赞誉" class="headerlink" title="我对一个人最高的赞誉"></a>我对一个人最高的赞誉</h1><p>我对一个人最高的赞誉就是</p><blockquote><p>‘’他以他的方式度过了这一生’’</p></blockquote><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=530 height=86 src="//music.163.com/outchain/player?type=2&id=22174742&auto=1&height=66"></iframe>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 叭叭两句 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的书单</title>
      <link href="/posts/9daba997.html"/>
      <url>/posts/9daba997.html</url>
      
        <content type="html"><![CDATA[<p>下面是一些我读过的书</p><p>★ ★ ★ ★ ☆ ☆ ☆：推荐指数，七星制。</p><h2 id="文学小说"><a href="#文学小说" class="headerlink" title="文学小说"></a>文学小说</h2><ol><li><strong>《小王子》</strong> by 阿城 2015年9月 ★ ★ ★ ★ ★ ★ ★</li><li><strong>《追风筝的人》</strong> by 卡勒德·胡赛尼 2016年6月 ★ ★ ★ ★ ★ ☆ ☆</li><li><strong>《查令十字街84号》</strong> by 海莲·汉芙 2016年9月 ★ ★ ★ ★ ☆ ☆ ☆</li><li><strong>《围城》</strong> by 钱钟书 2017年1月 ★ ★ ★ ★ ★ ☆ ☆</li><li><strong>《一个陌生女人的来信》</strong> by 茨威格 2017年1月 ★ ★ ★ ★ ★ ★ ☆</li><li><strong>《局外人》</strong> by 茨威格 2017-1 ★ ★ ★ ★ ☆ ☆ ☆</li><li><strong>《摆渡人》</strong> by 克莱尔·麦克福尔 2019年3月28 ★ ☆ ☆ ☆ ☆ ☆ ☆</li><li><strong>《月亮与六便士》</strong> by 毛姆 2019年4月 ★ ★ ★ ★ ★ ☆ ☆</li><li><strong>《活着》</strong> by 余华 2019年5月★ ★ ★ ★ ★ ★ ☆</li></ol><h2 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h2><ol><li><p><strong>《万古江河》</strong> by <a href="https://baike.baidu.com/item/%E8%AE%B8%E5%80%AC%E4%BA%91/7418760">许倬云</a> 2016年9月 ★ ★ ★ ★ ★ ★ ☆ </p><blockquote><p>在世界文明存在与变化的剧烈大潮之中，讲述中国如何自处，如何看待自身的历史与文化？搞清楚中国从何处来，中国文化从何处来，才能明白要向何处去，非常不错的一本书</p></blockquote></li></ol><h2 id="经济"><a href="#经济" class="headerlink" title="经济"></a>经济</h2><ol><li><strong>《国富论》</strong> by 亚当斯密 2017年2月 ★ ★ ★ ☆ ☆ ☆ ☆</li><li><strong>《数据之巅》</strong> by 涂子沛 2019年6月 ★ ★ ★ ★ ☆ ☆ ☆</li></ol><h2 id="科幻"><a href="#科幻" class="headerlink" title="科幻"></a>科幻</h2><ol><li><p><strong>《银河帝国系列》</strong>by 艾萨克·阿西莫夫 2018年 ★ ★ ★ ★ ★ ★ ☆</p><blockquote><p>我觉得封神不为过，全系列15册，开创机器人三定律，放在现在也毫不违和，基地三部曲最好看</p></blockquote></li><li><p><strong>《三体·“地球往事”三部曲之一》</strong> by 刘慈欣 2016年4月 ★ ★ ★ ☆ ☆ ☆ ☆</p></li><li><p><strong>《流浪地球》</strong> by 刘慈欣 2019年3月 ★ ★ ★ ★ ☆ ☆ ☆</p></li></ol><h2 id="创业"><a href="#创业" class="headerlink" title="创业"></a>创业</h2><ol><li><strong>《从零到一》</strong> by 彼得·蒂尔 2015年6月 ★ ★ ★ ★ ☆ ☆ ☆</li></ol><h2 id="计算机"><a href="#计算机" class="headerlink" title="计算机"></a>计算机</h2><ol><li><strong>《淘宝技术这十年》</strong> by 子柳 2015年6月 ★ ★ ★ ★ ★ ☆ ☆</li></ol><h2 id="待读-x2F-在读"><a href="#待读-x2F-在读" class="headerlink" title="待读&#x2F;在读"></a>待读&#x2F;在读</h2><ol><li><p><strong>《女士品茶》</strong> by 萨尔斯伯格</p><blockquote><p>从女士品茶到统计科学</p></blockquote></li><li><p><strong>《Effective C++》</strong> by 侯捷 2021年12月 ★ ★ ★ ★ ★ ☆ ☆</p></li></ol><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=530 height=86 src="//music.163.com/outchain/player?type=2&id=28299268&auto=1&height=66"></iframe>]]></content>
      
      
      <categories>
          
          <category> 读书 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reading </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在这死去的人们</title>
      <link href="/posts/bc01.html"/>
      <url>/posts/bc01.html</url>
      
        <content type="html"><![CDATA[<h3 id="在这死去的人们"><a href="#在这死去的人们" class="headerlink" title="在这死去的人们"></a>在这死去的人们</h3><blockquote><p>这儿有一大片乌云</p><p>我能看见</p><p>在这死去的人们</p><p>乌云之下 不能散去</p></blockquote><blockquote><p>倒不是我能看见他们的魂灵</p><p>在空气中哀嚎，叫喊</p><p>哭泣 诉说</p><p>他们的躯体已经腐化</p><p>但他们的骨头还在那儿</p><p>真真切切地在那儿</p><p>在土地里挖掘</p></blockquote><blockquote><p>我看得见</p><p>那些骨头想出来</p><p>从阴冷的土里</p><p>爬出来</p><p>然后哀嚎 叫喊</p><p>哭泣 诉说</p><p>就连他们的骨头上</p><p>都布满伤痕</p><p>一个骨头挖不动了，下一个</p><p>发誓要让世人看见</p><p>可土地太厚，也太冷</p></blockquote><blockquote><p>在一个夏夜</p><p>我曾见过一个骨头</p><p>他要说些什么</p><p>他能说些什么</p><p>最后也只是无尽的磷火 伴他左右</p></blockquote><blockquote><p>朝着地底望去</p><p>俨然一个火的世界</p><p>将夏夜照亮 </p></blockquote><blockquote><p>找一株蒲公英</p><p>向她诉说</p><p>你们的故事</p><p>当她流浪到世界各地时</p><p>让她带给世人</p></blockquote><blockquote><p>至少</p><p>让地上的人 记住地下的人</p><p>让醒着的人 记住沉睡的人</p><p>让活着的人 记住死去的人</p></blockquote><p>——2019.10.3南京大屠杀纪念馆</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>变成一株蒲公英</title>
      <link href="/posts/8bdf.html"/>
      <url>/posts/8bdf.html</url>
      
        <content type="html"><![CDATA[<h2 id="变成一株蒲公英"><a href="#变成一株蒲公英" class="headerlink" title="变成一株蒲公英"></a>变成一株蒲公英</h2><blockquote><p>变成一株蒲公英</p><p>在深深的山谷里</p><p>寂静生长</p><p>等待一阵风吹过</p><p>带你去流浪</p><p>雪花般的躯体</p><p>一吹 消散了</p><p>不落一点痕迹地</p><p>消散了 散落到各个地方</p><p>在田间地头</p><p>在城市街角</p><p>在某个女孩的花盆里</p><p>在南方 北方 东方 西方</p><p>春风一拂</p><p>这片大地又长出了无数的蒲公英</p><p>你看着这一切</p><p>笑出了声</p></blockquote><p>​    </p><p>——2019.9.28</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>行囊</title>
      <link href="/posts/17b.html"/>
      <url>/posts/17b.html</url>
      
        <content type="html"><![CDATA[<h2 id="行囊"><a href="#行囊" class="headerlink" title="行囊"></a>行囊</h2><blockquote><p>让我看看你的模样</p><p>像画里的黄昏</p><p>让我看看你的模样</p><p>像夜里的萤火</p><p>让我看看你的模样</p><p>像炉中的火焰</p><p>来 抱一下吧</p><p>像朋友那样</p><p>你的孩子已经长大</p><p>请让我背上行囊</p><p>启程</p><p>往北方 去远方</p><p>最后的告别</p><p>让你看看我 让我看看你</p><p>我在脑海幻想</p><p>当我归来</p><p>你是否还是离开时的模样</p><p>再见了 我的家</p></blockquote><p>——2019.9.03</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 诗 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
