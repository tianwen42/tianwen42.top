<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>无涯</title>
  
  <subtitle>YangLin&#39;s Blog</subtitle>
  <link href="http://tiawnen42.top/atom.xml" rel="self"/>
  
  <link href="http://tiawnen42.top/"/>
  <updated>2022-06-07T06:31:17.768Z</updated>
  <id>http://tiawnen42.top/</id>
  
  <author>
    <name>阳林</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>网络好吵闹</title>
    <link href="http://tiawnen42.top/posts/caeb.html"/>
    <id>http://tiawnen42.top/posts/caeb.html</id>
    <published>2022-05-05T01:14:45.000Z</published>
    <updated>2022-06-07T06:31:17.768Z</updated>
    
    <content type="html"><![CDATA[<h2 id="zhihuer"><a href="#zhihuer" class="headerlink" title="zhihuer"></a>zhihuer</h2><p>写在前面</p><blockquote><p>人是复杂而又立体的，很难想象众多特质竟然会在同一个人身上体现出来</p></blockquote><p>互联网原本为了互联世界而被创造，是一项十分有远见的巨大工程，如今我们却成为一个个信息孤岛，每天为了那么一点屁大点事也要吵得不可开交，点名某乎，某博，算是给他们玩明白了，虽然我没用过微博，但应该也是十有八九，每几十分钟轮番刷新热榜，再添上热度，看着这么多人已经关注了，你会不会也想点进去看看？大抵是会的，毕竟在信息爆炸的时代，都生怕错过一点点东西，看热闹不嫌事大，人类的吃瓜本质，乌合之众罢了，其本质就是在贩卖焦虑，将这种情绪扩大，设置对立情绪，互联网本是一个很好的工具，跨越时间，跨越大海，直面另一端的人，但现在互联网的戾气越来越重，看过这些小作文，与网友们争吵过后，生活也并不会好转，不过是徒增烦恼。</p><p>某乎一众问题都是，</p><blockquote><p>关于xxxxxx，可能会有xxxxx影响？</p></blockquote><p>具体可以看下面随手截的一张图，这样的问题方式就很奇怪，千篇一律的推送系统风格，全都以问号❓结尾，画风诡异，像在打人工智能牌，信息茧房初现，每一个问题下全都是小故事，</p><p>再看一个具体问题：<strong>如何看待台州 4 女子寻刺激开保时捷去菜地偷菜一人当场被抓，目前均被行拘?</strong></p><blockquote><ol><li>寻刺激</li><li>开保时捷</li><li>偷菜被抓</li></ol></blockquote><p>这一个问题把人们<strong>吃瓜</strong>的天性，<strong>疫情</strong>当下的拘束，和经济不好的<strong>仇富</strong>情绪，就这么揉吧揉吧，丢了出来，怀疑推荐知乎系统会把这些舆情较高的话题自动生成问题，人工垃圾堆罢了</p><p><img src="https://qiniu.tianwen42.top/picgo/20220505093409.png" alt="image-20220505093409647"></p><p>想到这里，叮咚，今日的在知乎热榜推送果然又出现在通知栏中，遂卸载之。</p><h2 id="IP地域显示"><a href="#IP地域显示" class="headerlink" title="IP地域显示"></a>IP地域显示</h2><p>​        这个功能的确好，省的一些营销号放一些垃圾东西，还有一些外国ip无脑黑，国内确实不少头脑不清醒的人，特别容易被带节奏，看看抖音快手之流就明白了，但ip显示地域这招防的是这些人，没有能力分辨是非，就老老实实呆在局域网里面，就不要给国家添乱了，这也提醒了列位，在信息爆炸的时代，不要丢了心中那杆秤啊</p><h2 id="末了"><a href="#末了" class="headerlink" title="末了"></a>末了</h2><p>以一个知乎惯用风格的❓结束吧</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;zhihuer&quot;&gt;&lt;a href=&quot;#zhihuer&quot; class=&quot;headerlink&quot; title=&quot;zhihuer&quot;&gt;&lt;/a&gt;zhihuer&lt;/h2&gt;&lt;p&gt;写在前面&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;人是复杂而又立体的，很难想象众多特质竟然会在同一个</summary>
      
    
    
    
    <category term="生活" scheme="http://tiawnen42.top/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="吵闹" scheme="http://tiawnen42.top/tags/%E5%90%B5%E9%97%B9/"/>
    
  </entry>
  
  <entry>
    <title>算法优化（以斐波那契数列为例）</title>
    <link href="http://tiawnen42.top/posts/bd6d.html"/>
    <id>http://tiawnen42.top/posts/bd6d.html</id>
    <published>2022-04-28T12:41:46.000Z</published>
    <updated>2022-04-29T08:33:44.373Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目-fb"><a href="#题目-fb" class="headerlink" title="题目.fb"></a>题目.fb</h2><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><blockquote><p>分别从几个方面优化，在写中。。。。</p></blockquote><h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><h3 id="最朴素的方法（非递归）"><a href="#最朴素的方法（非递归）" class="headerlink" title="最朴素的方法（非递归）"></a>最朴素的方法（非递归）</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int main() &#123;    int t1 &#x3D; 0, t2 &#x3D; 1, nextTerm &#x3D; 0, n;    cout &lt;&lt; &quot;Enter a positive number: &quot;;    cin &gt;&gt; n;    &#x2F;&#x2F; displays the first two terms which is always 0 and 1    cout &lt;&lt; &quot;Fibonacci Series: &quot; &lt;&lt; t1 &lt;&lt; &quot;, &quot; &lt;&lt; t2 &lt;&lt; &quot;, &quot;;    nextTerm &#x3D; t1 + t2;    while(nextTerm &lt;&#x3D; n) &#123;        cout &lt;&lt; nextTerm &lt;&lt; &quot;, &quot;;        t1 &#x3D; t2;        t2 &#x3D; nextTerm;        nextTerm &#x3D; t1 + t2;    &#125;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><blockquote><p>递归时间复杂度 &#x3D; 解决一个子问题时间*子问题个数，</p><p> fb（n）&#x3D;   fb（n-1）+fb（n-2）,是一个二叉树结构</p><p>递归的复杂度O(2^n)，你这样子就慢了:dog:</p></blockquote><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Solution &#123;public  int fb(int n) &#123;    if (n &#x3D;&#x3D; 1) &#123;      return 1;    &#125;    if (n &#x3D;&#x3D; 2) &#123;      return 2;    &#125;    return numWays(n - 1) + numWays(n - 2);  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="DP"><a href="#DP" class="headerlink" title="DP"></a>DP</h3><blockquote><p>用一个hashmap存储结果</p><p>第一步，算顶部的两项f（10）&#x3D; f(9) + f(8)</p><p>第二步，算顶部次级节点f(9) &#x3D; f（8）+ f（7），可以看到fb（8）重复</p><p>第三步，剪枝，跳过fb（8）节点</p><p>直到叶节点，递归树撸到底</p><p>DP是一种有记忆的算法</p></blockquote><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &lt;unordered_map&gt;using namespace std;class Solution &#123;  unordered_map&lt;long long, long long&gt; map;public:  long long numWays(int n) &#123;    if (n &#x3D;&#x3D; 0) &#123;      return 1;    &#125;    if (n &lt;&#x3D; 2) &#123;      return n;    &#125;    if (map.count(n) !&#x3D; 0) &#123;      return map[n];    &#125; else &#123;      map[n] &#x3D; numWays(n - 1) + numWays(n - 2);      return numWays(n);    &#125;  &#125;&#125;;int main() &#123;  Solution tool &#x3D; Solution();  for (int i &#x3D; 1; i &lt; 50; i++) &#123;    cout &lt;&lt; i &lt;&lt; &quot;HASH  &quot; &lt;&lt; tool.numWays(i) &lt;&lt; endl;  &#125;  &#x2F;&#x2F; cout &lt;&lt; Solution().numWays(2);  cout &lt;&lt;LLONG_MAX;  return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>相似    <a href="https://leetcode-cn.com/problems/longest-increasing-subsequence">300. 最长递增子序列</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;题目-fb&quot;&gt;&lt;a href=&quot;#题目-fb&quot; class=&quot;headerlink&quot; title=&quot;题目.fb&quot;&gt;&lt;/a&gt;题目.fb&lt;/h2&gt;&lt;h2 id=&quot;解题思路&quot;&gt;&lt;a href=&quot;#解题思路&quot; class=&quot;headerlink&quot; title=&quot;解题思路&quot;</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="http://tiawnen42.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://tiawnen42.top/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="leetcode" scheme="http://tiawnen42.top/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>力扣2022-04-19</title>
    <link href="http://tiawnen42.top/posts/9c17.html"/>
    <id>http://tiawnen42.top/posts/9c17.html</id>
    <published>2022-04-19T14:43:23.000Z</published>
    <updated>2022-04-28T13:54:29.370Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><ol start="342"><li>4的幂</li></ol><p>难度：简单</p><p>给定一个整数，写一个函数来判断它是否是 4 的幂次方。如果是，返回 true ；否则，返回 false 。</p><p>整数 n 是 4 的幂次方需满足：存在整数 x 使得 n &#x3D;&#x3D; 4<sup>x</sup></p><p><strong>示例 1：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：n &#x3D; 16输出：true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>示例 2：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：n &#x3D; 5输出：false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>示例 3：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：n &#x3D; 1输出：true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>提示：</strong></p><ul><li>-2<sup>31</sup> &lt;&#x3D; n &lt;&#x3D; 2<sup>31</sup> - 1</li></ul><p><strong>进阶：</strong>你能不使用循环或者递归来完成本题吗？</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/power-of-four/">https://leetcode-cn.com/problems/power-of-four/</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><blockquote><p>4的n次幂模4  和 4的 n-k次幂模4 都为0</p></blockquote><h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;* * @lc app&#x3D;leetcode.cn id&#x3D;342 lang&#x3D;cpp * * [342] 4的幂 *&#x2F;&#x2F;&#x2F; @lc code&#x3D;startclass Solution &#123;public:    bool isPowerOfFour(int num) &#123;        return num&gt;0 &amp;&amp; (num &#x3D;&#x3D; 1 ||(num%4&#x3D;&#x3D;0 &amp;&amp; isPowerOfFour(num&#x2F;4)));    &#125;&#125;;&#x2F;&#x2F; @lc code&#x3D;end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;ol start=&quot;342&quot;&gt;
&lt;li&gt;4的幂&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;难度：简单&lt;/p&gt;
&lt;p&gt;给定一个整数，写一个函数来判断它是否是 4</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="http://tiawnen42.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://tiawnen42.top/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="leetcode" scheme="http://tiawnen42.top/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>力扣2022-04-16</title>
    <link href="http://tiawnen42.top/posts/9857.html"/>
    <id>http://tiawnen42.top/posts/9857.html</id>
    <published>2022-04-16T15:44:03.000Z</published>
    <updated>2022-04-28T13:54:29.370Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目-剑指-Offer-II-079-所有子集"><a href="#题目-剑指-Offer-II-079-所有子集" class="headerlink" title="题目.剑指 Offer II 079. 所有子集"></a>题目.剑指 Offer II 079. 所有子集</h2><p>难度：中等</p><p>给定一个整数数组 nums ，数组中的元素 <strong>互不相同</strong> 。返回该数组所有可能的子集（幂集）。</p><p>解集 <strong>不能</strong> 包含重复的子集。你可以按 <strong>任意顺序</strong> 返回解集。</p><p><strong>示例 1：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：nums &#x3D; [1,2,3]输出：[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>示例 2：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：nums &#x3D; [0]输出：[[],[0]]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>提示：</strong></p><ul><li>1 &lt;&#x3D; nums.length &lt;&#x3D; 10</li><li>-10 &lt;&#x3D; nums[i] &lt;&#x3D; 10</li><li>nums 中的所有元素 <strong>互不相同</strong></li></ul><p>注意：本题与主站 78 题相同： <a href="https://leetcode-cn.com/problems/subsets/">https://leetcode-cn.com/problems/subsets/</a></p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/TVdhkn/">https://leetcode-cn.com/problems/TVdhkn/</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><blockquote><p>可以正常遍历，也可以用dfs</p></blockquote><h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Solution &#123;public:    vector&lt;vector&lt;int&gt;&gt; subsets(vector&lt;int&gt;&amp; nums) &#123;        vector&lt;vector&lt;int&gt;&gt; res&#123;vector&lt;int&gt;()&#125;;        int i, j, len;        for (i&#x3D;0; i&lt;nums.size(); i++) &#123;            len &#x3D; res.size();            for (j&#x3D;0; j&lt;len; j++) &#123;                auto tmp &#x3D; res[j];                tmp.push_back(nums[i]);                res.push_back(tmp);            &#125;        &#125;        return res;    &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;题目-剑指-Offer-II-079-所有子集&quot;&gt;&lt;a href=&quot;#题目-剑指-Offer-II-079-所有子集&quot; class=&quot;headerlink&quot; title=&quot;题目.剑指 Offer II 079. 所有子集&quot;&gt;&lt;/a&gt;题目.剑指 Offer II 0</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="http://tiawnen42.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://tiawnen42.top/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="leetcode" scheme="http://tiawnen42.top/tags/leetcode/"/>
    
    <category term="剑指 Offer" scheme="http://tiawnen42.top/tags/%E5%89%91%E6%8C%87-Offer/"/>
    
  </entry>
  
  <entry>
    <title>力扣2022-04-14</title>
    <link href="http://tiawnen42.top/posts/59d6.html"/>
    <id>http://tiawnen42.top/posts/59d6.html</id>
    <published>2022-04-14T13:38:00.000Z</published>
    <updated>2022-04-14T13:51:26.378Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目22-括号生成"><a href="#题目22-括号生成" class="headerlink" title="题目22.括号生成"></a>题目22.括号生成</h2><p>难度：中等</p><p>数字 n 代表生成括号的对数，请你设计一个函数，用于能够生成所有可能的并且 **有效的 **括号组合。</p><p><strong>示例 1：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：n &#x3D; 3输出：[&quot;((()))&quot;,&quot;(()())&quot;,&quot;(())()&quot;,&quot;()(())&quot;,&quot;()()()&quot;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>示例 2：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：n &#x3D; 1输出：[&quot;()&quot;]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>提示：</strong></p><ul><li>1 &lt;&#x3D; n &lt;&#x3D; 8</li></ul><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/generate-parentheses/">https://leetcode-cn.com/problems/generate-parentheses/</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><blockquote><p>dfs，左右子树为（），刚好对应二叉树结构</p></blockquote><h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Solution &#123;public:    vector&lt;string&gt; generateParenthesis(int n) &#123;        vector&lt;string&gt; res;        if (n &lt;&#x3D; 0) return res;        dfs(n, &quot;&quot;, res, 0, 0);        return res;    &#125;    void dfs(int n, string path, vector&lt;string&gt;&amp; res, int open, int close) &#123;        if (open &gt; n || close &gt; open) return;        if (path.length() &#x3D;&#x3D; 2 * n) &#123;            res.push_back(path);            return;        &#125;        dfs(n, path + &quot;(&quot;, res, open + 1, close);        dfs(n, path + &quot;)&quot;, res, open, close + 1);    &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;题目22-括号生成&quot;&gt;&lt;a href=&quot;#题目22-括号生成&quot; class=&quot;headerlink&quot; title=&quot;题目22.括号生成&quot;&gt;&lt;/a&gt;题目22.括号生成&lt;/h2&gt;&lt;p&gt;难度：中等&lt;/p&gt;
&lt;p&gt;数字 n 代表生成括号的对数，请你设计一个函数，用于能够生</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="http://tiawnen42.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://tiawnen42.top/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="leetcode" scheme="http://tiawnen42.top/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>力扣2022-04-13</title>
    <link href="http://tiawnen42.top/posts/9b97.html"/>
    <id>http://tiawnen42.top/posts/9b97.html</id>
    <published>2022-04-13T06:21:00.000Z</published>
    <updated>2022-04-13T10:23:23.177Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目35-搜索插入位置"><a href="#题目35-搜索插入位置" class="headerlink" title="题目35.搜索插入位置"></a>题目35.搜索插入位置</h2><p>难度：简单</p><p>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</p><p>请必须使用时间复杂度为 O(log n) 的算法。</p><p><strong>示例 1:</strong></p><pre class="line-numbers language-none"><code class="language-none">输入: nums &#x3D; [1,3,5,6], target &#x3D; 5输出: 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>示例 2:</strong></p><pre class="line-numbers language-none"><code class="language-none">输入: nums &#x3D; [1,3,5,6], target &#x3D; 2输出: 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>示例 3:</strong></p><pre class="line-numbers language-none"><code class="language-none">输入: nums &#x3D; [1,3,5,6], target &#x3D; 7输出: 4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>提示:</strong></p><ul><li>1 &lt;&#x3D; nums.length &lt;&#x3D; 10<sup>4</sup></li><li>-10<sup>4</sup> &lt;&#x3D; nums[i] &lt;&#x3D; 10<sup>4</sup></li><li>nums 为 **无重复元素 **的 **升序 **排列数组</li><li>-10<sup>4</sup> &lt;&#x3D; target &lt;&#x3D; 10<sup>4</sup></li></ul><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/search-insert-position/">https://leetcode-cn.com/problems/search-insert-position/</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><blockquote><p>简单二分，要求O(log n) ，尽量不要暴力搜索</p></blockquote><h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Solution &#123;public:    int searchInsert(vector&lt;int&gt;&amp; nums, int target) &#123;        int left&#x3D;0;        int right&#x3D;nums.size()-1;        int mid&#x3D;left+(right-left)&#x2F;2;        if(target&gt;nums[right])&#123;            return right+1;        &#125;        while(left&lt;right)&#123;            if(nums[mid]&#x3D;&#x3D;target)&#123;                return mid;            &#125;            if(nums[mid]&lt;target)&#123;                left&#x3D;mid+1;            &#125;else&#123;                right&#x3D;mid;            &#125;            mid&#x3D;left+(right-left)&#x2F;2;        &#125;        return mid;    &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;题目35-搜索插入位置&quot;&gt;&lt;a href=&quot;#题目35-搜索插入位置&quot; class=&quot;headerlink&quot; title=&quot;题目35.搜索插入位置&quot;&gt;&lt;/a&gt;题目35.搜索插入位置&lt;/h2&gt;&lt;p&gt;难度：简单&lt;/p&gt;
&lt;p&gt;给定一个排序数组和一个目标值，在数组中找到</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="http://tiawnen42.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://tiawnen42.top/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="leetcode" scheme="http://tiawnen42.top/tags/leetcode/"/>
    
    <category term="二分法" scheme="http://tiawnen42.top/tags/%E4%BA%8C%E5%88%86%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>力扣2022-04-11</title>
    <link href="http://tiawnen42.top/posts/5a16.html"/>
    <id>http://tiawnen42.top/posts/5a16.html</id>
    <published>2022-04-11T06:11:00.000Z</published>
    <updated>2022-04-13T10:25:31.137Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目42-接雨水"><a href="#题目42-接雨水" class="headerlink" title="题目42.接雨水"></a>题目42.接雨水</h2><p>难度：困难</p><p>给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。</p><p><strong>示例 1：</strong></p><img style="height: 161px; width: 412px;" src="https://qiniu.tianwen42.top/picgo/rainwatertrap.png"><pre class="line-numbers language-none"><code class="language-none">输入：height &#x3D; [0,1,0,2,1,0,1,3,2,1,2,1]输出：6解释：上面是由数组 [0,1,0,2,1,0,1,3,2,1,2,1] 表示的高度图，在这种情况下，可以接 6 个单位的雨水（蓝色部分表示雨水）。 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>示例 2：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：height &#x3D; [4,2,0,3,2,5]输出：9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>提示：</strong></p><ul><li>n &#x3D;&#x3D; height.length</li><li>1 &lt;&#x3D; n &lt;&#x3D; 2 * 10<sup>4</sup></li><li>0 &lt;&#x3D; height[i] &lt;&#x3D; 10<sup>5</sup></li></ul><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/trapping-rain-water/">https://leetcode-cn.com/problems/trapping-rain-water/</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><blockquote><p>日常接雨水，暴力搜索，脑子不够</p></blockquote><h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><h3 id="暴力搜索"><a href="#暴力搜索" class="headerlink" title="暴力搜索"></a>暴力搜索</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Solution &#123;public:    int trap(vector&lt;int&gt;&amp; nums) &#123;        int maxHeight&#x3D;0;                int rain&#x3D;0;        for(int i&#x3D;0;i&lt;nums.size();i++)&#123;            maxHeight&#x3D;max(nums[i],maxHeight);        &#125;        for(int i&#x3D;0;i&lt;nums.size();i++)&#123;            int maxleft&#x3D;0,maxright&#x3D;0;            &#x2F;&#x2F;左侧最大高度            for(int j&#x3D;0;j&lt;&#x3D;i;j++)&#123;                maxleft&#x3D;max(maxleft,nums[j]);            &#125;            &#x2F;&#x2F; 右侧最大高度            for(int j&#x3D;i;j&lt;nums.size();j++)&#123;                maxright&#x3D;max(maxright,nums[j]);            &#125;            &#x2F;&#x2F;当前位置可接高度min(Maxleft,Maxright),取决于左右最大高度低值            rain+&#x3D;min(maxright, maxleft)-nums[i];;        &#125;        return rain;    &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>超时了！！！×&amp;%￥#@……。</p><p>果然日常接雨水啊！！！！！</p></blockquote><h3 id="DP法"><a href="#DP法" class="headerlink" title="DP法"></a>DP法</h3><blockquote><p>看看别人的，需要从两头重新遍历一遍求出左右两侧的最大高度，这里是有很多重复计算的，很明显最大高度是可以记忆化的，用两个数组分别存每个位置的左右最大高度，</p><p>int[][] dp &#x3D; new int [n] [2],其中，dp [i] [0] 表示下标i的柱子左边的最大值，dp[i] [1] 表示下标i的柱子右边的最大值。</p><p>类比这题</p><ul><li><a href="https://tianwen42.top/posts/ea37.html">807.城市天际线</a></li></ul></blockquote><p>左右高度数组如下图所示</p><p><img src="https://qiniu.tianwen42.top/picgo/rain0421.jpg" alt="img"></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Solution &#123;public:int trap(vector&lt;int&gt;&amp; height) &#123;int n &#x3D; height.size();&#x2F;&#x2F; left[i]表示i左边的最大值，right[i]表示i右边的最大值vector&lt;int&gt; left(n), right(n);for (int i &#x3D; 1; i &lt; n; i++) &#123;left[i] &#x3D; max(left[i - 1], height[i - 1]);&#125;for (int i &#x3D; n - 2; i &gt;&#x3D; 0; i--) &#123;right[i] &#x3D; max(right[i + 1], height[i + 1]);&#125;int water &#x3D; 0;for (int i &#x3D; 0; i &lt; n; i++) &#123;int level &#x3D; min(left[i], right[i]);water +&#x3D; max(0, level - height[i]);&#125;return water;&#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;题目42-接雨水&quot;&gt;&lt;a href=&quot;#题目42-接雨水&quot; class=&quot;headerlink&quot; title=&quot;题目42.接雨水&quot;&gt;&lt;/a&gt;题目42.接雨水&lt;/h2&gt;&lt;p&gt;难度：困难&lt;/p&gt;
&lt;p&gt;给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="http://tiawnen42.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://tiawnen42.top/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="leetcode" scheme="http://tiawnen42.top/tags/leetcode/"/>
    
    <category term="接雨水" scheme="http://tiawnen42.top/tags/%E6%8E%A5%E9%9B%A8%E6%B0%B4/"/>
    
  </entry>
  
  <entry>
    <title>力扣2022-04-10-2</title>
    <link href="http://tiawnen42.top/posts/7bb.html"/>
    <id>http://tiawnen42.top/posts/7bb.html</id>
    <published>2022-04-10T15:53:12.000Z</published>
    <updated>2022-04-13T10:23:23.459Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目852-山脉数组的峰顶索引"><a href="#题目852-山脉数组的峰顶索引" class="headerlink" title="题目852.山脉数组的峰顶索引"></a>题目852.山脉数组的峰顶索引</h2><p>难度：简单</p><p><strong>山脉数组</strong><code>arr</code></p><ul><li>arr.length &gt;&#x3D; 3</li><li>存在 i（0 &lt; i &lt; arr.length - 1）使得：  <ul>      <li>arr[0] < arr[1] < ... arr[i-1] < arr[i] </li>      <li>arr[i] > arr[i+1] > ... > arr[arr.length - 1]</li>  </ul></li></ul><p>给你由整数组成的山脉数组 arr ，返回任何满足 arr[0] &lt; arr[1] &lt; … arr[i - 1] &lt; arr[i] &gt; arr[i + 1] &gt; … &gt; arr[arr.length - 1] 的下标 i 。</p><p><strong>示例 1：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：arr &#x3D; [0,1,0]输出：1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>示例 2：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：arr &#x3D; [0,2,1,0]输出：1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>示例 3：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：arr &#x3D; [0,10,5,2]输出：1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>示例 4：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：arr &#x3D; [3,4,5,1]输出：2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>示例 5：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：arr &#x3D; [24,69,100,99,79,78,67,36,26,19]输出：2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>提示：</strong></p><ul><li>3 &lt;&#x3D; arr.length &lt;&#x3D; 10<sup>4</sup></li><li>0 &lt;&#x3D; arr[i] &lt;&#x3D; 10<sup>6</sup></li><li>题目数据保证 arr 是一个山脉数组</li></ul><p><strong>进阶：</strong>很容易想到时间复杂度 O(n) 的解决方案，你可以设计一个 O(log(n)) 的解决方案吗？</p><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/peak-index-in-a-mountain-array/">https://leetcode-cn.com/problems/peak-index-in-a-mountain-array/</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><blockquote><ol><li>直接暴力法arr[i]&gt;arr[i-1]&amp;&amp;arr[i]&gt;arr[i+1]</li><li>二分法</li></ol><p>支持暴力法和二分法，显然二分法更快</p></blockquote><h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;暴力法class Solution &#123;public:    int peakIndexInMountainArray(vector&lt;int&gt;&amp; arr) &#123;        if(arr[0]&gt;arr[1])&#123;            return 0;        &#125;        for(int i&#x3D;1;i&lt;arr.size()-1;i++)&#123;            if(arr[i]&gt;arr[i-1]&amp;&amp;arr[i]&gt;arr[i+1])&#123;                return i;            &#125;         &#125;        return arr.size()-1;    &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Solution &#123;public:    int peakIndexInMountainArray(vector&lt;int&gt;&amp; arr) &#123;        &#x2F;&#x2F; if(arr[0]&gt;arr[1])&#123;return 0;&#125;        int left&#x3D;0,right&#x3D;arr.size()-1,mid&#x3D;left+(right-left)&#x2F;2;        while(left!&#x3D;right)&#123;            if(arr[left]&lt;arr[mid])&#123;                right&#x3D;mid;            &#125;else&#123;                left&#x3D;mid+1;            &#125;            mid&#x3D;left+(right-left)&#x2F;2;        &#125;        return left;    &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;题目852-山脉数组的峰顶索引&quot;&gt;&lt;a href=&quot;#题目852-山脉数组的峰顶索引&quot; class=&quot;headerlink&quot; title=&quot;题目852.山脉数组的峰顶索引&quot;&gt;&lt;/a&gt;题目852.山脉数组的峰顶索引&lt;/h2&gt;&lt;p&gt;难度：简单&lt;/p&gt;
&lt;p&gt;&lt;stro</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="http://tiawnen42.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://tiawnen42.top/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="leetcode" scheme="http://tiawnen42.top/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>力扣2022-04-10</title>
    <link href="http://tiawnen42.top/posts/b877.html"/>
    <id>http://tiawnen42.top/posts/b877.html</id>
    <published>2022-04-10T15:40:48.000Z</published>
    <updated>2022-04-13T10:23:23.459Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目374-猜数字大小"><a href="#题目374-猜数字大小" class="headerlink" title="题目374.猜数字大小"></a>题目374.猜数字大小</h2><p>难度：简单</p><p>猜数字游戏的规则如下：</p><ul><li>每轮游戏，我都会从 <strong>1</strong> 到 <em><strong>n</strong></em> 随机选择一个数字。 请你猜选出的是哪个数字。</li><li>如果你猜错了，我会告诉你，你猜测的数字比我选出的数字是大了还是小了。</li></ul><p>你可以通过调用一个预先定义好的接口 int guess(int num) 来获取猜测结果，返回值一共有 3 种可能的情况（-1，1 或 0）：</p><ul><li>-1：我选出的数字比你猜的数字小 pick &lt; num</li><li>1：我选出的数字比你猜的数字大 pick &gt; num</li><li>0：我选出的数字和你猜的数字一样。恭喜！你猜对了！pick &#x3D;&#x3D; num</li></ul><p>返回我选出的数字。</p><p><strong>示例 1：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：n &#x3D; 10, pick &#x3D; 6输出：6<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>示例 2：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：n &#x3D; 1, pick &#x3D; 1输出：1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>示例 3：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：n &#x3D; 2, pick &#x3D; 1输出：1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>示例 4：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：n &#x3D; 2, pick &#x3D; 2输出：2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>提示：</strong></p><ul><li>1 &lt;&#x3D; n &lt;&#x3D; 2<sup>31</sup> - 1</li><li>1 &lt;&#x3D; pick &lt;&#x3D; n</li></ul><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/guess-number-higher-or-lower/">https://leetcode-cn.com/problems/guess-number-higher-or-lower/</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><blockquote><p><strong>二分核心</strong>，精髓，这样写防止越界，mid &#x3D; left + ((right - left) &#x2F; 2);</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">!=</span>r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> l <span class="token operator">+</span><span class="token punctuation">(</span>r <span class="token operator">-</span> l<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">guess</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> l <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> r <span class="token operator">=</span> mid<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token keyword">extends</span> <span class="token class-name">GuessGame</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">guessNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> r <span class="token operator">=</span> n<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">!=</span>r<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> l <span class="token operator">+</span><span class="token punctuation">(</span>r <span class="token operator">-</span> l<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">guess</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> l <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> r <span class="token operator">=</span> mid<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> l<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;题目374-猜数字大小&quot;&gt;&lt;a href=&quot;#题目374-猜数字大小&quot; class=&quot;headerlink&quot; title=&quot;题目374.猜数字大小&quot;&gt;&lt;/a&gt;题目374.猜数字大小&lt;/h2&gt;&lt;p&gt;难度：简单&lt;/p&gt;
&lt;p&gt;猜数字游戏的规则如下：&lt;/p&gt;
&lt;ul&gt;
</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="http://tiawnen42.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://tiawnen42.top/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="leetcode" scheme="http://tiawnen42.top/tags/leetcode/"/>
    
    <category term="二分查找" scheme="http://tiawnen42.top/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    
    <category term="核心" scheme="http://tiawnen42.top/tags/%E6%A0%B8%E5%BF%83/"/>
    
  </entry>
  
  <entry>
    <title>力扣2022-04-07</title>
    <link href="http://tiawnen42.top/posts/ea37.html"/>
    <id>http://tiawnen42.top/posts/ea37.html</id>
    <published>2022-04-07T01:59:30.000Z</published>
    <updated>2022-04-11T06:14:12.065Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目2229-Check-if-an-Array-Is-Consecutive"><a href="#题目2229-Check-if-an-Array-Is-Consecutive" class="headerlink" title="题目2229.Check if an Array Is Consecutive"></a>题目2229.Check if an Array Is Consecutive</h2><p>难度：简单</p><p>Given an integer array nums, return true <em>if </em>nums<em> is <strong>consecutive</strong>, otherwise return </em>false<em>.</em></p><p>An array is **consecutive **if it contains every number in the range [x, x + n - 1] (<strong>inclusive</strong>), where x is the minimum number in the array and n is the length of the array.</p><p><strong>Example 1:</strong></p><pre class="line-numbers language-none"><code class="language-none">Input: nums &#x3D; [1,3,4,2]Output: trueExplanation:The minimum value is 1 and the length of nums is 4.All of the values in the range [x, x + n - 1] &#x3D; [1, 1 + 4 - 1] &#x3D; [1, 4] &#x3D; (1, 2, 3, 4) occur in nums.Therefore, nums is consecutive.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Example 2:</strong></p><pre class="line-numbers language-none"><code class="language-none">Input: nums &#x3D; [1,3]Output: falseExplanation:The minimum value is 1 and the length of nums is 2.The value 2 in the range [x, x + n - 1] &#x3D; [1, 1 + 2 - 1], &#x3D; [1, 2] &#x3D; (1, 2) does not occur in nums.Therefore, nums is not consecutive.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Example 3:</strong></p><pre class="line-numbers language-none"><code class="language-none">Input: nums &#x3D; [3,5,4]Output: trueExplanation:The minimum value is 3 and the length of nums is 3.All of the values in the range [x, x + n - 1] &#x3D; [3, 3 + 3 - 1] &#x3D; [3, 5] &#x3D; (3, 4, 5) occur in nums.Therefore, nums is consecutive.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Constraints:</strong></p><ul><li>1 &lt;&#x3D; nums.length &lt;&#x3D; 10<sup>5</sup></li><li>0 &lt;&#x3D; nums[i] &lt;&#x3D; 10<sup>5</sup></li></ul><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/check-if-an-array-is-consecutive/">https://leetcode-cn.com/problems/check-if-an-array-is-consecutive/</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><blockquote><p>排序，新建a，判断是否在nums中<br>扩展思考: a所有元素（可能重复&#x2F;不重复）是否在b中</p></blockquote><h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Solution&#123;public:    bool isConsecutive(vector&lt;int&gt; &amp;nums)    &#123;        &#x2F;&#x2F; if(nums &#x3D;&#x3D; nullptr) return;        int n &#x3D; nums.size();        &#x2F;&#x2F; size        sort(nums.begin(), nums.end());        int min &#x3D; nums[0];        &#x2F;&#x2F;最小值        vector&lt;int&gt; vec;        for (int i &#x3D; min; i &lt;&#x3D; n + min - 1; i++)        &#123;            vec.push_back(i);        &#125;        int i &#x3D; 0;        while (i &lt; vec.size())        &#123;            if (vec[i] &#x3D;&#x3D; nums[i])                i++;            else                return false;        &#125;        return true;    &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;题目2229-Check-if-an-Array-Is-Consecutive&quot;&gt;&lt;a href=&quot;#题目2229-Check-if-an-Array-Is-Consecutive&quot; class=&quot;headerlink&quot; title=&quot;题目2229.Check i</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="http://tiawnen42.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://tiawnen42.top/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="leetcode" scheme="http://tiawnen42.top/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>力扣2022-04-06</title>
    <link href="http://tiawnen42.top/posts/ea37.html"/>
    <id>http://tiawnen42.top/posts/ea37.html</id>
    <published>2022-04-06T15:58:15.000Z</published>
    <updated>2022-04-11T06:14:12.065Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目807-保持城市天际线"><a href="#题目807-保持城市天际线" class="headerlink" title="题目807.保持城市天际线"></a>题目807.保持城市天际线</h2><p>难度：中等</p><p>给你一座由 n x n 个街区组成的城市，每个街区都包含一座立方体建筑。给你一个下标从 <strong>0</strong> 开始的 n x n 整数矩阵 grid ，其中 grid[r][c] 表示坐落于 r 行 c 列的建筑物的 <strong>高度</strong> 。</p><p>城市的 <strong>天际线</strong> 是从远处观察城市时，所有建筑物形成的外部轮廓。从东、南、西、北四个主要方向观测到的 <strong>天际线</strong> 可能不同。</p><p>我们被允许为 <strong>任意数量的建筑物 <strong>的高度增加</strong> 任意增量（不同建筑物的增量可能不同）</strong> 。 高度为 0 的建筑物的高度也可以增加。然而，增加的建筑物高度 <strong>不能影响</strong> 从任何主要方向观察城市得到的 <strong>天际线</strong> 。</p><p>在 <strong>不改变</strong> 从任何主要方向观测到的城市 <strong>天际线</strong> 的前提下，返回建筑物可以增加的 <strong>最大高度增量总和</strong> 。</p><p><strong>示例 1：</strong></p><img style="width: 700px; height: 603px;" src="https://qiniu.tianwen42.top/picgo/807-ex1.png" alt=""><pre class="line-numbers language-none"><code class="language-none">输入：grid &#x3D; [[3,0,8,4],[2,4,5,7],[9,2,6,3],[0,3,1,0]]输出：35解释：建筑物的高度如上图中心所示。用红色绘制从不同方向观看得到的天际线。在不影响天际线的情况下，增加建筑物的高度：gridNew &#x3D; [ [8, 4, 8, 7],            [7, 4, 7, 7],            [9, 4, 8, 7],            [3, 3, 3, 3] ]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>示例 2：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：grid &#x3D; [[0,0,0],[0,0,0],[0,0,0]]输出：0解释：增加任何建筑物的高度都会导致天际线的变化。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>提示：</strong></p><ul><li>n &#x3D;&#x3D; grid.length</li><li>n &#x3D;&#x3D; grid[r].length</li><li>2 &lt;&#x3D; n &lt;&#x3D; 50</li><li>0 &lt;&#x3D; grid[r][c] &lt;&#x3D; 100</li></ul><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/max-increase-to-keep-city-skyline/">https://leetcode-cn.com/problems/max-increase-to-keep-city-skyline/</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><blockquote><p>正视（先列中最大）和侧视（先行中最大）的最大值，再求n*n根据两个组的最小数赋值给[i,j]，即为当前的楼最低点，算与真实的差值即为加高层数</p></blockquote><h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Solution &#123;public:    int maxIncreaseKeepingSkyline(vector&lt;vector&lt;int&gt;&gt;&amp; grid) &#123;        int n&#x3D;grid.size();        &#x2F;&#x2F;侧视图天际线最低        vector&lt;int&gt; row_max_min(n);        &#x2F;&#x2F;正视图天际线最低        vector&lt;int&gt; col_max_min(n);        for(int i&#x3D;0;i&lt;n;i++)&#123;            int tmp&#x3D;*max_element(grid[i].begin(),grid[i].end());            row_max_min[i]&#x3D;tmp;        &#125;        for(int i &#x3D; 0; i &lt; n; i++)        &#123;            for(int j &#x3D; 0; j &lt; n; j++)            &#123;                col_max_min[j] &#x3D; max(col_max_min[j], grid[i][j]);            &#125;        &#125;        int res &#x3D; 0;        for(int i &#x3D; 0; i &lt; n; i++)        &#123;            for(int j &#x3D; 0; j &lt; n; j++)            &#123;                res +&#x3D; min(col_max_min[j],row_max_min[i])-grid[i][j];            &#125;        &#125;        return res;    &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;题目807-保持城市天际线&quot;&gt;&lt;a href=&quot;#题目807-保持城市天际线&quot; class=&quot;headerlink&quot; title=&quot;题目807.保持城市天际线&quot;&gt;&lt;/a&gt;题目807.保持城市天际线&lt;/h2&gt;&lt;p&gt;难度：中等&lt;/p&gt;
&lt;p&gt;给你一座由 n x n 个</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="http://tiawnen42.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://tiawnen42.top/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="leetcode" scheme="http://tiawnen42.top/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>力扣2022-03-27</title>
    <link href="http://tiawnen42.top/posts/fe37.html"/>
    <id>http://tiawnen42.top/posts/fe37.html</id>
    <published>2022-03-27T12:25:59.000Z</published>
    <updated>2022-04-11T06:14:12.065Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目704-二分查找"><a href="#题目704-二分查找" class="headerlink" title="题目704.二分查找"></a>题目704.二分查找</h2><p>难度：简单</p><p>给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。</p><br>**示例 1:**<pre class="line-numbers language-none"><code class="language-none">输入: nums &#x3D; [-1,0,3,5,9,12], target &#x3D; 9输出: 4解释: 9 出现在 nums 中并且下标为 4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>示例 2:</strong></p><pre class="line-numbers language-none"><code class="language-none">输入: nums &#x3D; [-1,0,3,5,9,12], target &#x3D; 2输出: -1解释: 2 不存在 nums 中因此返回 -1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>提示：</strong></p><ol><li>你可以假设 nums 中的所有元素是不重复的。</li><li>n 将在 [1, 10000]之间。</li><li>nums 的每个元素都将在 [-9999, 9999]之间。</li></ol><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/binary-search/">https://leetcode-cn.com/problems/binary-search/</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><blockquote><p>两种方法，注意边界条件和更新条件</p></blockquote><h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Solution &#123;public:    &#x2F;&#x2F; 定义target在左闭右开的区间里，即：[left, right]    int search(vector&lt;int&gt; &amp;nums, int target) &#123;        int head &#x3D; 0;        int rear &#x3D; nums.size() - 1;        int mid;        while (head &lt;&#x3D; rear) &#123;            mid &#x3D; (head + rear) &#x2F; 2;            if (nums[mid] &#x3D;&#x3D; target)                return mid;            else if (nums[mid] &lt; target) &#123;                head &#x3D; mid + 1; &#x2F;&#x2F; 注意            &#125; else if (nums[mid] &gt; target) &#123;                rear &#x3D; mid - 1;            &#125;        &#125;        return 0;    &#125;    &#x2F;&#x2F; 定义target在左闭右开的区间里，即：[left, right)    int search2(vector&lt;int&gt;&amp; nums, int target) &#123;        int left &#x3D; 0;        int right &#x3D; nums.size(); &#x2F;&#x2F; 定义target在左闭右开的区间里，即：[left, right)        while (left &lt; right) &#123; &#x2F;&#x2F; 因为left &#x3D;&#x3D; right的时候，在[left, right)是无效的空间，所以使用 &lt;            int middle &#x3D; left + ((right - left) &gt;&gt; 1);            if (nums[middle] &gt; target) &#123;                right &#x3D; middle; &#x2F;&#x2F; target 在左区间，在[left, middle)中            &#125; else if (nums[middle] &lt; target) &#123;                left &#x3D; middle + 1; &#x2F;&#x2F; target 在右区间，在[middle + 1, right)中            &#125; else &#123; &#x2F;&#x2F; nums[middle] &#x3D;&#x3D; target                return middle; &#x2F;&#x2F; 数组中找到目标值，直接返回下标            &#125;        &#125;        &#x2F;&#x2F; 未找到目标值        return -1;    &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;题目704-二分查找&quot;&gt;&lt;a href=&quot;#题目704-二分查找&quot; class=&quot;headerlink&quot; title=&quot;题目704.二分查找&quot;&gt;&lt;/a&gt;题目704.二分查找&lt;/h2&gt;&lt;p&gt;难度：简单&lt;/p&gt;
&lt;p&gt;给定一个 n 个元素有序的（升序）整型数组 num</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="http://tiawnen42.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://tiawnen42.top/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="leetcode" scheme="http://tiawnen42.top/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>力扣2022-03-25</title>
    <link href="http://tiawnen42.top/posts/3fb6.html"/>
    <id>http://tiawnen42.top/posts/3fb6.html</id>
    <published>2022-03-25T13:02:52.000Z</published>
    <updated>2022-04-11T06:14:12.066Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><ol start="217"><li>存在重复元素</li></ol><p>难度：简单</p><p><code>nums</code></p><p><strong>至少两次</strong></p><p><code>true</code></p><p><code>false</code></p><p><strong>示例 1：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：nums &#x3D; [1,2,3,1]输出：true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>示例 2：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：nums &#x3D; [1,2,3,4]输出：false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>示例 3：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：nums &#x3D; [1,1,1,3,3,4,3,2,4,2]输出：true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>提示：</strong></p><ul><li>1 &lt;&#x3D; nums.length &lt;&#x3D; 10<sup>5</sup></li><li>-10<sup>9</sup> &lt;&#x3D; nums[i] &lt;&#x3D; 10<sup>9</sup></li></ul><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/contains-duplicate/">https://leetcode-cn.com/problems/contains-duplicate/</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><blockquote><p>排序，有相同的肯定近邻</p></blockquote><h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class Solution &#123;public:    bool containsDuplicate(vector&lt;int&gt;&amp; nums) &#123;        sort(nums.begin(), nums.end());        while(nums.size()&gt;1&amp;&amp;(nums[nums.size()-1]!&#x3D;nums[nums.size()-2]))&#123;            &#x2F;&#x2F; 判断栈顶和倒二是否相等，注意边界条件            nums.pop_back();        &#125;        &#x2F;&#x2F; for(int i&#x3D;0; i&lt;nums.size();i++)&#123;        &#x2F;&#x2F;     cout &lt;&lt; nums[i] &lt;&lt; &quot; &quot;;        &#x2F;&#x2F; &#125;        if(nums.size()&#x3D;&#x3D;1) return false;else return true;    &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;ol start=&quot;217&quot;&gt;
&lt;li&gt;存在重复元素&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;难度：简单&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nums&lt;/code&gt;&lt;</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="http://tiawnen42.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://tiawnen42.top/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="leetcode" scheme="http://tiawnen42.top/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>2021归档</title>
    <link href="http://tiawnen42.top/posts/b2d9.html"/>
    <id>http://tiawnen42.top/posts/b2d9.html</id>
    <published>2022-03-21T03:04:22.000Z</published>
    <updated>2022-03-22T06:56:58.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://qiniu.tianwen42.top/picgo/IMG_20201229_200725.jpg" alt="IMG_20201229_200725"></p><p><img src="http://qiniu.tianwen42.top/picgo/IMG_20210429_191925.jpg" alt="IMG_20210429_191925"></p><p><img src="http://qiniu.tianwen42.top/picgo/IMG_20211017_113126.jpg" alt="IMG_20211017_113126"></p><p><img src="http://qiniu.tianwen42.top/picgo/0009.jpg" alt="0009"><img src="http://qiniu.tianwen42.top/picgo/%5BThumb%5D640326600415-3ec0b87c-0587-317d-862b-68d4c1744c4f.jpg" alt="[Thumb]640326600415-3ec0b87c-0587-317d-862b-68d4c1744c4f"  /></p><img src="http://qiniu.tianwen42.top/picgo/mmexport1641051034837.jpg" alt="mmexport1641051034837" style="zoom:50%;" /><p><img src="http://qiniu.tianwen42.top/picgo/mmexport1642862346561.jpg" alt="mmexport1642862346561"><img src="http://qiniu.tianwen42.top/picgo/mmexport1640590404629.jpg" alt="mmexport1640590404629"><img src="http://qiniu.tianwen42.top/picgo/IMG_20220125_130126.jpg" alt="IMG_20220125_130126"></p><p>分割线，听首歌吧</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=530 height=86 src="//music.163.com/outchain/player?type=2&id=26494698&auto=0&height=66"></iframe>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;http://qiniu.tianwen42.top/picgo/IMG_20201229_200725.jpg&quot; alt=&quot;IMG_20201229_200725&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://qiniu.tianwen42.to</summary>
      
    
    
    
    <category term="生活" scheme="http://tiawnen42.top/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
    <category term="归档" scheme="http://tiawnen42.top/tags/%E5%BD%92%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title>力扣2022-03-03</title>
    <link href="http://tiawnen42.top/posts/5d37.html"/>
    <id>http://tiawnen42.top/posts/5d37.html</id>
    <published>2022-03-03T08:02:22.000Z</published>
    <updated>2022-04-11T06:14:12.066Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目343-整数拆分"><a href="#题目343-整数拆分" class="headerlink" title="题目343. 整数拆分"></a>题目343. 整数拆分</h2><p>难度：中等</p><p>给定一个正整数 n ，将其拆分为 k 个 <strong>正整数</strong> 的和（ k &gt;&#x3D; 2 ），并使这些整数的乘积最大化。</p><p>返回 <em>你可以获得的最大乘积</em> 。</p><p><strong>示例 1:</strong></p><pre class="line-numbers language-none"><code class="language-none">输入: n &#x3D; 2输出: 1解释: 2 &#x3D; 1 + 1, 1 × 1 &#x3D; 1。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>示例 2:</strong></p><pre class="line-numbers language-none"><code class="language-none">输入: n &#x3D; 10输出: 36解释: 10 &#x3D; 3 + 3 + 4, 3 × 3 × 4 &#x3D; 36。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>提示:</strong></p><ul><li>2 &lt;&#x3D; n &lt;&#x3D; 58</li></ul><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/integer-break/">https://leetcode-cn.com/problems/integer-break/</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><blockquote><p>dp题目</p><p>dp[i] &#x3D; max(dp[i], max((i - j) * j, dp[i - j] * j));</p><p>dp[i] 是依靠 dp[i - j]的状态，所以遍历i一定是从前向后遍历，先有dp[i - j]再有dp[i]</p></blockquote><h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;动态规划class Solution &#123;public:    int integerBreak(int n) &#123;        if(n&#x3D;&#x3D;2)            return 1;        vector&lt;int&gt; dp(n+1,0);        dp[2] &#x3D; 1;        for(int i&#x3D;3;i&lt;&#x3D;n;++i)&#123;            for(int j&#x3D;1;j&lt;i;++j)                dp[i] &#x3D; max(dp[i],max(dp[i-j]*j,(i-j)*j));        &#125;        return dp[n];    &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;贪心算法&#x2F;&#x2F;时间复杂度O(n)&#x2F;&#x2F;空间复杂度O(1)class Solution &#123;public:    int integerBreak(int n) &#123;        if (n &#x3D;&#x3D; 2) return 1;        if (n &#x3D;&#x3D; 3) return 2;        if (n &#x3D;&#x3D; 4) return 4;        int result &#x3D; 1;        while (n &gt; 4) &#123;            result *&#x3D; 3;            n -&#x3D; 3;        &#125;        result *&#x3D; n;        return result;    &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;题目343-整数拆分&quot;&gt;&lt;a href=&quot;#题目343-整数拆分&quot; class=&quot;headerlink&quot; title=&quot;题目343. 整数拆分&quot;&gt;&lt;/a&gt;题目343. 整数拆分&lt;/h2&gt;&lt;p&gt;难度：中等&lt;/p&gt;
&lt;p&gt;给定一个正整数 n ，将其拆分为 k 个 &lt;s</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="http://tiawnen42.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://tiawnen42.top/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="leetcode" scheme="http://tiawnen42.top/tags/leetcode/"/>
    
    <category term="dp" scheme="http://tiawnen42.top/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>力扣2022-02-28</title>
    <link href="http://tiawnen42.top/posts/676.html"/>
    <id>http://tiawnen42.top/posts/676.html</id>
    <published>2022-02-28T01:16:55.000Z</published>
    <updated>2022-04-11T06:14:12.066Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目7-整数反转"><a href="#题目7-整数反转" class="headerlink" title="题目7.整数反转"></a>题目7.整数反转</h2><p>难度：中等</p><p>给你一个 32 位的有符号整数 x ，返回将 x 中的数字部分反转后的结果。</p><p>如果反转后整数超过 32 位的有符号整数的范围 [−2<sup>31</sup>,  2<sup>31 </sup>− 1] ，就返回 0。</p><p><strong>假设环境不允许存储 64 位整数（有符号或无符号）。</strong></p><p><strong>示例 1：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：x &#x3D; 123输出：321<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>示例 2：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：x &#x3D; -123输出：-321<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>示例 3：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：x &#x3D; 120输出：21<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>示例 4：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：x &#x3D; 0输出：0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>提示：</strong></p><ul><li>-2<sup>31</sup> &lt;&#x3D; x &lt;&#x3D; 2<sup>31</sup> - 1</li></ul><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/reverse-integer/">https://leetcode-cn.com/problems/reverse-integer/</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><blockquote><p>整数翻转，123 –&gt; 3 * 10+2 –&gt; 32 * 10+1 –&gt;321</p><p>想到另一个整数拼接的思路 123 –&gt; 123 * 10+1 –&gt; 1231 * 10 +2 –&gt; 12312 * 10 +3 –&gt;123123</p><p>再一个就是整数对称的思路 123 –&gt; 123 * 10+3 –&gt; 1231 * 10 +2 –&gt; 12312 * 10 +1 –&gt;123321</p></blockquote><h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;123  321&#x2F;&#x2F;-123 -321&#x2F;&#x2F;0    0#include &lt;iostream&gt;class Solution &#123;public:    int reverse2(int x) &#123;        int ans &#x3D; 0;        while(x !&#x3D; 0)        &#123;            if(ans &gt; INT_MAX || ans &lt; INT_MIN)                return 0;            ans &#x3D; ans * 10 + x % 10;            x &#x2F;&#x3D; 10;        &#125;        return ans;    &#125;&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;数字对称&#x2F;&#x2F;123 123321&#x2F;&#x2F;-8 -88&#x2F;&#x2F;-10 -1001int symmetryReverse(int x) &#123;        using namespace std;        int ans &#x3D; x;        while(x !&#x3D; 0)        &#123;            if(ans &gt; INT_MAX || ans &lt; INT_MIN)                return 0;            ans &#x3D; ans * 10 + x % 10;            &#x2F;&#x2F;cout&lt;&lt;ans&lt;&lt;endl;            x &#x2F;&#x3D; 10;        &#125;        return ans;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">&#x2F;&#x2F;数字重复&#x2F;&#x2F;105 105105&#x2F;&#x2F;10  1010&#x2F;&#x2F;1   11int digitalRepeated(int x) &#123;        using namespace std;                int ans &#x3D; x;        int num &#x3D; 1 + log10(x);  &#x2F;&#x2F;位数        for (int i &#x3D; num - 1; i &gt;&#x3D; 0; i--) &#123;            if (ans &#x3D;&#x3D; 0 || ans &gt; INT_MAX || ans &lt; INT_MIN)      &#x2F;&#x2F;用for要注意0或者溢出                return 0;            int maxdigit &#x3D; (int) pow(10, i);            &#x2F;&#x2F; cout&lt;&lt;ans&lt;&lt;endl;            ans &#x3D; ans * 10 + (x &#x2F; maxdigit) % 10;            x %&#x3D; maxdigit;        &#125;        return ans;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>由这一题抽象出对数字的常规算法，详情见<a href="">数字切片</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;题目7-整数反转&quot;&gt;&lt;a href=&quot;#题目7-整数反转&quot; class=&quot;headerlink&quot; title=&quot;题目7.整数反转&quot;&gt;&lt;/a&gt;题目7.整数反转&lt;/h2&gt;&lt;p&gt;难度：中等&lt;/p&gt;
&lt;p&gt;给你一个 32 位的有符号整数 x ，返回将 x 中的数字部分反转</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="http://tiawnen42.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://tiawnen42.top/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="leetcode" scheme="http://tiawnen42.top/tags/leetcode/"/>
    
    <category term="数字切片" scheme="http://tiawnen42.top/tags/%E6%95%B0%E5%AD%97%E5%88%87%E7%89%87/"/>
    
  </entry>
  
  <entry>
    <title>力扣2022-02-27</title>
    <link href="http://tiawnen42.top/posts/236.html"/>
    <id>http://tiawnen42.top/posts/236.html</id>
    <published>2022-02-26T16:15:35.000Z</published>
    <updated>2022-04-11T06:14:12.068Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目1221-分割平衡字符串"><a href="#题目1221-分割平衡字符串" class="headerlink" title="题目1221.分割平衡字符串"></a>题目1221.分割平衡字符串</h2><p>难度：简单</p><p>在一个 <strong>平衡字符串</strong> 中，’L’ 和 ‘R’ 字符的数量是相同的。</p><p>给你一个平衡字符串 s，请你将它分割成尽可能多的平衡字符串。</p><p><strong>注意：</strong>分割得到的每个字符串都必须是平衡字符串，且分割得到的平衡字符串是原平衡字符串的连续子串。</p><p>返回可以通过分割得到的平衡字符串的 <strong>最大数量</strong> <strong>。</strong></p><p><strong>示例 1：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：s &#x3D; &quot;RLRRLLRLRL&quot;输出：4解释：s 可以分割为 &quot;RL&quot;、&quot;RRLL&quot;、&quot;RL&quot;、&quot;RL&quot; ，每个子字符串中都包含相同数量的 &#39;L&#39; 和 &#39;R&#39; 。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>示例 2：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：s &#x3D; &quot;RLLLLRRRLR&quot;输出：3解释：s 可以分割为 &quot;RL&quot;、&quot;LLLRRR&quot;、&quot;LR&quot; ，每个子字符串中都包含相同数量的 &#39;L&#39; 和 &#39;R&#39; 。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>示例 3：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：s &#x3D; &quot;LLLLRRRR&quot;输出：1解释：s 只能保持原样 &quot;LLLLRRRR&quot;.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>示例 4：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：s &#x3D; &quot;RLRRRLLRLL&quot;输出：2解释：s 可以分割为 &quot;RL&quot;、&quot;RRRLLRLL&quot; ，每个子字符串中都包含相同数量的 &#39;L&#39; 和 &#39;R&#39; 。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>提示：</strong></p><ul><li>1 &lt;&#x3D; s.length &lt;&#x3D; 1000</li><li>s[i] &#x3D; ‘L’ 或 ‘R’</li><li>s 是一个 <strong>平衡</strong> 字符串</li></ul><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/split-a-string-in-balanced-strings/">https://leetcode-cn.com/problems/split-a-string-in-balanced-strings/</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><blockquote><p>上楼梯问题，L下一步R上一步，在平地上num+1</p><p>“括号匹配”问题,主要是栈操作,’R’进栈,’L’出栈,栈空则匹配成功,结果加一</p></blockquote><h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">balancedStringSplit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        s<span class="token operator">=</span><span class="token builtin">list</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>        stack<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        high<span class="token punctuation">,</span>num<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span>        <span class="token keyword">while</span> s<span class="token punctuation">:</span>            <span class="token keyword">if</span> s<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token string">'R'</span><span class="token punctuation">:</span>                high<span class="token operator">-=</span><span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                high<span class="token operator">+=</span><span class="token number">1</span>            <span class="token keyword">if</span> high<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                num<span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">return</span> num<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;题目1221-分割平衡字符串&quot;&gt;&lt;a href=&quot;#题目1221-分割平衡字符串&quot; class=&quot;headerlink&quot; title=&quot;题目1221.分割平衡字符串&quot;&gt;&lt;/a&gt;题目1221.分割平衡字符串&lt;/h2&gt;&lt;p&gt;难度：简单&lt;/p&gt;
&lt;p&gt;在一个 &lt;stro</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="http://tiawnen42.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="算法" scheme="http://tiawnen42.top/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="leetcode" scheme="http://tiawnen42.top/tags/leetcode/"/>
    
    <category term="字符串" scheme="http://tiawnen42.top/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="贪心算法" scheme="http://tiawnen42.top/tags/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>力扣 2022-02-26</title>
    <link href="http://tiawnen42.top/posts/9ea3.html"/>
    <id>http://tiawnen42.top/posts/9ea3.html</id>
    <published>2022-02-25T16:47:06.000Z</published>
    <updated>2022-04-11T06:14:12.069Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目917-仅仅反转字母"><a href="#题目917-仅仅反转字母" class="headerlink" title="题目917.仅仅反转字母"></a>题目917.仅仅反转字母</h2><p>难度：简单</p><p>给你一个字符串 s ，根据下述规则反转字符串：</p><ul><li>所有非英文字母保留在原有位置。</li><li>所有英文字母（小写或大写）位置反转。</li></ul><p>返回反转后的 s<em> 。</em></p><p><strong>示例 1：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：s &#x3D; &quot;ab-cd&quot;输出：&quot;dc-ba&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>示例 2：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：s &#x3D; &quot;a-bC-dEf-ghIj&quot;输出：&quot;j-Ih-gfE-dCba&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>示例 3：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：s &#x3D; &quot;Test1ng-Leet&#x3D;code-Q!&quot;输出：&quot;Qedo1ct-eeLg&#x3D;ntse-T!&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>提示</strong></p><ul><li>1 &lt;&#x3D; s.length &lt;&#x3D; 100</li><li>s 仅由 ASCII 值在范围 [33, 122] 的字符组成</li><li>s 不含 ‘&quot;‘ 或 ‘\‘</li></ul><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/reverse-only-letters/">https://leetcode-cn.com/problems/reverse-only-letters/</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><blockquote><p>双指针法遍历</p></blockquote><h2 id=""><a href="#" class="headerlink" title=""></a></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">reverseOnlyLetters</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">str</span><span class="token punctuation">:</span>        s<span class="token operator">=</span><span class="token builtin">list</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>        head<span class="token punctuation">,</span>tail<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>head<span class="token operator">&lt;</span>tail<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> s<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">.</span>isalpha<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">and</span> s<span class="token punctuation">[</span>tail<span class="token punctuation">]</span><span class="token punctuation">.</span>isalpha<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                s<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">,</span>s<span class="token punctuation">[</span>tail<span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">[</span>tail<span class="token punctuation">]</span><span class="token punctuation">,</span>s<span class="token punctuation">[</span>head<span class="token punctuation">]</span>    <span class="token comment">#交换</span>                head<span class="token operator">+=</span><span class="token number">1</span>                tail<span class="token operator">-=</span><span class="token number">1</span>            <span class="token keyword">elif</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">.</span>isalpha<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>tail<span class="token punctuation">]</span><span class="token punctuation">.</span>isalpha<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                tail<span class="token operator">-=</span><span class="token number">1</span>            <span class="token keyword">elif</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">.</span>isalpha<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token boolean">False</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>tail<span class="token punctuation">]</span><span class="token punctuation">.</span>isalpha<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                head<span class="token operator">+=</span><span class="token number">1</span>            <span class="token keyword">elif</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">.</span>isalpha<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token boolean">False</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>tail<span class="token punctuation">]</span><span class="token punctuation">.</span>isalpha<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                head<span class="token operator">+=</span><span class="token number">1</span>                tail<span class="token operator">-=</span><span class="token number">1</span>                <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;题目917-仅仅反转字母&quot;&gt;&lt;a href=&quot;#题目917-仅仅反转字母&quot; class=&quot;headerlink&quot; title=&quot;题目917.仅仅反转字母&quot;&gt;&lt;/a&gt;题目917.仅仅反转字母&lt;/h2&gt;&lt;p&gt;难度：简单&lt;/p&gt;
&lt;p&gt;给你一个字符串 s ，根据下述规则</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="http://tiawnen42.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>力扣 2022-02-25</title>
    <link href="http://tiawnen42.top/posts/9fe3.html"/>
    <id>http://tiawnen42.top/posts/9fe3.html</id>
    <published>2022-02-25T05:01:03.000Z</published>
    <updated>2022-04-11T06:14:12.069Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目509-斐波那契数"><a href="#题目509-斐波那契数" class="headerlink" title="题目509.斐波那契数"></a>题目509.斐波那契数</h2><p>难度：简单</p><p><strong>斐波那契数</strong> （通常用 F(n) 表示）形成的序列称为 <strong>斐波那契数列</strong> 。该数列由 0 和 1 开始，后面的每一项数字都是前面两项数字的和。也就是：</p><pre class="line-numbers language-none"><code class="language-none">F(0) &#x3D; 0，F(1) &#x3D; 1F(n) &#x3D; F(n - 1) + F(n - 2)，其中 n &gt; 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>给定 n ，请计算 F(n) 。</p><p><strong>示例 1：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：n &#x3D; 2输出：1解释：F(2) &#x3D; F(1) + F(0) &#x3D; 1 + 0 &#x3D; 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>示例 2：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：n &#x3D; 3输出：2解释：F(3) &#x3D; F(2) + F(1) &#x3D; 1 + 1 &#x3D; 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>示例 3：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入：n &#x3D; 4输出：3解释：F(4) &#x3D; F(3) + F(2) &#x3D; 2 + 1 &#x3D; 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>提示：</strong></p><ul><li>0 &lt;&#x3D; n &lt;&#x3D; 30</li></ul><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/fibonacci-number/">https://leetcode-cn.com/problems/fibonacci-number/</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#递归法</span><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">fib</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token number">0</span>        <span class="token keyword">elif</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span><span class="token keyword">return</span> self<span class="token punctuation">.</span>fib<span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>self<span class="token punctuation">.</span>fib<span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="http://cdn.tianwen42.top/picgo/image-20220225133243080.png" alt="image-20220225133243080"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#通项法</span><span class="token keyword">import</span> math<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">fib</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        :type N: int        :rtype: int        """</span>        sqrt5<span class="token operator">=</span>math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token builtin">round</span><span class="token punctuation">(</span><span class="token builtin">pow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span>sqrt5<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span>N<span class="token punctuation">)</span><span class="token operator">/</span>sqrt5<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;题目509-斐波那契数&quot;&gt;&lt;a href=&quot;#题目509-斐波那契数&quot; class=&quot;headerlink&quot; title=&quot;题目509.斐波那契数&quot;&gt;&lt;/a&gt;题目509.斐波那契数&lt;/h2&gt;&lt;p&gt;难度：简单&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;斐波那契数&lt;/strong</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="http://tiawnen42.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="斐波那契数列" scheme="http://tiawnen42.top/tags/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>力扣 2022-02-24</title>
    <link href="http://tiawnen42.top/posts/a858.html"/>
    <id>http://tiawnen42.top/posts/a858.html</id>
    <published>2022-02-24T14:04:48.000Z</published>
    <updated>2022-04-11T06:14:12.070Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目13-罗马数字转整数"><a href="#题目13-罗马数字转整数" class="headerlink" title="题目13. 罗马数字转整数"></a>题目13. 罗马数字转整数</h2><p>难度：简单</p><p>罗马数字包含以下七种字符: I， V， X， L，C，D 和 M。</p><pre class="line-numbers language-none"><code class="language-none">字符          数值I             1V             5X             10L             50C             100D             500M             1000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例如， 罗马数字 2 写做 II ，即为两个并列的 1 。12 写做 XII ，即为 X + II 。 27 写做  XXVII, 即为 XX + V + II 。</p><p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：</p><ul><li>I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。</li><li>X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。 </li><li>C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。</li></ul><p>给定一个罗马数字，将其转换成整数。</p><p><strong>示例 1:</strong></p><pre class="line-numbers language-none"><code class="language-none">输入: s &#x3D; &quot;III&quot;输出: 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>示例 2:</strong></p><pre class="line-numbers language-none"><code class="language-none">输入: s &#x3D; &quot;IV&quot;输出: 4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>示例 3:</strong></p><pre class="line-numbers language-none"><code class="language-none">输入: s &#x3D; &quot;IX&quot;输出: 9<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>示例 4:</strong></p><pre class="line-numbers language-none"><code class="language-none">输入: s &#x3D; &quot;LVIII&quot;输出: 58解释: L &#x3D; 50, V&#x3D; 5, III &#x3D; 3.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>示例 5:</strong></p><pre class="line-numbers language-none"><code class="language-none">输入: s &#x3D; &quot;MCMXCIV&quot;输出: 1994解释: M &#x3D; 1000, CM &#x3D; 900, XC &#x3D; 90, IV &#x3D; 4.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>提示：</strong></p><ul><li>1 &lt;&#x3D; s.length &lt;&#x3D; 15</li><li>s 仅含字符 (‘I’, ‘V’, ‘X’, ‘L’, ‘C’, ‘D’, ‘M’)</li><li>题目数据保证 s 是一个有效的罗马数字，且表示整数在范围 [1, 3999] 内</li><li>题目所给测试用例皆符合罗马数字书写规则，不会出现跨位等情况。</li><li>IL 和 IM 这样的例子并不符合题目要求，49 应该写作 XLIX，999 应该写作 CMXCIX 。</li><li>关于罗马数字的详尽书写规则，可以参考 <a href="https://b2b.partcommunity.com/community/knowledge/zh_CN/detail/10753/%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97#knowledge_article">罗马数字 - Mathematics </a>。</li></ul><p>来源：力扣（LeetCode）<br>链接：<a href="https://leetcode-cn.com/problems/roman-to-integer/">https://leetcode-cn.com/problems/roman-to-integer/</a><br>著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。</p><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><blockquote><p>替换双位罗马字符，再映射</p></blockquote><h2 id="解题代码"><a href="#解题代码" class="headerlink" title="解题代码"></a>解题代码</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">romanToInt</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        s <span class="token operator">=</span> s<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'CM'</span><span class="token punctuation">,</span> <span class="token string">'Q'</span><span class="token punctuation">)</span>        s <span class="token operator">=</span> s<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'CD'</span><span class="token punctuation">,</span> <span class="token string">'W'</span><span class="token punctuation">)</span>        s <span class="token operator">=</span> s<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'XC'</span><span class="token punctuation">,</span> <span class="token string">'E'</span><span class="token punctuation">)</span>        s <span class="token operator">=</span> s<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'XL'</span><span class="token punctuation">,</span> <span class="token string">'R'</span><span class="token punctuation">)</span>        s <span class="token operator">=</span> s<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'IX'</span><span class="token punctuation">,</span> <span class="token string">'T'</span><span class="token punctuation">)</span>        s <span class="token operator">=</span> s<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'IV'</span><span class="token punctuation">,</span> <span class="token string">'Y'</span><span class="token punctuation">)</span>        keys <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">'Q'</span> <span class="token punctuation">:</span> <span class="token number">900</span><span class="token punctuation">,</span>            <span class="token string">'W'</span> <span class="token punctuation">:</span> <span class="token number">400</span><span class="token punctuation">,</span>            <span class="token string">'E'</span> <span class="token punctuation">:</span> <span class="token number">90</span><span class="token punctuation">,</span>            <span class="token string">'R'</span> <span class="token punctuation">:</span> <span class="token number">40</span><span class="token punctuation">,</span>            <span class="token string">'T'</span> <span class="token punctuation">:</span> <span class="token number">9</span><span class="token punctuation">,</span>            <span class="token string">'Y'</span> <span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span>            <span class="token string">'M'</span> <span class="token punctuation">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>            <span class="token string">'D'</span> <span class="token punctuation">:</span> <span class="token number">500</span><span class="token punctuation">,</span>            <span class="token string">'C'</span> <span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span>            <span class="token string">'L'</span> <span class="token punctuation">:</span> <span class="token number">50</span><span class="token punctuation">,</span>            <span class="token string">'X'</span> <span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>            <span class="token string">'V'</span> <span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span>            <span class="token string">'I'</span> <span class="token punctuation">:</span> <span class="token number">1</span>        <span class="token punctuation">&#125;</span>        ans <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> ch <span class="token keyword">in</span> s<span class="token punctuation">:</span>            ans <span class="token operator">+=</span> keys<span class="token punctuation">[</span>ch<span class="token punctuation">]</span>                <span class="token keyword">return</span> ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;题目13-罗马数字转整数&quot;&gt;&lt;a href=&quot;#题目13-罗马数字转整数&quot; class=&quot;headerlink&quot; title=&quot;题目13. 罗马数字转整数&quot;&gt;&lt;/a&gt;题目13. 罗马数字转整数&lt;/h2&gt;&lt;p&gt;难度：简单&lt;/p&gt;
&lt;p&gt;罗马数字包含以下七种字符: I</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="http://tiawnen42.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="数据结构" scheme="http://tiawnen42.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
</feed>
